/*
Deployment script for etl_controller

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "etl_controller"
:setvar DefaultFilePrefix "etl_controller"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Dropping [dbo].[SystemParametersEnvironmentNameCK]...';


GO
ALTER TABLE [dbo].[SystemParameters] DROP CONSTRAINT [SystemParametersEnvironmentNameCK];


GO
PRINT N'Starting rebuilding table [dbo].[ETLBatchConstraint]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ETLBatchConstraint] (
    [ConstID]    INT          NOT NULL,
    [BatchID]    INT          NOT NULL,
    [ProcessID]  INT          NOT NULL,
    [ConstOrder] VARCHAR (10) NULL,
    [WaitPeriod] INT          NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [ConstID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ETLBatchConstraint])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ETLBatchConstraint] ([BatchID], [ConstID], [ProcessID], [ConstOrder], [WaitPeriod])
        SELECT   [BatchID],
                 [ConstID],
                 [ProcessID],
                 [ConstOrder],
                 [WaitPeriod]
        FROM     [dbo].[ETLBatchConstraint]
        ORDER BY [BatchID] ASC, [ConstID] ASC;
    END

DROP TABLE [dbo].[ETLBatchConstraint];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ETLBatchConstraint]', N'ETLBatchConstraint';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[ETLStepConstraint]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_ETLStepConstraint] (
    [ConstID]    INT          NOT NULL,
    [StepID]     INT          NOT NULL,
    [BatchID]    INT          NOT NULL,
    [ProcessID]  INT          NOT NULL,
    [ConstOrder] VARCHAR (10) NULL,
    [WaitPeriod] INT          NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [StepID] ASC, [ConstID] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[ETLStepConstraint])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_ETLStepConstraint] ([BatchID], [StepID], [ConstID], [ProcessID], [ConstOrder], [WaitPeriod])
        SELECT   [BatchID],
                 [StepID],
                 [ConstID],
                 [ProcessID],
                 [ConstOrder],
                 [WaitPeriod]
        FROM     [dbo].[ETLStepConstraint]
        ORDER BY [BatchID] ASC, [StepID] ASC, [ConstID] ASC;
    END

DROP TABLE [dbo].[ETLStepConstraint];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_ETLStepConstraint]', N'ETLStepConstraint';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[SystemParametersEnvironmentNameCK]...';


GO
ALTER TABLE [dbo].[SystemParameters] WITH NOCHECK
    ADD CONSTRAINT [SystemParametersEnvironmentNameCK] CHECK (EnvironmentName IN ('ALL', 'DEV', 'TEST', 'UAT','PPE', 'PROD'));


GO
PRINT N'Altering [dbo].[prc_ExportMetadataScript]...';


GO
ALTER procedure [dbo].[prc_ExportMetadataScript]
 @BatchName nvarchar(100) = null
,@BatchId int = null
,@Script nvarchar(max) = null out
as
/******************************************************************************
** File:	[prc_ExportMetadataScript].sql
** Name:	[dbo].[prc_ExportMetadataScript]

** Desc:	export workflow metadata to sql script
**          
**
** Params:
** Returns:
**
** Author:	andrey
** Date:	11/27/2016
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------
declare @script nvarchar(max);
exec prc_ExportMetadataScript @batchId = 100,@script = @script out
print substring (@Script,1,4000)
print substring (@Script,4001,8000)
print substring (@Script,8001,12000)
print substring (@Script,12001,16000)

*/
set nocount on;

set @script = '';
declare @sql nvarchar(max);

begin try

declare @msg nvarchar(2000);
if (@BatchName is null and @BatchId is null)
begin
	set @msg = 'Invalid input parameters. BatchId or BatchName are required';
	throw 50001,@msg,1; 
end


declare @bid int, @batchDesc nvarchar(1000);
select top 1
	 @bid = batchId
 from dbo.ETLBatch
where batchId = isnull(@batchId,batchId)
  and batchName = isnull(@batchName,batchName);

if (@bid is null)
begin
	set @msg = 'Invalid input parameters. BatchId: ' + isnull(cast(@batchId as nvarchar(30)),'null')
			 + ' or BatchName:' + isnull(@BatchName,'null');
	throw 50002,@msg,1; 
end

select top 1
	 @batchId = batchId
	,@BatchName = batchName
	,@BatchDesc = batchDesc
from dbo.ETLBatch
where batchId = @bid;


set @Script = '
---------------------------------------------------------
--' + @batchDesc + '
---------------------------------------------------------
set quoted_identIfier on;
set nocount on;
Declare @Batchid int,@BatchName nvarchar(100) ;
set @BatchID = ' + cast(@batchId as nvarchar(30)) + ';
set @BatchName = ''' + @batchName + ''';

print '' Compiling '' + @BatchName;

begin try
-------------------------------------------------------
--remove Workflow metadata
-------------------------------------------------------
exec dbo.prc_RemoveContext @BatchName;
'

set @sql = (select
	     + '''' + isnull(batchDesc,@batchName) + ''','
		 + isnull(cast(OnSuccessID as nvarchar(10)),'null') + ','
		 + isnull(cast(OnFailureID as nvarchar(10)),'null') + ','
		 + isnull(cast(IgnoreErr as nvarchar(10)),'0') + ','
		 + isnull(cast(RestartOnErr as nvarchar(10)),'0')
from dbo.ETLBatch where batchId = @batchId);

set @Script += '

-------------------------------------------------------
--create workflow record 
-------------------------------------------------------
--set identity_insert dbo.ETLBatch on;
insert dbo.ETLBatch
(BatchID,BatchName,BatchDesc,OnSuccessID,OnFailureID,IgnoreErr,RestartOnErr)
values (@BatchID,@BatchName,' + @sql + ');
--set identity_insert dbo.ETLBatch off;
'
--system attributes
set @sql = '';
select @sql += ',(@batchId,''' + ba.attributeName + ''',''' + replace(ba.attributeValue,'''','''''') + ''')
'
from dbo.ETLBatchAttribute ba
where ba.batchId = @batchId
and  ba.AttributeName in ('HISTRET','MAXTHREAD','PING','TIMEOUT','LIFETIME','RETRY','DELAY');

if (len(@sql) > 0)
set @Script += '
-------------------------------------------------------
--Define workflow level system attributes
--those attributes can be referenced in wf body like <etl:MaxThread> etc.
-------------------------------------------------------
insert dbo.ETLBatchAttribute
(BatchID,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';


--user attributes
set @sql = '';
select @sql += ',(@batchId,''' + ba.attributeName + ''',''' + replace(ba.attributeValue,'''','''''') + ''')
'
from dbo.ETLBatchAttribute ba
where ba.batchId = @batchId
and  ba.AttributeName not in ('HISTRET','MAXTHREAD','PING','TIMEOUT','LIFETIME','RETRY','DELAY');

if (len(@sql) > 0)
set @Script += '
-------------------------------------------------------
--Define workflow level user attributes
-- use systemparameters to store global configuration parameters
-- select * from systemparameters
-------------------------------------------------------
insert dbo.ETLBatchAttribute
(BatchID,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';


if exists (select 1 from dbo.ETLBatchConstraint where batchId = @batchId)
begin

set @Script += '
-------------------------------------------------------
--create batch level constraints
-------------------------------------------------------

'
set @sql = '';
select @sql += ',(@batchId,'
		 + cast(constId as nvarchar(10)) + ','
		 + isnull(cast(ProcessId as nvarchar(10)),'null') + ','
		 + isnull('''' + ConstOrder + '''','null') + ','
		 + isnull(cast(WaitPeriod as nvarchar(10)),'0') + ')'
from dbo.ETLBatchConstraint where batchId = @batchId
order by constId;


if (len(@sql) > 0)
set @Script += '
--set identity_insert dbo.ETLBatchConstraint on
insert dbo.ETLBatchConstraint
(BatchID,ConstID,ProcessID,ConstOrder,WaitPeriod)
values
' + right(@sql,len(@sql) - 1) + ';
--set identity_insert dbo.ETLBatchConstraint off;
';

--system attributes
set @sql = '';
select @sql += ',(@batchId,' + cast(bca.ConstId as nvarchar(10)) + ',''' + bca.attributeName + ''',''' + replace(bca.attributeValue,'''','''''') + ''')
'
from dbo.ETLBatchConstraintAttribute bca
where bca.batchId = @batchId
and  bca.AttributeName in ('DISABLED','PING')
order by bca.constId;

if (len(@sql) > 0)
begin
set @Script += '
-------------------------------------------------------
--Define workflow constraint level system attributes
-------------------------------------------------------
insert dbo.ETLBatchConstraintAttribute
(BatchID,ConstId,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';

--user attributes
set @sql = '';
select @sql += ',(@batchId,' + cast(bca.ConstId as nvarchar(10)) + ',''' + bca.attributeName + ''',''' + replace(bca.attributeValue,'''','''''') + ''')
'
from dbo.ETLBatchConstraintAttribute bca
where bca.batchId = @batchId
and  bca.AttributeName not in ('DISABLED','PING')
order by bca.constId;


set @Script += '

-------------------------------------------------------
--Define workflow constraint level user attributes
-------------------------------------------------------
insert dbo.ETLBatchConstraintAttribute
(BatchID,ConstId,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';

end
end

--steps
set @Script += '

-------------------------------------------------------
--create workflow steps
-------------------------------------------------------
declare @stepId int;
';

declare step_cur cursor local fast_forward
for select StepId from dbo.ETLStep
where BatchId = @BatchId;

declare @stepId int = 0;
open step_cur
while (1=1)
begin

fetch next from step_cur into @stepId;
if (@@FETCH_STATUS <> 0) break;

select @sql = '(@batchId,@stepId,'
		 + '''' + StepName + '''' + ','
		 + isnull('''' + StepDesc + '''','null') + ','
		 + cast(StepProcId as nvarchar(10)) + ','
		 + isnull(cast(OnSuccessID as nvarchar(10)),'null') + ','
		 + isnull(cast(OnFailureID as nvarchar(10)),'null') + ','
		 + isnull(cast(IgnoreErr as nvarchar(10)),'0') + ','
		 + isnull('''' + StepOrder + '''','null') + ')
'
from dbo.ETLStep where batchId = @batchId and stepId = @stepId;

set @Script += '

-------------------------------------------------------
--step: ' + cast(@stepId as nvarchar(10)) + '
-------------------------------------------------------
set @stepId = ' + cast(@stepId as nvarchar(10)) + ';
--set identity_insert dbo.ETLStep on;
insert dbo.ETLStep
(BatchID,StepID,StepName,StepDesc,StepProcID,OnSuccessID,OnFailureID,IgnoreErr,StepOrder)
values
 ' + @sql + ';
--set identity_insert dbo.ETLStep off;
';

--step attributes
--system attributes
set @sql = '';
select @sql += ',(@batchId,@stepId,''' + sa.attributeName + ''',''' + replace(sa.attributeValue,'''','''''') + ''')
'
from dbo.ETLStepAttribute sa
where sa.batchId = @batchId and sa.stepId = @stepId
and  sa.AttributeName in ('DISABLED','SEQGROUP','PRIGROUP','RETRY','DELAY','RESTART','LOOPGROUP');

if (len(@sql) > 0)
set @Script += '
-------------------------------------------------------
--Define workflow step level system attributes
--those attributes can be referenced in wf body like <etl:Disabled> etc.
-------------------------------------------------------
insert dbo.ETLStepAttribute
(BatchID,StepId,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';


--user attributes
set @sql = '';
select @sql += ',(@batchId,@stepId,''' + sa.attributeName + ''',''' + replace(sa.attributeValue,'''','''''') + ''')
'
from dbo.ETLStepAttribute sa
where sa.batchId = @batchId and sa.stepId = @stepId
and  sa.AttributeName not in ('DISABLED','SEQGROUP','PRIGROUP','RETRY','DELAY','RESTART','LOOPGROUP');

if (len(@sql) > 0)
set @Script += '
-------------------------------------------------------
--Define workflow step level user attributes
-------------------------------------------------------
insert dbo.ETLStepAttribute
(BatchID,StepId,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';


if exists (select 1 from dbo.ETLStepConstraint where batchId = @batchId and stepId = @stepId)
begin

set @Script += '
-------------------------------------------------------
--create step level constraints
-------------------------------------------------------

'
set @sql = '';
select @sql += ',(@batchId,@stepId,'
		 + cast(constId as nvarchar(10)) + ','
		 + isnull(cast(ProcessId as nvarchar(10)),'null') + ','
		 + isnull('''' + ConstOrder + '''','null') + ','
		 + isnull(cast(WaitPeriod as nvarchar(10)),'0') + ')'
from dbo.ETLStepConstraint where batchId = @batchId and stepId = @stepId
order by ConstId;


if (len(@sql) > 0)
set @Script += '
--set identity_insert dbo.ETLStepConstraint on
insert dbo.ETLStepConstraint
(BatchID,StepID,ConstID,,ProcessID,ConstOrder,WaitPeriod)
values
' + right(@sql,len(@sql) - 1) + ';
--set identity_insert dbo.ETLStepConstraint off;
';

--system attributes
set @sql = '';
select @sql += ',(@batchId,@stepId,' + cast(sca.ConstId as nvarchar(10)) + ',''' + sca.attributeName + ''',''' + replace(sca.attributeValue,'''','''''') + ''')
'
from dbo.ETLStepConstraintAttribute sca
where sca.batchId = @batchId and sca.stepId = @stepId
and  sca.AttributeName in ('DISABLED','PING')
order by sca.constId;

if (len(@sql) > 0)
begin
set @Script += '
-------------------------------------------------------
--Define workflow step constraint level system attributes
-------------------------------------------------------
insert dbo.ETLStepConstraintAttribute
(BatchID,StepID,ConstId,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';

--user attributes
set @sql = '';
select @sql += ',(@batchId,@stepId,' + cast(sca.ConstId as nvarchar(10)) + ',''' + sca.attributeName + ''',''' + replace(sca.attributeValue,'''','''''') + ''')
'
from dbo.ETLStepConstraintAttribute sca
where sca.batchId = @batchId
and  sca.AttributeName not in ('DISABLED','PING')
order by sca.constId;

set @Script += '

-------------------------------------------------------
--Define workflow step constraint level user attributes
-------------------------------------------------------
insert dbo.ETLStepConstraintAttribute
(BatchID,StepID,ConstId,AttributeName,AttributeValue)
values
 ' + right(@sql,len(@sql) - 1) + ';';

end
end

end
deallocate step_cur;

set @Script += '

end try
begin catch
   declare @msg nvarchar(1000)
   set @msg = ''ERRROR: set metadata failed with message: '' + error_message();
   throw 50001, @msg, 1;
end catch
'
;

--print substring (@Script,1,4000)
--print substring (@Script,4001,8000)
--print substring (@Script,8001,12000)
--print substring (@Script,12001,16000)

end try
begin catch
   set @msg = 'Failed to script etadata: ' + error_message();
   throw 50001, @msg, 1;
end catch
GO
PRINT N'Altering [dbo].[prc_PersistContext]...';


GO
/*

declare @Header xml
declare @pContext xml
declare @pProcessRequest xml
declare @pAttributes xml
exec dbo.prc_CreateHeader @Header out,-20,null,null,4,15
exec dbo.prc_CreateContext @pContext out,@Header
--exec dbo.prc_CreateProcessRequest @pProcessRequest out,@Header,@pContext
--select @pProcessRequest
--exec dbo.prc_ReadContextAttributes @pProcessRequest,@pAttributes out
--select @pAttributes
select @pContext
exec prc_PersistContext @pContext,'debug,replace'
exec dbo.prc_CreateContext @pContext out,@Header
select @pContext
rollback tran
*/
ALTER PROCEDURE dbo.prc_PersistContext
    @pContext xml([ETLController])
   ,@pHandle uniqueidentifier = null 
   ,@pOptions nvarchar(100) = null
As
/******************************************************************
**D File:         prc_PersistContext.SQL
**
**D Desc:         create persist context into ETLBatch tables
**
** @Options       debug,replace
** @pHandle       conversation handle to communicate messages back to main thread

**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
01/12/2008           Praveen			Added Retry and Delay 83349
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)
DECLARE @trancount int

DECLARE @BatchID int
DECLARE @StepID int
DECLARE @ConstID int
DECLARE @RunID int
DECLARE @Options int
DECLARE @debug tinyint
DECLARE @replace tinyint
DECLARE @Handle uniqueidentifier
DECLARE @BatchName nvarchar(30)

declare @Name nvarchar(100)
declare @Value1 nvarchar(max)
declare @Value2 nvarchar(max)
declare @nValue nvarchar(max)

DECLARE @Header xml(ETLController)
DECLARE @Context xml(ETLController)
DECLARE @ProcessInfo xml(ETLController)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0
SET @trancount = @@trancount


begin try
set @debug = case when charindex('debug',@pOptions) > 0 then 1 else 0 end
set @replace = case when charindex('replace',@pOptions) > 0 then 1 else 0 end

;with xmlnamespaces('ETLController.XSD' as etl)
select @BatchID = @pContext.value('(/etl:Context/@BatchID)[1]','int')
      ,@BatchName = @pContext.value('(/etl:Context/@BatchName)[1]','nvarchar(30)')

exec [prc_CreateHeader] @Header out,@BatchID,null,null,0,@debug,15
if (@debug = 1)
begin
   SET @msg =  'BEGIN Procedure ' + @ProcName + ' for BatchName=' + isnull(@BatchName,'NULL')
            + ' (' + isnull(cast(@BatchID as nvarchar(10)),'NULL') + ')'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end


if exists (select 1 from dbo.[ETLBatch] where BatchName = @BatchName and BatchID <> @BatchID)
BEGIN
   SET @Err = 50101
   SET @msg = '   ERROR pContext: BatchName=' + @BatchName + ' already exists with different BatchID'
   RAISERROR(@msg,11,11) 
END

--b shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cb.b.value('(./@BatchName)[1]','nvarchar(30)') as BatchName
      ,cb.b.value('(./@BatchDesc)[1]','nvarchar(500)') as BatchDesc
      ,cb.b.value('(./etl:OnSuccess/@ProcessID)[1]','int') as OnSuccessID
      ,cb.b.value('(./etl:OnFailure/@ProcessID)[1]','int') as OnFailureID
      ,cb.b.value('(./@IgnoreErr)[1]','tinyint') as IgnoreErr
      ,cb.b.value('(./@Restart)[1]','tinyint') as RestartOnErr
      ,cb.b.value('(./@MaxThread)[1]','tinyint') as MaxThread
      ,cb.b.value('(./@Timeout)[1]','int') as [Timeout]
      ,cb.b.value('(./@Lifetime)[1]','int') as Lifetime
      ,cb.b.value('(./@Ping)[1]','tinyint') as Ping
      ,cb.b.value('(./@HistRet)[1]','int') as HistRet
      ,cb.b.value('(./@Retry)[1]','int') as Retry
      ,cb.b.value('(./@Delay)[1]','int') as [Delay]
  into #b
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--ba shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cba.ba.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,cba.ba.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #ba
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Attributes/etl:Attribute') cba(ba)
  union select BatchID,'MAXTHREAD',cast(MaxThread as nvarchar(1000)) from #b where MaxThread is not null
  union select BatchID,'TIMEOUT',cast([Timeout] as nvarchar(1000)) from #b where [Timeout] is not null
  union select BatchID,'LIFETIME',cast(Lifetime as nvarchar(1000)) from #b where Lifetime is not null
  union select BatchID,'PING',cast(Ping as nvarchar(1000)) from #b where Ping is not null
  union select BatchID,'HISTRET',cast(HistRet as nvarchar(1000)) from #b where HistRet is not null
  union select BatchID,'RETRY',cast(Retry as nvarchar(1000)) from #b where Retry is not null
  union select BatchID,'DELAY',cast([Delay] as nvarchar(1000)) from #b where [Delay] is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding BA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end


;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cbc.bc.value('(./@ConstID)[1]','int') as ConstID
      ,cbc.bc.value('(./etl:Process/@ProcessID)[1]','int') as ProcessID
      ,cbc.bc.value('(./@ConstOrder)[1]','nvarchar(10)') as ConstOrder
      ,cbc.bc.value('(./@WaitPeriod)[1]','int') as WaitPeriod
      ,cbc.bc.value('(./@Disabled)[1]','tinyint') as [Disabled]
      ,cbc.bc.value('(./@Ping)[1]','int') as Ping
  into #bc
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Constraints/etl:Constraint') cbc(bc)
set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding BC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cbc.bc.value('(./@ConstID)[1]','int') as ConstID
      ,cbca.bca.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,cbca.bca.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #bca
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Constraints/etl:Constraint') cbc(bc)
  cross apply cbc.bc.nodes('./etl:Attributes/etl:Attribute') cbca(bca)
  union select BatchID,ConstID,'DISABLED',cast([Disabled] as nvarchar(1000)) from #bc where [Disabled] is not null
  union select BatchID,ConstID,'PING',cast(Ping as nvarchar(1000)) from #bc where Ping is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding BCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--s shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,cs.s.value('(./@StepName)[1]','nvarchar(100)') as StepName
      ,cs.s.value('(./@StepDesc)[1]','nvarchar(500)') as StepDesc
      ,cs.s.value('(./etl:Process/@ProcessID)[1]','int') as StepProcID
      ,cs.s.value('(./etl:OnSuccess/@ProcessID)[1]','int') as OnSuccessID
      ,cs.s.value('(./etl:OnFailure/@ProcessID)[1]','int') as OnFailureID
      ,cs.s.value('(./@IgnoreErr)[1]','tinyint') as IgnoreErr
      ,cs.s.value('(./@Restart)[1]','tinyint') as RestartOnErr
      ,cs.s.value('(./@StepOrder)[1]','nvarchar(10)') as StepOrder
      ,cs.s.value('(./@Disabled)[1]','tinyint') as [Disabled]
      ,cs.s.value('(./@SeqGroup)[1]','int') as SeqGroup
      ,cs.s.value('(./@PriGroup)[1]','int') as PriGroup
      ,cs.s.value('(./@Retry)[1]','int') as Retry
      ,cs.s.value('(./@Delay)[1]','int') as [Delay]
  into #s
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding S:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sa shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,csa.sa.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,csa.sa.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #sa
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)
  cross apply cs.s.nodes('./etl:Attributes/etl:Attribute') csa(sa)
  union select BatchID,StepID,'DISABLED',cast([Disabled] as nvarchar(1000)) from #s where [Disabled] is not null
  union select BatchID,StepID,'SEQGROUP',cast(SeqGroup as nvarchar(1000)) from #s where SeqGroup is not null
  union select BatchID,StepID,'PRIGROUP',cast(PriGroup as nvarchar(1000)) from #s where PriGroup is not null
  union select BatchID,StepID,'RETRY',cast(Retry as nvarchar(1000)) from #s where Retry is not null
  union select BatchID,StepID,'DELAY',cast([Delay] as nvarchar(1000)) from #s where [Delay] is not null
  union select BatchID,StepID,'RESTART',cast(RestartOnErr as nvarchar(1000)) from #s where RestartOnErr is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding SA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sc shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,csc.sc.value('(./@ConstID)[1]','int') as ConstID
      ,csc.sc.value('(./etl:Process/@ProcessID)[1]','int') as ProcessID
      ,csc.sc.value('(./@ConstOrder)[1]','nvarchar(10)') as ConstOrder
      ,csc.sc.value('(./@WaitPeriod)[1]','int') as WaitPeriod
      ,csc.sc.value('(./@Disabled)[1]','tinyint') as [Disabled]
      ,csc.sc.value('(./@Ping)[1]','int') as Ping
  into #sc
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)
  cross apply cs.s.nodes('./etl:Constraints/etl:Constraint') csc(sc)

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding SC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sca shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,csc.sc.value('(./@ConstID)[1]','int') as ConstID
      ,csca.sca.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,csca.sca.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #sca
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)
  cross apply cs.s.nodes('./etl:Constraints/etl:Constraint') csc(sc)
  cross apply csc.sc.nodes('./etl:Attributes/etl:Attribute') csca(sca)
  union select BatchID,ConstID,ConstID,'DISABLED',cast([Disabled] as nvarchar(1000)) from #sc where [Disabled] is not null
  union select BatchID,ConstID,ConstID,'PING',cast(Ping as nvarchar(1000)) from #sc where Ping is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding SCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

BEGIN TRAN

if (@Replace = 1)
begin

   exec @ProcErr = dbo.[prc_RemoveContext] @BatchName,@pHandle,@pOptions

   if (@debug = 1)
   begin
      SET @msg =  'Deleted all old records (Replace=1)...'
      exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
      exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
   end

end

--b persist
update d
   set
       d.BatchName = t.BatchName
      ,d.BatchDesc = t.BatchDesc
      ,d.OnSuccessID = t.OnSuccessID
      ,d.OnFailureID = t.OnFailureID
      ,d.IgnoreErr = t.IgnoreErr
      ,d.RestartOnErr = t.RestartOnErr
  from dbo.[ETLBatch] d
  join #b t on d.BatchID = t.BatchID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--set identity_insert dbo.[ETLBatch] on
insert dbo.[ETLBatch]
    (BatchID,BatchName,BatchDesc,OnSuccessID,OnFailureID,IgnoreErr,RestartOnErr)
select
       t.BatchID
      ,t.BatchName
      ,t.BatchDesc
      ,t.OnSuccessID
      ,t.OnFailureID
      ,t.IgnoreErr
      ,t.RestartOnErr
  from #b t
  left join dbo.[ETLBatch] d on t.BatchID = d.BatchID
 where d.BatchID is null
set @cnt = @@ROWCOUNT
--set identity_insert dbo.[ETLBatch] off

if (@debug = 1)
begin
   SET @msg =  'Inserted B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--ba persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLBatchAttribute] d
  join #ba t on d.BatchID = t.BatchID and d.AttributeName = t.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated BA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLBatchAttribute]
    (BatchID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.AttributeName
      ,t.AttributeValue
  from #ba t
  left join dbo.[ETLBatchAttribute] d on t.BatchID = d.BatchID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--bc persist
update d
   set
       d.ProcessID = t.ProcessID
      ,d.ConstOrder = t.ConstOrder
      ,d.WaitPeriod = t.WaitPeriod
  from dbo.[ETLBatchConstraint] d
  join #bc t on d.BatchID = t.BatchID and d.ConstID = t.ConstID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated BC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--set identity_insert dbo.[ETLBatchConstraint] on
insert dbo.[ETLBatchConstraint]
    (BatchID,ConstID,ProcessID,ConstOrder,WaitPeriod)
select
       t.BatchID
      ,t.ConstID
      ,t.ProcessID
      ,t.ConstOrder
      ,t.WaitPeriod
  from #bc t
  left join dbo.[ETLBatchConstraint] d on t.BatchID = d.BatchID and d.ConstID = t.ConstID
 where d.BatchID is null
set @cnt = @@ROWCOUNT
--set identity_insert dbo.[ETLBatchConstraint] off

if (@debug = 1)
begin
   SET @msg =  'Inserted BC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--bca persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLBatchConstraintAttribute] d
  join #bca t on t.BatchID = d.BatchID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated BCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLBatchConstraintAttribute]
    (BatchID,ConstID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.ConstID
      ,t.AttributeName
      ,t.AttributeValue
  from #bca t
  left join dbo.[ETLBatchConstraintAttribute] d on t.BatchID = d.BatchID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted BCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--s persist
update d
   set
       d.StepName = t.StepName
      ,d.StepDesc = t.StepDesc
      ,d.StepProcID = t.StepProcID
      ,d.OnSuccessID = t.OnSuccessID
      ,d.OnFailureID = t.OnFailureID
      ,d.IgnoreErr = t.IgnoreErr
      ,d.StepOrder = t.StepOrder
  from dbo.[ETLStep] d
  join #s t on d.BatchID = t.BatchID and t.StepID = d.StepID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated S:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--set identity_insert dbo.[ETLStep] on
insert dbo.[ETLStep]
    (BatchID,StepID,StepName,StepDesc,StepProcID,OnSuccessID,OnFailureID,IgnoreErr,StepOrder)
select
       t.BatchID
      ,t.StepID
      ,t.StepName
      ,t.StepDesc
      ,t.StepProcID
      ,t.OnSuccessID
      ,t.OnFailureID
      ,t.IgnoreErr
      ,t.StepOrder
  from #s t
  left join dbo.[ETLStep] d on t.BatchID = d.BatchID
 where d.BatchID is null

set @cnt = @@ROWCOUNT
--set identity_insert dbo.[ETLStep] off

if (@debug = 1)
begin
   SET @msg =  'Inserted S:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sa persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLStepAttribute] d
  join #sa t on d.BatchID = t.BatchID and d.StepID = t.StepID and d.AttributeName = t.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated SA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLStepAttribute]
    (BatchID,StepID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.StepID
      ,t.AttributeName
      ,t.AttributeValue
  from #sa t
  left join dbo.[ETLStepAttribute] d on t.BatchID = d.BatchID and d.StepID = t.StepID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted SA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sc persist
update d
   set
       d.ProcessID = t.ProcessID
      ,d.ConstOrder = t.ConstOrder
      ,d.WaitPeriod = t.WaitPeriod
  from dbo.[ETLStepConstraint] d
  join #sc t on d.BatchID = t.BatchID and d.StepID = t.StepID and d.ConstID = t.ConstID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated SC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--set identity_insert dbo.[ETLStepConstraint] on
insert dbo.[ETLStepConstraint]
    (BatchID,StepID,ConstID,ProcessID,ConstOrder,WaitPeriod)
select
       t.BatchID
      ,t.StepID
      ,t.ConstID
      ,t.ProcessID
      ,t.ConstOrder
      ,t.WaitPeriod
  from #sc t
  left join dbo.[ETLStepConstraint] d on t.BatchID = d.BatchID and d.StepID = t.StepID and d.ConstID = t.ConstID
 where d.BatchID is null

set @cnt = @@ROWCOUNT
--set identity_insert dbo.[ETLStepConstraint] off

if (@debug = 1)
begin
   SET @msg =  'Inserted SC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sca persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLStepConstraintAttribute] d
  join #sca t on t.BatchID = d.BatchID and d.StepID = t.StepID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated SCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLStepConstraintAttribute]
    (BatchID,StepID,ConstID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.StepID
      ,t.ConstID
      ,t.AttributeName
      ,t.AttributeValue
  from #sca t
  left join dbo.[ETLStepConstraintAttribute] d on t.BatchID = d.BatchID and d.StepID = t.StepID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted CSA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

COMMIT TRAN

IF (@debug = 1)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
END

end try
begin catch
   if @Trancount < @@trancount
      ROLLBACK TRAN

   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Refreshing [dbo].[prc_CreateContext]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[prc_CreateContext]';


GO
PRINT N'Refreshing [dbo].[prc_ETLAttributeSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[prc_ETLAttributeSet]';


GO
PRINT N'Refreshing [dbo].[prc_RemoveContext]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[prc_RemoveContext]';


GO
PRINT N'Refreshing [dbo].[prc_AttributeSet]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[prc_AttributeSet]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

--Environment script
--select * from dbo.systemparameters
--select dbo.fn_systemparameter('Environment','BuildLocation','DEV')
begin try
-------------------------------------------------------------------
-- CURRENT ENV
-------------------------------------------------------------------
exec prc_SystemParameterLet
	@ParameterType = 'Environment'
	,@ParameterName = 'Current'
	,@ParameterValue = 'DEV'
	,@ParameterDefault = ''
	,@ParameterDesc = 'Current Environment'
	,@EffectiveImmediately = 1
	,@EnvironmentName = 'ALL';

-------------------------------------------------------------------
-- DEV
-------------------------------------------------------------------
exec prc_SystemParameterLet
	@ParameterType = 'Environment'
	,@ParameterName = 'BuildLocation'
	,@ParameterValue = 'c:\Builds'
	,@ParameterDefault = ''
	,@ParameterDesc = 'Build location'
	,@EffectiveImmediately = 1
	,@EnvironmentName = 'DEV';

exec prc_SystemParameterLet
	@ParameterType = 'Environment'
	,@ParameterName = 'DW'
	,@ParameterValue = 'DW'
	,@ParameterDefault = ''
	,@ParameterDesc = 'Datawarehouse'
	,@EffectiveImmediately = 1
	,@EnvironmentName = 'DEV';

exec prc_SystemParameterLet
	@ParameterType = 'Environment'
	,@ParameterName = 'Staging'
	,@ParameterValue = 'ETL_Staging'
	,@ParameterDefault = ''
	,@ParameterDesc = 'Staging DB'
	,@EffectiveImmediately = 1
	,@EnvironmentName = 'DEV';

exec prc_SystemParameterLet
	@ParameterType = 'Environment'
	,@ParameterName = 'DW_Server'
	,@ParameterValue = '.'
	,@ParameterDefault = ''
	,@ParameterDesc = 'DW Server'
	,@EffectiveImmediately = 1
	,@EnvironmentName = 'DEV';


--EventServer 
exec prc_SystemParameterLet 
	@ParameterType = 'Environment',
	@ParameterName = 'EventServer',
	@ParameterValue = '.',
	@ParameterDesc = 'Event Server ',
	@EffectiveImmediately = 1
	,@EnvironmentName = 'DEV';


--EventDB 
exec prc_SystemParameterLet 
	@ParameterType = 'Environment',
	@ParameterName = 'EventDB',
	@ParameterValue = 'ETL_Event', 
	@ParameterDesc = 'Event database',
	@EffectiveImmediately = 1
	,@EnvironmentName = 'DEV';

-------------------------------------------------------------------
-- TEST
-------------------------------------------------------------------
-------------------------------------------------------------------
-- UAT
-------------------------------------------------------------------
-------------------------------------------------------------------
-- PROD
-------------------------------------------------------------------

end try
begin catch
   declare @msg nvarchar(1000);
   set @msg = error_message();
   raiserror('ERRROR: set metadata failed with message: %s',11,11,@msg);
end catch

USE ETL_Controller
GO
delete etlprocess where ProcessId between 20 and 50;
if not exists (select 1 from etlprocess where ProcessId between 20 and 50)
begin
	--set identity_insert dbo.etlprocess on;
	insert etlprocess
	(ProcessId,Process,[Param],ScopeId)
	values
	(20,'DefaultActivities.DefaultActivities.SqlServerActivity','Timeout=>Timeout,etl:Timeout',3)
	,(21,'DefaultActivities.DefaultActivities.SqlServerExecuteScalarActivity','Timeout=>Timeout,etl:Timeout',3)
	,(22,'DefaultActivities.DefaultActivities.CheckFileActivity',null,12)
	,(23,'DefaultActivities.DefaultActivities.ConsoleActivity','Timeout=>Timeout,etl:Timeout',15)
	,(24,'DefaultActivities.DefaultActivities.DeltaExtractorActivity','ConnectionString=>Controller.ConnectionString',3)
	,(25,'DefaultActivities.DefaultActivities.WaitActivity','Timeout=>WaitTimeout',3)
	--this is OnSuccess/OnError substitute for #20,#23. For Example Query attribute is substituted with CleanUpQuery.
	,(26,'DefaultActivities.DefaultActivities.SqlServerActivity','Query=>CleanUpQuery;Timeout=>Timeout,etl:Timeout',3)
	,(27,'DefaultActivities.DefaultActivities.ConsoleActivity','Console=>CleanUpConsole;Arg=>CleanUpArg;Timeout=>Timeout,etl:Timeout',15)
	,(28,'DefaultActivities.DefaultActivities.TGZCompressActivity','Timeout=>Timeout,etl:Timeout',15)
	,(29,'DefaultActivities.DefaultActivities.TGZDecompressActivity','[{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"Mode","Default":"tgz"},{"Name":"OutputExt","Default":""}]',15)
	,(30,'DefaultActivities.DefaultActivities.BsonConverterActivity','Timeout=>Timeout,etl:Timeout',15)
	,(31,'DefaultActivities.DefaultActivities.FileRegisterActivity','Timeout=>Timeout,etl:Timeout',15)
	,(32,'DefaultActivities.DefaultActivities.FileGetProcessListActivity','Timeout=>Timeout,etl:Timeout',15)
	,(33,'DefaultActivities.DefaultActivities.FileSetProgressStatusActivity','FileStatus=>OnSuccessStatus,FileStatus;Timeout=>Timeout,etl:Timeout',15)
	,(34,'DefaultActivities.DefaultActivities.FileSetProgressStatusActivity','FileStatus=>OnFailureStatus,FileStatus;Timeout=>Timeout,etl:Timeout',15)
	,(35,'DefaultActivities.DefaultActivities.SqlServerActivity','Query=>OnSuccessQuery,Query;Timeout=>Timeout,etl:Timeout',15)
	,(36,'DefaultActivities.DefaultActivities.SqlServerActivity','Query=>OnFailureQuery,Query;Timeout=>Timeout,etl:Timeout',15)
	,(37,'DefaultActivities.DefaultActivities.BsonSqlLoaderActivity','Timeout=>Timeout,etl:Timeout',15)
	,(38,'DefaultActivities.DefaultActivities.AzureBlobDownloadActivity','[{"Name":"ConnectionString","Override":["Controller.ConnectionString"]},{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"SortOrder","Default":"None"},{"Name":"Count","Default":"1000"},{"Name":"CounterName","Default":""},{"Name":"isSasToken","Default":"false"}]',15)
	,(39,'DefaultActivities.DefaultActivities.FileListToCounterActivity','Timeout=>Timeout,etl:Timeout',15)
	,(40,'DefaultActivities.DefaultActivities.PostWorkflowEventActivity','[{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"EventArgs","Default":""},{"Name":"ConnectionString","Override":["Event.ConnectionString"]}]',15)
	,(41,'DefaultActivities.DefaultActivities.CheckWorkflowEventActivity','[{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"ConnectionString","Override":["Event.ConnectionString"]}]',12)
	,(42,'DefaultActivities.DefaultActivities.AzureTableCopyActivity','[{"Name":"ConnectionString","Override":["Controller.ConnectionString"]},{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"ControlColumn","Default":""},{"Name":"ControlValue","Default":""},{"Name":"isSasToken","Default":"false"}]',15)
	,(43,'DefaultActivities.DefaultActivities.TableControlToCounterActivity','[{"Name":"ConnectionString","Override":["Controller.ConnectionString"]},{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"CounterName","Default":"ControlValue"}]',15)
	,(44,'DefaultActivities.DefaultActivities.AzureFileDownloadActivity','[{"Name":"ConnectionString","Override":["Controller.ConnectionString"]},{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"SortOrder","Default":"None"},{"Name":"Count","Default":"0"},{"Name":"CounterName","Default":""},{"Name":"isSasToken","Default":"false"}]',15)
	,(45,'DefaultActivities.DefaultActivities.AwsS3DownloadActivity','[{"Name":"ConnectionString","Override":["Controller.ConnectionString"]},{"Name":"Timeout","Override":["Timeout","etl:Timeout"]},{"Name":"SortOrder","Default":"None"},{"Name":"Count","Default":"0"},{"Name":"CounterName","Default":""}]',15)



	--set identity_insert dbo.etlprocess off;
end

--:r .\Misc\PopulateLegacyImportProcess.sql
--:r .\Misc\ETLMonitorPermissions.sql
--:r .\Workflows\Test.sql
--:r .\Workflows\Call_BCP.sql
--:r .\Workflows\Call_Powershell.sql
--:r .\Workflows\Call_SP.sql
--:r .\Workflows\FileCheck.sql
--:r .\Workflows\IncrementalStaging.sql
--:r .\Workflows\MoveData_Excel.sql
--:r .\Workflows\MoveData_TableToFile.sql
--:r .\Workflows\MoveData_TableToTable.sql
--:r .\Workflows\Process1.sql
--:r .\Workflows\Process2.sql
--:r .\Workflows\QueryType_MDX.sql
--:r .\Workflows\SeqGroup.sql
--:r .\Workflows\Step_WaitConstraint_Met.sql
--:r .\Workflows\Loop.sql




GO

GO
