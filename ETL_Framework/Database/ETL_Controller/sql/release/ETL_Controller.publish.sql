/*
Deployment script for ETL_ControllerTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar ETL_ControllerCommon "ETL_ControllerCommon"
:setvar ETL_ControllerNode "ETL_ControllerNode"
:setvar DatabaseName "ETL_ControllerTest"
:setvar DefaultFilePrefix "ETL_ControllerTest"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQL14\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.SQL14\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [master];


GO

IF (DB_ID(N'$(DatabaseName)') IS NOT NULL) 
BEGIN
    ALTER DATABASE [$(DatabaseName)]
    SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
    DROP DATABASE [$(DatabaseName)];
END

GO
PRINT N'Creating $(DatabaseName)...'
GO
CREATE DATABASE [$(DatabaseName)]
    ON 
    PRIMARY(NAME = [$(DatabaseName)], FILENAME = N'$(DefaultDataPath)$(DefaultFilePrefix)_Primary.mdf')
    LOG ON (NAME = [$(DatabaseName)_log], FILENAME = N'$(DefaultLogPath)$(DefaultFilePrefix)_Primary.ldf') COLLATE SQL_Latin1_General_CP1_CI_AS
GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING OFF,
                ANSI_WARNINGS OFF,
                ARITHABORT OFF,
                CONCAT_NULL_YIELDS_NULL OFF,
                NUMERIC_ROUNDABORT OFF,
                QUOTED_IDENTIFIER OFF,
                ANSI_NULL_DEFAULT OFF,
                CURSOR_DEFAULT GLOBAL,
                RECOVERY SIMPLE,
                CURSOR_CLOSE_ON_COMMIT OFF,
                AUTO_CREATE_STATISTICS ON,
                AUTO_SHRINK OFF,
                AUTO_UPDATE_STATISTICS ON,
                RECURSIVE_TRIGGERS OFF 
            WITH ROLLBACK IMMEDIATE;
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CLOSE OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ALLOW_SNAPSHOT_ISOLATION OFF;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET READ_COMMITTED_SNAPSHOT OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_UPDATE_STATISTICS_ASYNC OFF,
                PAGE_VERIFY CHECKSUM,
                DATE_CORRELATION_OPTIMIZATION OFF,
                ENABLE_BROKER,
                PARAMETERIZATION SIMPLE,
                SUPPLEMENTAL_LOGGING OFF 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET TRUSTWORTHY ON,
        DB_CHAINING OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
IF IS_SRVROLEMEMBER(N'sysadmin') = 1
    BEGIN
        IF EXISTS (SELECT 1
                   FROM   [master].[dbo].[sysdatabases]
                   WHERE  [name] = N'$(DatabaseName)')
            BEGIN
                EXECUTE sp_executesql N'ALTER DATABASE [$(DatabaseName)]
    SET HONOR_BROKER_PRIORITY OFF 
    WITH ROLLBACK IMMEDIATE';
            END
    END
ELSE
    BEGIN
        PRINT N'The database settings cannot be modified. You must be a SysAdmin to apply these settings.';
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET FILESTREAM(NON_TRANSACTED_ACCESS = OFF),
                CONTAINMENT = NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET AUTO_CREATE_STATISTICS ON(INCREMENTAL = OFF),
                MEMORY_OPTIMIZED_ELEVATE_TO_SNAPSHOT = OFF,
                DELAYED_DURABILITY = DISABLED 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
IF fulltextserviceproperty(N'IsFulltextInstalled') = 1
    EXECUTE sp_fulltext_database 'disable';


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Creating [ControllerClrExtensions]...';


GO
CREATE ASSEMBLY [ControllerClrExtensions]
    AUTHORIZATION [dbo]
    FROM 
    WITH PERMISSION_SET = UNSAFE;


GO
PRINT N'Creating [DeSqlClr]...';


GO
CREATE ASSEMBLY [DeSqlClr]
    AUTHORIZATION [dbo]
    FROM 
    WITH PERMISSION_SET = UNSAFE;


GO
PRINT N'Creating [dbo].[ETLController]...';


GO
CREATE XML SCHEMA COLLECTION [dbo].[ETLController]
    AS N'<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:t="ETLController.XSD" targetNamespace="ETLController.XSD" elementFormDefault="qualified">
  <xsd:element name="Attributes" type="t:Attributes" />
  <xsd:element name="Context" type="t:Context" />
  <xsd:element name="Counters">
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="xsd:anyType">
          <xsd:sequence>
            <xsd:element name="Counter" minOccurs="0" maxOccurs="unbounded">
              <xsd:complexType>
                <xsd:simpleContent>
                  <xsd:extension base="xsd:string">
                    <xsd:attribute name="Name" type="xsd:string" use="required" />
                    <xsd:attribute name="RunID" type="xsd:int" use="required" />
                  </xsd:extension>
                </xsd:simpleContent>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
          <xsd:attribute name="BatchID" type="xsd:int" use="required" />
          <xsd:attribute name="StepID" type="xsd:int" />
          <xsd:attribute name="ConstID" type="xsd:int" />
          <xsd:attribute name="RunID" type="xsd:int" use="required" />
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="Header" type="t:Header" />
  <xsd:element name="ProcessInfo">
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="xsd:anyType">
          <xsd:sequence>
            <xsd:element name="Header" type="t:Header" />
            <xsd:element name="Message">
              <xsd:complexType>
                <xsd:simpleContent>
                  <xsd:extension base="xsd:string">
                    <xsd:attribute name="Error" type="xsd:int" />
                  </xsd:extension>
                </xsd:simpleContent>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
          <xsd:attribute name="Error" type="xsd:int" />
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ProcessReceipt">
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="xsd:anyType">
          <xsd:sequence>
            <xsd:element name="Header" type="t:Header" />
            <xsd:element name="Status">
              <xsd:complexType>
                <xsd:complexContent>
                  <xsd:restriction base="xsd:anyType">
                    <xsd:sequence>
                      <xsd:element name="msg" type="xsd:string" minOccurs="0" />
                    </xsd:sequence>
                    <xsd:attribute name="StatusID" type="xsd:int" use="required" />
                    <xsd:attribute name="Error" type="xsd:int" use="required" />
                  </xsd:restriction>
                </xsd:complexContent>
              </xsd:complexType>
            </xsd:element>
          </xsd:sequence>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:element name="ProcessRequest">
    <xsd:complexType>
      <xsd:complexContent>
        <xsd:restriction base="xsd:anyType">
          <xsd:sequence>
            <xsd:element name="Header" type="t:Header" />
            <xsd:element name="SrcConversation" type="xsd:string" minOccurs="0" />
            <xsd:element name="SrcConversationGrp" type="xsd:string" minOccurs="0" />
            <xsd:element name="DstConversation" type="xsd:string" minOccurs="0" />
            <xsd:element name="DstConversationGrp" type="xsd:string" minOccurs="0" />
            <xsd:element name="Context" type="t:Context" minOccurs="0" />
          </xsd:sequence>
        </xsd:restriction>
      </xsd:complexContent>
    </xsd:complexType>
  </xsd:element>
  <xsd:complexType name="Attributes">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="Attribute" minOccurs="0" maxOccurs="unbounded">
            <xsd:complexType>
              <xsd:simpleContent>
                <xsd:extension base="xsd:string">
                  <xsd:attribute name="Name" type="xsd:string" use="required" />
                </xsd:extension>
              </xsd:simpleContent>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Constraints">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="Constraint" minOccurs="0" maxOccurs="unbounded">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:restriction base="xsd:anyType">
                  <xsd:sequence>
                    <xsd:element name="Process" type="t:Process" />
                    <xsd:element name="Attributes" type="t:Attributes" minOccurs="0" maxOccurs="unbounded" />
                  </xsd:sequence>
                  <xsd:attribute name="ConstID" type="xsd:int" use="required" />
                  <xsd:attribute name="ConstOrder" type="xsd:string" />
                  <xsd:attribute name="WaitPeriod" type="xsd:int" />
                  <xsd:attribute name="Disabled" type="xsd:int" />
                  <xsd:attribute name="Ping" type="xsd:int" />
                </xsd:restriction>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Context">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="OnSuccess" type="t:Process" minOccurs="0" />
          <xsd:element name="OnFailure" type="t:Process" minOccurs="0" />
          <xsd:element name="Attributes" type="t:Attributes" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="Constraints" type="t:Constraints" minOccurs="0" maxOccurs="unbounded" />
          <xsd:element name="Steps" minOccurs="0">
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:restriction base="xsd:anyType">
                  <xsd:sequence>
                    <xsd:element name="Step" minOccurs="0" maxOccurs="unbounded">
                      <xsd:complexType>
                        <xsd:complexContent>
                          <xsd:restriction base="xsd:anyType">
                            <xsd:sequence>
                              <xsd:element name="Process" type="t:Process" />
                              <xsd:element name="OnSuccess" type="t:Process" minOccurs="0" />
                              <xsd:element name="OnFailure" type="t:Process" minOccurs="0" />
                              <xsd:element name="Attributes" type="t:Attributes" minOccurs="0" maxOccurs="unbounded" />
                              <xsd:element name="Constraints" type="t:Constraints" minOccurs="0" maxOccurs="unbounded" />
                            </xsd:sequence>
                            <xsd:attribute name="StepID" type="xsd:int" use="required" />
                            <xsd:attribute name="StepName" type="xsd:string" />
                            <xsd:attribute name="StepDesc" type="xsd:string" />
                            <xsd:attribute name="StepOrder" type="xsd:string" />
                            <xsd:attribute name="IgnoreErr" type="xsd:int" />
                            <xsd:attribute name="Restart" type="xsd:int" />
                            <xsd:attribute name="Disabled" type="xsd:int" />
                            <xsd:attribute name="SeqGroup" type="xsd:string" />
                            <xsd:attribute name="PriGroup" type="xsd:string" />
                            <xsd:attribute name="Retry" type="xsd:int" />
                            <xsd:attribute name="Delay" type="xsd:int" />
                            <xsd:attribute name="LoopGroup" type="xsd:string" />
                          </xsd:restriction>
                        </xsd:complexContent>
                      </xsd:complexType>
                    </xsd:element>
                  </xsd:sequence>
                </xsd:restriction>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
        </xsd:sequence>
        <xsd:attribute name="BatchID" type="xsd:int" use="required" />
        <xsd:attribute name="BatchName" type="xsd:string" />
        <xsd:attribute name="BatchDesc" type="xsd:string" />
        <xsd:attribute name="IgnoreErr" type="xsd:int" />
        <xsd:attribute name="Restart" type="xsd:int" />
        <xsd:attribute name="Disabled" type="xsd:int" />
        <xsd:attribute name="MaxThread" type="xsd:int" />
        <xsd:attribute name="Timeout" type="xsd:int" />
        <xsd:attribute name="Lifetime" type="xsd:int" />
        <xsd:attribute name="Ping" type="xsd:int" />
        <xsd:attribute name="HistRet" type="xsd:int" />
        <xsd:attribute name="Retry" type="xsd:int" />
        <xsd:attribute name="Delay" type="xsd:int" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Header">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence />
        <xsd:attribute name="BatchID" type="xsd:int" use="required" />
        <xsd:attribute name="StepID" type="xsd:int" />
        <xsd:attribute name="ConstID" type="xsd:int" />
        <xsd:attribute name="RunID" type="xsd:int" use="required" />
        <xsd:attribute name="Options" type="xsd:int" />
        <xsd:attribute name="Scope" type="xsd:int" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="Process">
    <xsd:complexContent>
      <xsd:restriction base="xsd:anyType">
        <xsd:sequence>
          <xsd:element name="Process" type="xsd:string" minOccurs="0" />
          <xsd:element name="Param" type="xsd:string" minOccurs="0" />
        </xsd:sequence>
        <xsd:attribute name="ProcessID" type="xsd:int" use="required" />
        <xsd:attribute name="ScopeID" type="xsd:int" />
      </xsd:restriction>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>';


GO
PRINT N'Creating [dbo].[Dsv]...';


GO
CREATE TABLE [dbo].[Dsv] (
    [DsvID]   INT           IDENTITY (1, 1) NOT NULL,
    [DsvName] NVARCHAR (30) NOT NULL,
    [DsvType] TINYINT       NOT NULL,
    [FromDT]  DATETIME      NOT NULL,
    [ToDT]    DATETIME      NOT NULL,
    [Dsv]     XML           NOT NULL,
    CONSTRAINT [PK_Dsv] PRIMARY KEY CLUSTERED ([DsvID] ASC),
    CONSTRAINT [UQ_Dsv01] UNIQUE NONCLUSTERED ([DsvName] ASC, [DsvType] ASC) ON [PRIMARY]
);


GO
PRINT N'Creating [dbo].[ETLBatch]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLBatch] (
    [BatchID]      INT           IDENTITY (1, 1) NOT NULL,
    [BatchName]    VARCHAR (30)  NOT NULL,
    [BatchDesc]    VARCHAR (500) NULL,
    [OnSuccessID]  INT           NULL,
    [OnFailureID]  INT           NULL,
    [IgnoreErr]    TINYINT       NULL,
    [RestartOnErr] TINYINT       NULL,
    [StatusDT]     DATETIME      NULL,
    [StatusID]     TINYINT       NULL,
    [Err]          INT           NULL,
    [EndTime]      DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC),
    UNIQUE NONCLUSTERED ([BatchName] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLBatchAttribute]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLBatchAttribute] (
    [BatchID]        INT            NOT NULL,
    [AttributeName]  VARCHAR (100)  NOT NULL,
    [AttributeValue] VARCHAR (8000) NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [AttributeName] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLBatchConstraint]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLBatchConstraint] (
    [ConstID]    INT          IDENTITY (1, 1) NOT NULL,
    [BatchID]    INT          NOT NULL,
    [ProcessID]  INT          NOT NULL,
    [ConstOrder] VARCHAR (10) NULL,
    [WaitPeriod] INT          NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [ConstID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLBatchConstraintAttribute]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLBatchConstraintAttribute] (
    [BatchID]        INT            NOT NULL,
    [ConstID]        INT            NOT NULL,
    [AttributeName]  VARCHAR (100)  NOT NULL,
    [AttributeValue] VARCHAR (8000) NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [ConstID] ASC, [AttributeName] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLBatchRun]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLBatchRun] (
    [RunID]      INT           IDENTITY (1, 1) NOT NULL,
    [BatchID]    INT           NOT NULL,
    [StatusDT]   DATETIME      NULL,
    [StatusID]   TINYINT       NULL,
    [Err]        INT           NULL,
    [StartTime]  DATETIME      NULL,
    [EndTime]    DATETIME      NULL,
    [ModifiedBY] NVARCHAR (30) NOT NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC),
    UNIQUE NONCLUSTERED ([BatchID] ASC, [RunID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLProcess]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLProcess] (
    [ProcessID] INT       IDENTITY (1, 1) NOT NULL,
    [Process]   [sysname] NOT NULL,
    [Param]     [sysname] NULL,
    [ScopeID]   TINYINT   NULL,
    PRIMARY KEY CLUSTERED ([ProcessID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStep]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStep] (
    [StepID]      INT           IDENTITY (1, 1) NOT NULL,
    [BatchID]     INT           NOT NULL,
    [StepName]    VARCHAR (100) NOT NULL,
    [StepDesc]    VARCHAR (500) NULL,
    [StepProcID]  INT           NOT NULL,
    [OnSuccessID] INT           NULL,
    [OnFailureID] INT           NULL,
    [IgnoreErr]   TINYINT       NULL,
    [StepOrder]   VARCHAR (10)  NULL,
    [StatusDT]    DATETIME      NULL,
    [StatusID]    TINYINT       NULL,
    [Err]         INT           NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [StepID] ASC),
    UNIQUE NONCLUSTERED ([StepName] ASC, [BatchID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepAttribute]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepAttribute] (
    [BatchID]        INT            NOT NULL,
    [StepID]         INT            NOT NULL,
    [AttributeName]  VARCHAR (100)  NOT NULL,
    [AttributeValue] VARCHAR (8000) NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [StepID] ASC, [AttributeName] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepConstraint]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepConstraint] (
    [ConstID]    INT          IDENTITY (1, 1) NOT NULL,
    [StepID]     INT          NOT NULL,
    [BatchID]    INT          NOT NULL,
    [ProcessID]  INT          NOT NULL,
    [ConstOrder] VARCHAR (10) NULL,
    [WaitPeriod] INT          NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [StepID] ASC, [ConstID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepConstraintAttribute]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepConstraintAttribute] (
    [BatchID]        INT            NOT NULL,
    [StepID]         INT            NOT NULL,
    [ConstID]        INT            NOT NULL,
    [AttributeName]  VARCHAR (100)  NOT NULL,
    [AttributeValue] VARCHAR (8000) NULL,
    PRIMARY KEY CLUSTERED ([BatchID] ASC, [StepID] ASC, [ConstID] ASC, [AttributeName] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepRun]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepRun] (
    [RunID]     INT          NOT NULL,
    [BatchID]   INT          NOT NULL,
    [StepID]    INT          NOT NULL,
    [StatusDT]  DATETIME     NULL,
    [StatusID]  TINYINT      NULL,
    [spid]      INT          NULL,
    [StepOrder] VARCHAR (10) NULL,
    [IgnoreErr] TINYINT      NULL,
    [Err]       INT          NULL,
    [StartTime] DATETIME     NULL,
    [EndTime]   DATETIME     NULL,
    [SeqGroup]  VARCHAR (10) NULL,
    [PriGroup]  VARCHAR (10) NULL,
    [SvcName]   [sysname]    NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC, [StepID] ASC),
    UNIQUE NONCLUSTERED ([BatchID] ASC, [StepID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepRunCounter]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepRunCounter] (
    [BatchID]      INT            NOT NULL,
    [StepID]       INT            NOT NULL,
    [RunID]        INT            NOT NULL,
    [CounterName]  VARCHAR (100)  NOT NULL,
    [CounterValue] VARCHAR (1000) NULL,
    [CreatedDTim]  SMALLDATETIME  NOT NULL,
    [ModifiedDTim] SMALLDATETIME  NOT NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC, [CounterName] ASC, [BatchID] ASC, [StepID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepRunHistory]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepRunHistory] (
    [RunID]     INT          NOT NULL,
    [BatchID]   INT          NOT NULL,
    [StepID]    INT          NOT NULL,
    [StatusDT]  DATETIME     NULL,
    [StatusID]  TINYINT      NULL,
    [spid]      INT          NULL,
    [StepOrder] VARCHAR (10) NULL,
    [IgnoreErr] TINYINT      NULL,
    [Err]       INT          NULL,
    [StartTime] DATETIME     NULL,
    [EndTime]   DATETIME     NULL,
    [SeqGroup]  VARCHAR (10) NULL,
    [PriGroup]  VARCHAR (10) NULL,
    [SvcName]   [sysname]    NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC, [BatchID] ASC, [StepID] ASC)
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[ETLStepRunHistoryLog]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[ETLStepRunHistoryLog] (
    [LogID]      INT            IDENTITY (1, 1) NOT NULL,
    [RunID]      INT            NOT NULL,
    [BatchID]    INT            NOT NULL,
    [StepID]     INT            NOT NULL,
    [Err]        INT            NOT NULL,
    [LogDT]      DATETIME       NULL,
    [LogMessage] NVARCHAR (MAX) NULL,
    PRIMARY KEY CLUSTERED ([RunID] ASC, [LogID] ASC),
    UNIQUE NONCLUSTERED ([BatchID] ASC, [StepID] ASC, [LogID] ASC) ON [PRIMARY]
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[SystemParameters]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO
CREATE TABLE [dbo].[SystemParameters] (
    [ParameterType]          VARCHAR (32)   NOT NULL,
    [ParameterName]          VARCHAR (57)   NOT NULL,
    [ParameterValue_Current] VARCHAR (1024) NULL,
    [ParameterValue_New]     VARCHAR (1024) NULL,
    [ParameterValue_Default] VARCHAR (1024) NULL,
    [ParameterDesc]          VARCHAR (1024) NOT NULL,
    [EnvironmentName]        VARCHAR (100)  NOT NULL,
    [LastModifiedBy]         [sysname]      NOT NULL,
    [LastModifiedDtim]       DATETIME       NOT NULL
);


GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating unnamed constraint on [dbo].[Dsv]...';


GO
ALTER TABLE [dbo].[Dsv]
    ADD DEFAULT (getdate()) FOR [FromDT];


GO
PRINT N'Creating unnamed constraint on [dbo].[Dsv]...';


GO
ALTER TABLE [dbo].[Dsv]
    ADD DEFAULT ('9999-12-31') FOR [ToDT];


GO
PRINT N'Creating unnamed constraint on [dbo].[ETLBatchRun]...';


GO
ALTER TABLE [dbo].[ETLBatchRun]
    ADD DEFAULT (suser_sname()) FOR [ModifiedBY];


GO
PRINT N'Creating unnamed constraint on [dbo].[ETLStepRunCounter]...';


GO
ALTER TABLE [dbo].[ETLStepRunCounter]
    ADD DEFAULT (getdate()) FOR [CreatedDTim];


GO
PRINT N'Creating unnamed constraint on [dbo].[ETLStepRunCounter]...';


GO
ALTER TABLE [dbo].[ETLStepRunCounter]
    ADD DEFAULT (getdate()) FOR [ModifiedDTim];


GO
PRINT N'Creating [dbo].[SystemParametersEnvironmentNameCK]...';


GO
ALTER TABLE [dbo].[SystemParameters]
    ADD CONSTRAINT [SystemParametersEnvironmentNameCK] CHECK (EnvironmentName IN ('All', 'Dev', 'SIT', 'UAT', 'PROD'));


GO
PRINT N'Creating [dbo].[trg_SystemParameters_Del]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

/*
** Name:  [trg_SystemParameters_Del]
**
** $Workfile: systemparameters.sql $
** $Archive: /Development/SubjectAreas/WebUsage/Database/Schema/Table/Trigger/systemparameters.sql $
**
** Purpose:
**      This script creates a trigger on table [dbo].[SystemParameters].
**  Prevent users from removing system parameters.
**
** $Author: Karlj $
** $Revision: 4 $
** $BuildVersion: $
**
** Copyright (c) Microsoft Corporation 1996-2000.
** All rights reserved.
**
*/

CREATE TRIGGER [trg_SystemParameters_Del] ON [dbo].[SystemParameters] FOR DELETE AS

    /*
    ** Declarations.
    */

    DECLARE @ProcedureName sysname              -- This procedure.

    /*
    ** Initialize the @ProcedureName for error messages.
    */

    SELECT @ProcedureName = OBJECT_NAME(@@PROCID)

    IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION

    RAISERROR (50026, 16, -1, @ProcedureName)
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [dbo].[trg_SystemParameters_Upd]...';


GO
SET ANSI_NULLS ON;

SET QUOTED_IDENTIFIER OFF;


GO

/*
** Name:  [trg_SystemParameters_Upd]
**
** $Workfile: systemparameters.sql $
** $Archive: /Development/SubjectAreas/WebUsage/Database/Schema/Table/Trigger/systemparameters.sql $
**
** Purpose:
**      This script creates a trigger on table [dbo].[SystemParameters].
**  Issue warning messages about changes to the system parameters.  These
**  errors should be trappable so that an operator can be notified of
**  changes.
**
** $Author: Karlj $
** $Revision: 4 $
** $BuildVersion: $
**
** Copyright (c) Microsoft Corporation 1996-2000.
** All rights reserved.
**
*/

CREATE TRIGGER [trg_SystemParameters_Upd] ON [dbo].[SystemParameters] FOR UPDATE AS

    /*
    ** Declarations.
    */

    DECLARE @ProcedureName sysname              -- This procedure.
    DECLARE @ParameterName varchar(57)
    DECLARE @ParameterValue_Current varchar(1024)
    DECLARE @ParameterValue_New varchar(1024)

    /*
    ** Initialize the @ProcedureName for error messages.
    */

    SELECT @ProcedureName = OBJECT_NAME(@@PROCID)

    /*
    ** Make sure that the current value is equal to the new value or
    ** else abort.
    */

    IF UPDATE([ParameterValue_Current]) AND
        EXISTS (SELECT *
                  FROM [inserted]
                 WHERE [ParameterValue_Current] <> [ParameterValue_New] )

        ROLLBACK TRANSACTION

    IF UPDATE([ParameterValue_Current]) AND UPDATE([ParameterValue_New])
        ROLLBACK TRANSACTION

    /*
    ** Post a warning message for each affected parameter.
    */

    DECLARE hC CURSOR FAST_FORWARD FOR
     SELECT i.[ParameterName]
          , i.[ParameterValue_Current]
          , i.[ParameterValue_New]
      FROM [inserted] AS i
      JOIN [deleted] AS d ON d.[ParameterName] = i.[ParameterName]
     WHERE d.[ParameterValue_Current] <> i.[ParameterValue_New]

    OPEN hC
    FETCH hC INTO @ParameterName, @ParameterValue_Current, @ParameterValue_New

    WHILE @@FETCH_STATUS <> -1
        BEGIN

            IF UPDATE(ParameterValue_Current)
                RAISERROR (50025, 10, -1, @ProcedureName, @ParameterName, @ParameterValue_Current)

            IF UPDATE(ParameterValue_New)
                RAISERROR (50024, 10, -1, @ProcedureName, @ParameterName, @ParameterValue_New)

            FETCH hC INTO @ParameterName, @ParameterValue_Current, @ParameterValue_New

        END

    CLOSE hC
    DEALLOCATE hC
GO
SET ANSI_NULLS, QUOTED_IDENTIFIER ON;


GO
PRINT N'Creating [ETLController_Cancel]...';


GO
CREATE MESSAGE TYPE [ETLController_Cancel]
    AUTHORIZATION [dbo]
    VALIDATION = VALID_XML WITH SCHEMA COLLECTION [dbo].[ETLController];


GO
PRINT N'Creating [ETLController_InfoMessage]...';


GO
CREATE MESSAGE TYPE [ETLController_InfoMessage]
    AUTHORIZATION [dbo]
    VALIDATION = VALID_XML WITH SCHEMA COLLECTION [dbo].[ETLController];


GO
PRINT N'Creating [ETLController_Receipt]...';


GO
CREATE MESSAGE TYPE [ETLController_Receipt]
    AUTHORIZATION [dbo]
    VALIDATION = VALID_XML WITH SCHEMA COLLECTION [dbo].[ETLController];


GO
PRINT N'Creating [ETLController_Request]...';


GO
CREATE MESSAGE TYPE [ETLController_Request]
    AUTHORIZATION [dbo]
    VALIDATION = VALID_XML WITH SCHEMA COLLECTION [dbo].[ETLController];


GO
PRINT N'Creating [ETLController_Test]...';


GO
CREATE MESSAGE TYPE [ETLController_Test]
    AUTHORIZATION [dbo]
    VALIDATION = VALID_XML WITH SCHEMA COLLECTION [dbo].[ETLController];


GO
PRINT N'Creating [dbo].[ETLController_Receipt_Queue]...';


GO
CREATE QUEUE [dbo].[ETLController_Receipt_Queue];


GO
PRINT N'Creating [ETLController]...';


GO
CREATE CONTRACT [ETLController]
    AUTHORIZATION [dbo]
    ([ETLController_InfoMessage] SENT BY TARGET, [ETLController_Request] SENT BY INITIATOR, [ETLController_Receipt] SENT BY TARGET, [ETLController_Test] SENT BY ANY, [ETLController_Cancel] SENT BY INITIATOR);


GO
PRINT N'Creating [ETLController_Request]...';


GO
CREATE SERVICE [ETLController_Request]
    AUTHORIZATION [dbo]
    ON QUEUE [dbo].[ETLController_Receipt_Queue]
    ([ETLController]);


GO
PRINT N'Creating [dbo].[fn_AttributeGet]...';


GO
/*
select * from ETLStepAttribute
select [dbo].fn_AttributeGet (-10,1,null,'StepName')
*/
create function [dbo].[fn_AttributeGet] (
    @BatchID int
   ,@StepID int
   ,@ConstID int
   ,@AttributeName nvarchar(100)
)
returns nvarchar(4000)
 as
begin
/******************************************************************************
** File:	[fn_AttributeGet].sql
** Name:	[dbo].[fn_AttributeGet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Function/[fn_AttributeGet].sql:

** Desc:	return  user defined attribute value for batch/step/const combination
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	08/01/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/
   declare @v nvarchar(4000)

   if (@ConstId is not null and @StepID is null)
      if (@AttributeName = 'ConstOrder')
         select @v = ConstOrder from dbo.[ETLBatchConstraint] where BatchID = @BatchID and ConstId = @ConstID;
      else if (@AttributeName = 'WaitPeriod')
         select @v = WaitPeriod from dbo.[ETLBatchConstraint] where BatchID = @BatchID and ConstId = @ConstID;
      else 
         select @v = AttributeValue
           from dbo.[ETLBatchConstraintAttribute]
          where BatchID = @BatchID and ConstId = @ConstID and AttributeName = @AttributeName;
   else if (@ConstId is not null and @StepID is not null)
      if (@AttributeName = 'ConstOrder')
         select @v = ConstOrder from dbo.[ETLStepConstraint] where BatchID = @BatchID and StepID = @StepID and ConstId = @ConstID;
      else if (@AttributeName = 'WaitPeriod')
         select @v = WaitPeriod from dbo.[ETLStepConstraint] where BatchID = @BatchID and StepID = @StepID and ConstId = @ConstID;
      else 
         select @v = AttributeValue
           from dbo.[ETLStepConstraintAttribute]
          where BatchID = @BatchID and StepID = @StepID and ConstId = @ConstID and AttributeName = @AttributeName
   else if (@StepID is not null)
       if (@AttributeName = 'StepName')
         select @v = StepName from dbo.[ETLStep] where BatchID = @BatchID and StepID = @StepID;
       else if (@AttributeName = 'StepDesc')
         select @v = StepDesc from dbo.[ETLStep] where BatchID = @BatchID and StepID = @StepID;
       else if (@AttributeName = 'IgnoreErr')
         select @v = IgnoreErr from dbo.[ETLStep] where BatchID = @BatchID and StepID = @StepID;
       else if (@AttributeName = 'StepOrder')
         select @v = StepOrder from dbo.[ETLStep] where BatchID = @BatchID and StepID = @StepID;
       else
         select @v = AttributeValue
           from dbo.[ETLStepAttribute]
          where BatchID = @BatchID and StepID = @StepID and AttributeName = @AttributeName
   else 
       if (@AttributeName = 'BatchName')
         select @v = BatchName from dbo.[ETLBatch] where BatchID = @BatchID;
       else if (@AttributeName = 'BatchDesc')
         select @v = BatchDesc from dbo.[ETLBatch] where BatchID = @BatchID;
       else if (@AttributeName = 'IgnoreErr')
         select @v = IgnoreErr from dbo.[ETLBatch] where BatchID = @BatchID;
       else if (@AttributeName = 'RestartOnErr')
         select @v = RestartOnErr from dbo.[ETLBatch] where BatchID = @BatchID;
       else
         select @v = AttributeValue
           from dbo.[ETLBatchAttribute]
          where BatchID = @BatchID and AttributeName = @AttributeName

   return (@v)
end
GO
PRINT N'Creating [dbo].[fn_CounterGet]...';


GO
/*
select * from ETLStepRunCounter
select [dbo].[fn_CounterGet] (20,0,0,'ExProcessID')
*/
create function [dbo].[fn_CounterGet] (
    @BatchID int
   ,@StepID int
   ,@RunID int
   ,@CounterName nvarchar(100)
)
returns nvarchar(1000)
 as
begin
/******************************************************************************
** File:	[fn_CounterGet].sql
** Name:	[dbo].[fn_CounterGet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Function/fn_CounterGet.sql:

** Desc:	return  user defined counter value for batch/step/run combination
**          
**
** Params:
** @Request      --xml containing @RunID/StepID/BatchID
** Returns:
**
** Author:	andreys
** Date:	08/01/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

   return (select top(1) CounterValue
             from dbo.[ETLStepRunCounter]
            where BatchID = @BatchID and StepID = @StepID and RunID = @RunID and CounterName = @CounterName)
end
GO
PRINT N'Creating [dbo].[fn_ETLCounterGet]...';


GO
/*
select * from ETLStepRunCounter
select [dbo].[fn_ETLCounterGet] (20,0,0,'ExProcessID')
*/
create function [dbo].[fn_ETLCounterGet] (
    @BatchID int
   ,@StepID int
   ,@RunID int
   ,@CounterName nvarchar(100)
)
returns nvarchar(1000)
 as
begin
/******************************************************************************
** File:	[fn_ETLCounterGet].sql
** Name:	[dbo].[fn_ETLCounterGet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema40/Function/[fn_ETLCounterGet].sql:

** Desc:	return  user defined counter value for batch/step/run combination
**          
**
** Params:
** @Request      --xml containing @RunID/StepID/BatchID
** Returns:
**
** Author:	andreys
** Date:	08/01/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

   return (select top(1) CounterValue
             from dbo.[ETLStepRunCounter]
            where BatchID = @BatchID and StepID = @StepID and RunID = @RunID and CounterName = @CounterName)
end
GO
PRINT N'Creating [dbo].[fn_GetBase64String]...';


GO

CREATE FUNCTION [dbo].[fn_GetBase64String]
(
	@StringToEncode nvarchar(max)
) RETURNS nvarchar(max)
AS
BEGIN
/******************************************************************
**	D File:         fn_GetBase64String.SQL
**
**	D Desc:         Encode string as base 64 to pass to DeltaExtractor
**
**	D Auth:         vensri
**	D Date:         12/18/2007
**
**	Param:			@StringToEncode - The string to encode
**  Returns:		nvarchar(max) the base 64 encoded string
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
	DECLARE @xmlDoc xml

	SELECT @xmlDoc = (select cast( @StringToEncode as varbinary(max))
	FOR XML RAW ('row'), elements, BINARY BASE64, type)

	return (select @xmlDoc.value('(/row)[1]','nvarchar(max)'))

END
GO
PRINT N'Creating [dbo].[fn_SystemParameter]...';


GO

/*
** Name:  [dbo].[fn_SystemParameter]
**
** $Workfile: fn_systemparameter.sql $
** $Archive: /Development/SubjectAreas/UserActivityStats/Database/Schema/Function/fn_systemparameter.sql $
**
** Purpose:
**      This script creates a function to return the current setting for
**  the specified system parameter.
**
** $Author: Karlj $
** $Revision: 6 $
** $BuildVersion: $
**
** Pre-conditions:
**      The system parameters are defined in the [dbo].[SystemParameters]
**  table.
**
** Input Arguments:
**
**      Name:         @ParameterCategory
**      Datatype:     udt_ParameterType
**      Default:      None
**      Description:  The system parameter category.
**
**      Name:         @ParameterName
**      Datatype:     udt_ParameterName
**      Default:      None
**      Description:  The system parameter name.  Names are unique to a
**                    parameter category.
**
** Return Type:
**      [udt_ParameterValue]
**
** Results Set:
**      None
**
** Post-conditions:
**      No changes are made to the database.
*/

CREATE FUNCTION [dbo].[fn_SystemParameter] (
        @ParameterCategory VARCHAR(32)    -- System parameter category.
      , @ParameterName VARCHAR(57)        -- System parameter name.
	  , @EnvironmentName VARCHAR(100)	  -- Environment Name
    ) RETURNS varchar(1024) AS

    BEGIN

        /*
        ** Declarations.
        */

        DECLARE @ReturnVar varchar(1024)

        /*
        ** Get the current system parameter setting.
        */

        SELECT @ReturnVar = [ParameterValue_Current]
          FROM [dbo].[SystemParameters]
         WHERE [ParameterType] = @ParameterCategory
           AND [ParameterName] = @ParameterName
		   AND EnvironmentName = @EnvironmentName;
        /*
        ** Return the results.
        */

        RETURN (@ReturnVar)

    END
GO
PRINT N'Creating [dbo].[EventPost]...';


GO
CREATE PROCEDURE [dbo].[EventPost]
@Server NVARCHAR (MAX), @Database NVARCHAR (MAX), @EventType NVARCHAR (MAX), @EventPosted DATETIME, @EventArgs XML, @Options NVARCHAR (MAX)
AS EXTERNAL NAME [ControllerClrExtensions].[ETL_Framework.ControllerCLRExtensions.ControllerExtensions].[EventPost]


GO
PRINT N'Creating [dbo].[EventReceive]...';


GO
CREATE PROCEDURE [dbo].[EventReceive]
@Server NVARCHAR (MAX), @Database NVARCHAR (MAX), @EventId UNIQUEIDENTIFIER OUTPUT, @EventPosted DATETIME OUTPUT, @EventReceived DATETIME OUTPUT, @EventArgs XML OUTPUT, @EventType NVARCHAR (MAX), @Options NVARCHAR (MAX)
AS EXTERNAL NAME [ControllerClrExtensions].[ETL_Framework.ControllerCLRExtensions.ControllerExtensions].[EventReceive]


GO
PRINT N'Creating [dbo].[ExecuteDE]...';


GO
CREATE PROCEDURE [dbo].[ExecuteDE]
@exe NVARCHAR (MAX), @arg NVARCHAR (MAX), @timeout INT, @options NVARCHAR (MAX)
AS EXTERNAL NAME [DeSqlClr].[ETL_Framework.DESQLCLR.DeFunctions].[ExecuteDE]


GO
PRINT N'Creating [dbo].[prc_CLREventPost]...';


GO
CREATE PROCEDURE [dbo].[prc_CLREventPost]
@Server [sysname], @Database [sysname], @EventType [sysname], @EventPosted DATETIME=NULL, @args XML, @options NVARCHAR (100)=NULL
AS EXTERNAL NAME [ControllerClrExtensions].[ETL_Framework.ControllerCLRExtensions.ControllerExtensions].[EventPost]


GO
PRINT N'Creating [dbo].[prc_CLREventReceive]...';


GO
CREATE PROCEDURE [dbo].[prc_CLREventReceive]
@Server [sysname], @Database [sysname], @EventID UNIQUEIDENTIFIER=NULL OUTPUT, @EventPosted DATETIME=NULL OUTPUT, @EventReceived DATETIME=NULL OUTPUT, @EventArgs XML OUTPUT, @EventType [sysname], @options NVARCHAR (100)=NULL
AS EXTERNAL NAME [ControllerClrExtensions].[ETL_Framework.ControllerCLRExtensions.ControllerExtensions].[EventReceive]


GO
PRINT N'Creating [dbo].[prc_CLRExecuteDE]...';


GO
CREATE PROCEDURE [dbo].[prc_CLRExecuteDE]
@exe NVARCHAR (4000), @args NVARCHAR (MAX), @timeout INT=0, @options NVARCHAR (1000)=NULL
AS EXTERNAL NAME [DeSqlClr].[ETL_Framework.DESQLCLR.DeFunctions].[ExecuteDE]


GO
PRINT N'Creating [dbo].[prc_ConversationCleanup]...';


GO

CREATE PROCEDURE dbo.prc_ConversationCleanup
@options varchar(100) = null
As
/******************************************************************
**D File:         prc_ConversationCleanup.SQL
**
**D Desc:         clean up broker communication leftovers
**
**D Auth:         andreys
**D Date:         07/05/2007
**
** Param:
** @options:      all - remove all conversation including CO
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @Now nvarchar(30)
DECLARE @msg nvarchar(max)
DECLARE @SPID int
DECLARE @RunID int
DECLARE @handle uniqueidentifier
DECLARE @prevhandle uniqueidentifier
DECLARE @All tinyint

SET @Err = 0
SET @SPID = @@SPID
SET @All = case when @options like '%all%' then 1 else 0 end
-------------------------------------------------------------------
-------------------------------------------------------------------
--just for testing
--waitfor delay '00:00:01'

BEGIN TRY

   SELECT top 1 @handle = conversation_handle FROM sys.conversation_endpoints sc
     JOIN sys.services ss ON ((sc.service_id = ss.service_id AND ss.[name] like ('ETLController[_]%'))
       OR (sc.service_id = 0 AND far_service like ('ETLController[_]%')))
    WHERE (sc.state IN ('ER','DI','DO','CD') or @all = 1)

   WHILE @handle IS NOT NULL
   BEGIN
      SET @msg = 'Ending conversation [' + CAST(@handle AS nvarchar(100)) + ']'
      RAISERROR (@msg,0,1)
      ;END CONVERSATION @handle WITH CLEANUP

      SET @prevhandle = @handle
      SET @handle = NULL
      SELECT top 1 @handle = conversation_handle FROM sys.conversation_endpoints sc
        JOIN sys.services ss ON ((sc.service_id = ss.service_id AND ss.[name] like ('ETLController[_]%'))
          OR (sc.service_id = 0 AND far_service like ('ETLController[_]%')))
       WHERE (sc.state IN ('ER','DI','DO','CD') or @All = 1) 

      IF (@handle IS NULL)
         BREAK

      IF (@handle = @prevhandle)
      BEGIN
         SET @msg = 'Failed to end conversation [' + CAST(@handle AS nvarchar(100)) + ']'
         RAISERROR(@msg,11,11)
         BREAK
      END
   END

END TRY
BEGIN CATCH
    SET @Err = ERROR_NUMBER()
    SET @msg = ERROR_MESSAGE()
    RAISERROR('Error %d %s',11,11,@Err,@msg)
END CATCH

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_CreateHeader]...';


GO
/*
declare @pHeader xml
exec dbo.prc_CreateHeader @pHeader out,1,null,null,4,10
select @pHeader
*/
CREATE PROCEDURE [dbo].[prc_CreateHeader]
    @pHeader xml([ETLController]) output
   ,@pBatchID int
   ,@pStepID int = null
   ,@pConstID int = null
   ,@pRunID int
   ,@pOptions int = null
   ,@pScope int = null
As
/******************************************************************
**D File:         prc_CreateHeader.SQL
**
**D Desc:         return Header object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
SET @pHeader =
  '<etl:Header xmlns:etl="ETLController.XSD"'
+ ' BatchID="' + CAST(@pBatchID AS nvarchar(30)) + '"'
+ CASE WHEN @pStepID IS NOT NULL THEN ' StepID="' + CAST(@pStepID AS nvarchar(30)) + '"' ELSE '' END
+ CASE WHEN @pConstID IS NOT NULL THEN N' ConstID="' + CAST(@pConstID AS nvarchar(30)) + '"' ELSE '' END
+ ' RunID="' + CAST(@pRunID AS nvarchar(30)) + '"'
+ CASE WHEN @pOptions IS NOT NULL THEN N' Options="' + CAST(@pOptions AS nvarchar(30)) + '"' ELSE '' END
+ CASE WHEN @pScope IS NOT NULL THEN N' Scope="' + CAST(@pScope AS nvarchar(30)) + '"' ELSE '' END
+ ' />'
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_CreateProcessReceipt]...';


GO
/*
declare @pHeader xml
declare @pProcessReceipt xml
exec dbo.prc_CreateHeader @pHeader out,1,null,null,4,10
select @pHeader
exec dbo.prc_CreateProcessReceipt @pProcessReceipt out,@pHeader,2,5000,null
select @pProcessReceipt
*/
CREATE PROCEDURE [dbo].[prc_CreateProcessReceipt]
    @pProcessReceipt xml([ETLController]) output
   ,@pHeader xml([ETLController])
   ,@pStatusID int
   ,@pErr int
   ,@pErrMsg nvarchar(max) = null
As
/******************************************************************
**D File:         prc_CreateProcessReceipt.SQL
**
**D Desc:         return ProcessReceipt object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
SELECT @pProcessReceipt = @pHeader.query('declare namespace etl="ETLController.XSD";
  <etl:ProcessReceipt>
   {etl:Header}
   <etl:Status StatusID="{sql:variable("@pStatusID")}" Error="{sql:variable("@pErr")}">
    <etl:msg>{sql:variable("@pErrMsg")}</etl:msg>
   </etl:Status>
  </etl:ProcessReceipt>
')
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_CreateProcessRequest]...';


GO
/*
declare @uid uniqueidentifier
declare @pHeader xml
declare @pContext xml
declare @pProcessRequest xml
set @uid = newid()
exec dbo.prc_CreateHeader @pHeader out,-10,null,null,4,10
--exec dbo.prc_CreateContext @pContext out,@pHeader
exec dbo.prc_CreateProcessRequest @pProcessRequest out,@pHeader,@pContext,@uid
select @pHeader
select @pContext
select @pProcessRequest
*/
CREATE PROCEDURE [dbo].[prc_CreateProcessRequest]
    @pProcessRequest xml([ETLController]) output
   ,@pHeader xml([ETLController])
   ,@pContext xml([ETLController])
   ,@pConversation uniqueidentifier = null
   ,@pConversationGrp uniqueidentifier = null
As
/******************************************************************
**D File:         prc_CreateProcessRequest.SQL
**
**D Desc:         return ProcessRequest object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)
DECLARE @x xml
DECLARE @nHandle nvarchar(36)
DECLARE @nHandleGrp nvarchar(36)
DECLARE @pr nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

set @nHandle= isnull(cast(@pConversation as nvarchar(36)),'')
set @nHandleGrp= isnull(cast(@pConversationGrp as nvarchar(36)),'')

begin try
set @pr = '
  <etl:ProcessRequest xmlns:etl="ETLController.XSD">
   <etl:Header/>
   <etl:SrcConversation>' + @nHandle + '</etl:SrcConversation>
   <etl:SrcConversationGrp>' + @nHandleGrp + '</etl:SrcConversationGrp>
   <etl:DstConversation/>
   <etl:DstConversationGrp/>
   <etl:Context/>
   </etl:ProcessRequest>
'
set @pr = replace(@pr,'<etl:Header/>',cast(@pHeader as nvarchar(max)))

set @pr = replace(@pr,'<etl:Context/>',isnull(cast(@pContext as nvarchar(max)),''))

set @pProcessRequest = @pr

end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ETLAttributeSet]...';


GO

/*
exec [dbo].[prc_ETLAttributeSet] -10,-5,null,'RestartOnErr','1'
select * from ETLBatch
*/
CREATE procedure [dbo].[prc_ETLAttributeSet] (
    @BatchID int
   ,@StepID int = null
   ,@ConstID int = null
   ,@AttributeName nvarchar(100)
   ,@AttributeValue nvarchar(4000)
)
 as
begin
/******************************************************************************
** File:	[prc_ETLAttributeSet].sql
** Name:	[dbo].[prc_ETLAttributeSet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema40/Procedure/[prc_ETLAttributeSet].sql:

** Desc:	set  user defined attribute value for batch/step/const combination
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	08/01/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------
** 2012-01-09       andreys                             validate inpits
*/
set nocount on
declare @msg nvarchar(max)
declare @Err int
declare @proc sysname

set @Err = 0
set @proc = OBJECT_NAME(@@procid)

begin try

   if (not exists(select 1 from dbo.ETLBatch where BatchID = @BatchID))
      raiserror('Invalid Parameter b=%d',11,11,@BatchID);


   if (@ConstId is not null and @StepID is null)
   begin
      if (not exists(select 1 from dbo.ETLBatchConstraint where BatchID = @BatchID and ConstId = @ConstId))
         raiserror('Invalid Parameter bc=%d.%d',11,11,@BatchID,@ConstID);
  --columns
      if (@AttributeName = 'ConstOrder')
         update dbo.[ETLBatchConstraint]
            set ConstOrder = @AttributeValue
          where BatchID = @BatchID and ConstId = @ConstID
      else if (@AttributeName = 'WaitPeriod')
         update dbo.[ETLBatchConstraint]
            set ConstOrder = @AttributeValue
          where BatchID = @BatchID and ConstId = @ConstID
   --attributes 
      else if exists(select 1 from dbo.[ETLBatchConstraintAttribute]
                 where BatchID = @BatchID and ConstId = @ConstID and AttributeName = @AttributeName)
         if (@AttributeValue is null)
            delete dbo.[ETLBatchConstraintAttribute]
             where BatchID = @BatchID and ConstId = @ConstID and AttributeName = @AttributeName
         else
            update dbo.[ETLBatchConstraintAttribute]
               set AttributeValue = @AttributeValue
             where BatchID = @BatchID and ConstId = @ConstID and AttributeName = @AttributeName
      else if (@AttributeValue is not null)
         insert dbo.[ETLBatchConstraintAttribute] (BatchID,ConstID,AttributeName,AttributeValue)
         values (@BatchID,@ConstID,@AttributeName,@AttributeValue)
   end
   else if (@ConstId is not null and @StepID is not null)
   begin
      if (not exists(select 1 from dbo.ETLStepConstraint where BatchID = @BatchID and StepID = @StepID and ConstID = @ConstID))
         raiserror('Invalid Parameter  for the bsc= %d.%d.%d',11,11,@BatchID,@StepID,@ConstID);
   --columns
      if (@AttributeName = 'ConstOrder')
         update dbo.[ETLStepConstraint]
            set ConstOrder = @AttributeValue
          where BatchID = @BatchID and StepID = @StepID and ConstId = @ConstID
      else if (@AttributeName = 'WaitPeriod')
         update dbo.[ETLStepConstraint]
            set ConstOrder = @AttributeValue
          where BatchID = @BatchID and StepID = @StepID and ConstId = @ConstID
   --attributes 
     else if exists(select 1 from dbo.[ETLStepConstraintAttribute]
                 where BatchID = @BatchID and StepID = @StepID and ConstId = @ConstID and AttributeName = @AttributeName)
         if (@AttributeValue is null)
            delete dbo.[ETLStepConstraintAttribute]
             where BatchID = @BatchID and StepID = @StepID  and ConstId = @ConstID and AttributeName = @AttributeName
         else
            update dbo.[ETLStepConstraintAttribute]
               set AttributeValue = @AttributeValue
             where BatchID = @BatchID and StepID = @StepID  and ConstId = @ConstID and AttributeName = @AttributeName
      else if (@AttributeValue is not null)
         insert dbo.[ETLStepConstraintAttribute] (BatchID,StepID,ConstID,AttributeName,AttributeValue)
         values (@BatchID,@StepID,@ConstID,@AttributeName,@AttributeValue)
   end
   else if (@StepID is not null)
   begin
      if (not exists(select 1 from dbo.ETLStep where BatchID = @BatchID and StepID = @StepID))
         raiserror('Invalid Parameter  for the bs= %d.%d',11,11,@BatchID,@StepID);
    --columns
      if (@AttributeName = 'StepName')
         update dbo.[ETLStep]
            set StepName = @AttributeValue
          where BatchID = @BatchID and StepID = @StepID
      else if (@AttributeName = 'StepDesc')
         update dbo.[ETLStep]
            set StepDesc = @AttributeValue
          where BatchID = @BatchID and StepID = @StepID
      else if (@AttributeName = 'IgnoreErr')
         update dbo.[ETLStep]
            set IgnoreErr = @AttributeValue
          where BatchID = @BatchID and StepID = @StepID
      else if (@AttributeName = 'StepOrder')
         update dbo.[ETLStep]
            set StepOrder = @AttributeValue
          where BatchID = @BatchID and StepID = @StepID
   --attributes 
      else if exists(select 1 from dbo.[ETLStepAttribute]
                 where BatchID = @BatchID and StepId = @StepID and AttributeName = @AttributeName)
         if (@AttributeValue is null)
            delete dbo.[ETLStepAttribute]
             where BatchID = @BatchID and StepID = @StepID and AttributeName = @AttributeName
         else
            update dbo.[ETLStepAttribute]
               set AttributeValue = @AttributeValue
             where BatchID = @BatchID and StepId = @StepID and AttributeName = @AttributeName
      else if (@AttributeValue is not null)
         insert dbo.[ETLStepAttribute] (BatchID,StepID,AttributeName,AttributeValue)
         values (@BatchID,@StepID,@AttributeName,@AttributeValue)
   end
   else
   begin
    --columns
      if (@AttributeName = 'BatchName')
         update dbo.[ETLBatch]
            set BatchName = @AttributeValue
          where BatchID = @BatchID
      else if (@AttributeName = 'BatchDesc')
         update dbo.[ETLBatch]
            set BatchDesc = @AttributeValue
          where BatchID = @BatchID
      else if (@AttributeName = 'IgnoreErr')
         update dbo.[ETLBatch]
            set IgnoreErr = @AttributeValue
          where BatchID = @BatchID
      else if (@AttributeName = 'RestartOnErr')
         update dbo.[ETLBatch]
            set RestartOnErr = @AttributeValue
          where BatchID = @BatchID
   --attributes 
      else if exists(select 1 from dbo.[ETLBatchAttribute]
                 where BatchID = @BatchID and AttributeName = @AttributeName)
         if (@AttributeValue is null)
            delete dbo.[ETLBatchAttribute]
             where BatchID = @BatchID and AttributeName = @AttributeName
         else
            update dbo.[ETLBatchAttribute]
               set AttributeValue = @AttributeValue
             where BatchID = @BatchID and AttributeName = @AttributeName
      else if (@AttributeValue is not null)
         insert dbo.[ETLBatchAttribute] (BatchID,AttributeName,AttributeValue)
         values (@BatchID,@AttributeName,@AttributeValue)
   end

end try
begin catch	
	if @@trancount > 0 rollback tran
	
   set @Proc = ERROR_PROCEDURE()
   set @Msg = ERROR_MESSAGE()
   raiserror ('ERROR: PROC %s, MSG: %s',11,17,@Proc,@Msg) 
   set @Err = ERROR_NUMBER()
end catch
   return 0
end
GO
PRINT N'Creating [dbo].[prc_ETLCounterSet]...';


GO
/*
exec dbo.prc_ETLCounterSet -20,1,0,'test2','bbb'
select dbo.fn_ETLCounterGet (-20,1,0,'test2')

*/
create procedure [dbo].[prc_ETLCounterSet] (
    @pBatchID int
   ,@pStepID int = null
   ,@pRunID int = null
   ,@pName varchar(100) = null
   ,@pValue nvarchar(max)

) as
begin
/******************************************************************************
** File:	[prc_ETLCounterSet].sql
** Name:	[dbo].[prc_ETLCounterSet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Procedure/[prc_ETLCounterSet].sql:

** Desc:	set client Counter value
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	10/30/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------
** 2012-01-09       andreys                             validate inpits

*/

set nocount on
declare @err                int
declare @proc               sysname
declare @msg                nvarchar(1000)
declare @debug              tinyint
declare @Options            int
declare @query              nvarchar(max)

declare @BatchID int
declare @StepID int
declare @RunID int
declare @LGRunID int
declare @ProcErr int
declare @ProcName sysname
declare @Counters xml(ETLController)

set @err = 0
begin try

set @BatchID = @pBatchID
set @StepID = isnull(@pStepID,0)
set @RunID = isnull(@pRunID,0)

   if (not exists(select 1 from dbo.ETLBatch where BatchID = @BatchID))
      raiserror('Invalid Parameter b=%d',11,11,@BatchID);
   if (@RunID <> 0 and not exists(select 1 from dbo.ETLBatchRun where BatchID = @BatchID and RunID = @RunID))
      raiserror('Invalid Parameter br=%d',11,11,@BatchID,@RunID);
   if (@StepID <> 0 and not exists(select 1 from dbo.ETLStep where BatchID = @BatchID and StepID = @StepID))
      raiserror('Invalid Parameter bs=%d',11,11,@BatchID,@StepID);


   if exists(select 1 from dbo.[ETLStepRunCounter]
                      where RunID = @RunID and StepID = @StepID
                        and BatchID = @BatchID and CounterName = @pName)
   begin
      if @pValue is null
      begin
         delete dbo.[ETLStepRunCounter]
          where RunID = @RunID and StepID = @StepID
            and BatchID = @BatchID and CounterName = @pName
         --raiserror('record was deleted from dbo.ETLStepRunCounter',0,1)
      end
      else
      begin
         update dbo.[ETLStepRunCounter]
         set CounterValue = @pValue
          where RunID = @RunID and StepID = @StepID
            and BatchID = @BatchID and CounterName = @pName
         --raiserror('record was updated in dbo.ETLStepRunCounter',0,1)
      end
   end
   else
   begin
      insert dbo.[ETLStepRunCounter]
      (RunID,StepID,CounterName,BatchID,CounterValue)
      values(@RunID,@StepID,@pName,@BatchID,@pValue)
      --raiserror('record was inserted into dbo.ETLStepRunCounter',0,1)
   end


end try
begin catch
   set @Proc = ERROR_PROCEDURE()
   set @pValue = null
   set @Msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror ('ERROR: PROC %s, MSG: %s',11,11,@Proc,@Msg) 
end catch

return @err
end
GO
PRINT N'Creating [dbo].[prc_ReadAttribute]...';


GO
/*
declare @value nvarchar(max)
declare @pHeader xml
declare @pContext xml
declare @pProcessRequest xml
declare @pAttributes xml
exec dbo.prc_CreateHeader @pHeader out,101,1,1,4,1
exec dbo.prc_CreateContext @pContext out,@pHeader
exec dbo.prc_CreateProcessRequest @pProcessRequest out,@pHeader,@pContext
--select @pProcessRequest
exec dbo.prc_ReadContextAttributes @pProcessRequest,@pAttributes out
select @pAttributes
exec dbo.prc_ReadAttribute @pAttributes,'SQL',@value out
select @value
*/
CREATE PROCEDURE [dbo].[prc_ReadAttribute]
    @pAttributes xml([ETLController])
   ,@pName nvarchar(100) = null output
   ,@pValue nvarchar(max) = null output
As
/******************************************************************
**D File:         prc_ReadAttribute.SQL
**
**D Desc:         read Attribute
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
  set @pValue = @pAttributes.value('declare namespace etl="ETLController.XSD";
   (/etl:Attributes/etl:Attribute[@Name=(sql:variable("@pName"))])[1]','nvarchar(max)')
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pValue = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ReadCounter]...';


GO
/*
declare @value nvarchar(max)
declare @RunID int
declare @pHeader xml
declare @pCounters xml
exec dbo.prc_CreateHeader @pHeader out,1,1,1,4,1
exec dbo.prc_CreateCounters @pCounters out,@pHeader
select @pCounters
exec dbo.prc_ReadCounter @pCounters,'test',@value out,@RunID out
select @value,@RunID
*/
CREATE PROCEDURE [dbo].[prc_ReadCounter]
    @pCounters xml([ETLController])
   ,@pName nvarchar(100) = null output
   ,@pValue nvarchar(max) = null output
   ,@pRunID int = null output
As
/******************************************************************
**D File:         prc_ReadCounter.SQL
**
**D Desc:         read Counter
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
  ;with xmlnamespaces('ETLController.XSD' as etl)
  select @pValue = c.a.value('(.)[1]','nvarchar(max)')
        ,@pRunID = c.a.value('(./@RunID)[1]','int')
  from @pCounters.nodes('/etl:Counters/etl:Counter[@Name=(sql:variable("@pName"))]') c(a)
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pValue = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ReadHeader]...';


GO
/*
declare @pHeader xml
declare @b int,@s int,@c int,@o int,@r int,@sc int
exec dbo.prc_CreateHeader @pHeader out,1,2,null,4,10,5
select @pHeader
exec dbo.prc_ReadHeader @pHeader,@b out,@s out,@c out,@r out,@o out,@sc out
select @b,@s,@c,@r,@o,@sc
*/
CREATE PROCEDURE [dbo].[prc_ReadHeader]
    @pHeader xml([ETLController])
   ,@pBatchID int = null output
   ,@pStepID int = null output
   ,@pConstID int = null output
   ,@pRunID int = null output
   ,@pOptions int = null output
   ,@pScope int = null output
As
/******************************************************************
**D File:         prc_ReadHeader.SQL
**
**D Desc:         read Header object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try

;with xmlnamespaces('ETLController.XSD' as etl)
select @pBatchID = h.d.value('(./@BatchID)[1]','int')
      ,@pStepID = h.d.value('(./@StepID)[1]','int')
      ,@pConstID = h.d.value('(./@ConstID)[1]','int')
      ,@pRunID = h.d.value('(./@RunID)[1]','int')
      ,@pOptions = h.d.value('(./@Options)[1]','int')
      ,@pScope = h.d.value('(./@Scope)[1]','int')
  from @pHeader.nodes('(/etl:Header)') h(d)

end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ReadProcessInfo]...';


GO
/*
declare @m nvarchar(max)
declare @e int
declare @pHeader xml
declare @pHeader1 xml
declare @pProcessInfo xml
exec dbo.prc_CreateHeader @pHeader out,1,null,null,4,10
select @pHeader
exec dbo.prc_CreateProcessInfo @pProcessInfo out,@pHeader,'xxx',10
select @pProcessInfo
exec dbo.prc_ReadProcessInfo @pProcessInfo,@pHeader1 out,@m out,@e out
select @e,@m
select @pHeader1
*/
CREATE PROCEDURE [dbo].[prc_ReadProcessInfo]
    @pProcessInfo xml([ETLController])
   ,@pHeader xml([ETLController]) = null output
   ,@pMsg nvarchar(max) = null output
   ,@pErr int = null output
As
/******************************************************************
**D File:         prc_ReadProcessInfo.SQL
**
**D Desc:         read Info object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
SELECT @pHeader = @pProcessInfo.query('declare namespace etl="ETLController.XSD";(/etl:ProcessInfo/etl:Header)[1]')
 ;WITH XMLNAMESPACES ('ETLController.XSD' as etl)
SELECT @pMsg = p.m.value('string(.)[1]','nvarchar(max)')
      ,@pErr = p.m.value('(./@Error)[1]','nvarchar(max)')
  FROM @pProcessInfo.nodes('/etl:ProcessInfo/etl:Message') as p(m)
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ReadProcessReceipt]...';


GO
/*
declare @s int,@e int,@m nvarchar(max)
declare @pHeader xml
declare @pHeader1 xml
declare @pProcessReceipt xml
exec dbo.prc_CreateHeader @pHeader out,1,null,null,4,10
select @pHeader
exec dbo.prc_CreateProcessReceipt @pProcessReceipt out,@pHeader,2,5000,'xxx'
select @pProcessReceipt
exec dbo.prc_ReadProcessReceipt @pProcessReceipt,@pHeader1 out,@s out,@e out,@m out
select @s,@e,@m
select @pHeader1
*/
CREATE PROCEDURE [dbo].[prc_ReadProcessReceipt]
    @pProcessReceipt xml([ETLController])
   ,@pHeader xml([ETLController]) = null output
   ,@pStatusID int = null output
   ,@pErr int = null output
   ,@pErrMsg nvarchar(max) = null output
As
/******************************************************************
**D File:         prc_ReadProcessReceipt.SQL
**
**D Desc:         read Receipt object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
SELECT @pHeader = @pProcessReceipt.query('declare namespace etl="ETLController.XSD";(/etl:ProcessReceipt/etl:Header)[1]')
SET @pStatusID = @pProcessReceipt.value('declare namespace etl="ETLController.XSD";(/etl:ProcessReceipt/etl:Status/@StatusID)[1]','int')
SET @pErr = @pProcessReceipt.value('declare namespace etl="ETLController.XSD";(/etl:ProcessReceipt/etl:Status/@Error)[1]','int')
SET @pErrMsg = @pProcessReceipt.value('declare namespace etl="ETLController.XSD";(/etl:ProcessReceipt/etl:Status/etl:msg)[1]','nvarchar(max)')
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ReadProcessRequest]...';


GO
/*
declare @uid uniqueidentifier
declare @uid1 uniqueidentifier
declare @pHeader xml
declare @pContext xml
declare @pProcessRequest xml
set @uid = newid()
exec dbo.prc_CreateHeader @pHeader out,-10,null,null,4,10
exec dbo.prc_CreateContext @pContext out,@pHeader
exec dbo.prc_CreateProcessRequest @pProcessRequest out,@pHeader,@pContext,@uid
select @pProcessRequest
exec dbo.prc_ReadProcessRequest @pProcessRequest,@pHeader out,@pContext out,@uid1 out
select @pHeader
select @pContext
select @uid1
*/
CREATE PROCEDURE [dbo].[prc_ReadProcessRequest]
    @pProcessRequest xml([ETLController])
   ,@pHeader xml([ETLController]) = null output
   ,@pContext xml([ETLController]) = null output
   ,@pConversation uniqueidentifier = null output
   ,@pConversationGrp uniqueidentifier = null output
As
/******************************************************************
**D File:         prc_ReadProcessRequest.SQL
**
**D Desc:         read Request object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)
declare @nHandle nvarchar(36)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

begin try
SELECT @pHeader = @pProcessRequest.query('declare namespace etl="ETLController.XSD";(/etl:ProcessRequest/etl:Header)[1]')
SELECT @pContext = @pProcessRequest.query('declare namespace etl="ETLController.XSD";(/etl:ProcessRequest/etl:Context)[1]')
SET @nHandle = @pProcessRequest.value('declare namespace etl="ETLController.XSD";(/etl:ProcessRequest/etl:SrcConversation)[1]','nvarchar(36)')
if len(@nHandle) = 36
   set @pConversation = cast(@nHandle as uniqueidentifier)
SET @nHandle = @pProcessRequest.value('declare namespace etl="ETLController.XSD";(/etl:ProcessRequest/etl:SrcConversationGrp)[1]','nvarchar(36)')
if len(@nHandle) = 36
   set @pConversationGrp = cast(@nHandle as uniqueidentifier)

end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_SystemParameterSet]...';


GO

CREATE PROCEDURE [dbo].[prc_SystemParameterSet] (
        @ParameterType VARCHAR(32) = NULL  -- The system parameter category.
      , @ParameterName VARCHAR(57) = NULL  -- The system parameter name.
	  , @EnvironmentName VARCHAR(100) = 'All' --The environment Name
    ) AS
/*
** Name:  [dbo].[prc_SystemParameterSet]
**
** $Workfile: prc_systemparameterset.sql $
** $Archive: /Development/SubjectAreas/Dimensions20/Database/Schema/Procedure/prc_systemparameterset.sql $
**
** Purpose:
**      This script creates a stored procedure to replace the current system
**  parameter setting(s) with the new setting(s).
**
** $Author: Karlj $
** $Revision: 1 $
** $BuildVersion: $
**
** Pre-conditions:
**      The SystemParameters table must exist as well as the specified
**  parameter.
**
** Input Arguments:
**
**      Name:         @ParameterType
**      Datatype:     udt_ParameterType
**      Default:      NULL
**      Description:  The name of the system parameter category.
**
**      Name:         @ParameterName
**      Datatype:     udt_ParameterName
**      Default:      NULL
**      Description:  The name of the system parameter to set.
**
**      Name:         @EnvironmentName
**      Datatype:     VARCHAR(100)
**      Default:      All
**      Description:  The name of the Environment where this parameter applies.
**                    
**
** Output Arguments:
**      None.
**
** Return Code:
**      0 = SUCCEED
**      1 = FAILURE
**
** Results Set:
**      None.
**
** Post-conditions:
**      None.
*/




    SET NOCOUNT ON

    /*
    ** Declarations.
    */

    DECLARE @FAIL smallint                      -- Failure code for RETURN.
    DECLARE @SUCCEED int                        -- Success code for RETURN.

    DECLARE @ProcedureName sysname              -- This procedure.

    /*
    ** Initialize the @ProcedureName for error messages.
    */

    SET @ProcedureName = OBJECT_NAME(@@PROCID)

    /*
    ** Initialize some constants.
    */

    SET @FAIL = 1
    SET @SUCCEED = 0

    /*
    ** Parameter Check:  @ParameterName
    ** Make sure that the @Parameter name exists if it is not NULL.
    */

    IF @ParameterName IS NOT NULL
        IF NOT EXISTS (SELECT *
                         FROM [dbo].[SystemParameters]
                        WHERE [ParameterType] = COALESCE(@ParameterType, '')
                          AND [ParameterName] = @ParameterName
						  AND [EnvironmentName] = @EnvironmentName)
            BEGIN
                RAISERROR (50009, 16, -1, @ProcedureName, @ParameterName)
                RETURN @FAIL
            END

    /*
    ** Set the parameter value.
    */

    IF @ParameterType IS NOT NULL
        IF @ParameterName IS NULL
            UPDATE [dbo].[SystemParameters]
               SET [ParameterValue_Current] = ParameterValue_New
             WHERE [ParameterType] = @ParameterType
			 AND [EnvironmentName] = @EnvironmentName
        ELSE
            UPDATE [dbo].[SystemParameters]
               SET [ParameterValue_Current] = ParameterValue_New
             WHERE [ParameterName] = @ParameterName
               AND [ParameterType] = @ParameterType
			   AND [EnvironmentName] = @EnvironmentName
    ELSE
        UPDATE [dbo].[SystemParameters]
           SET [ParameterValue_Current] = ParameterValue_New
		WHERE [EnvironmentName] = @EnvironmentName

    IF @@ERROR <> 0
        BEGIN
            RAISERROR (50001, 16, -1, @ProcedureName, '[dbo].[SystemParameters]')
            RETURN @FAIL
        END

    RETURN @SUCCEED
GO
PRINT N'Creating [dbo].[prc_AttributeGet]...';


GO
/*
declare @pHeader xml
declare @pValue nvarchar(1000)
exec dbo.prc_CreateHeader @pHeader out,-20,1,null,4,1
--select @pHeader
exec dbo.prc_AttributeGet @pValue out,@pHeader,'test'
select @pValue

*/
create procedure [dbo].[prc_AttributeGet] (
    @pValue nvarchar(max) output
   ,@pHeader xml([ETLController])
   ,@pName varchar(100) = null
) as
begin
/******************************************************************************
** File:	[prc_CounterGet].sql
** Name:	[dbo].[prc_CounterGet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Procedure/[prc_CounterGet].sql:

** Desc:	return Counter value to the client
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	10/30/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

set nocount on
declare @err                int
declare @proc               sysname
declare @msg                nvarchar(1000)
declare @debug              tinyint
declare @Options            int
declare @query              nvarchar(max)

declare @BatchID int
declare @StepID int
declare @RunID int
declare @ConstID int
declare @ProcErr int
declare @ProcName sysname

set @err = 0
set @proc = object_name(@@procid)
begin try

exec @ProcErr = dbo.[prc_ReadHeader] @pHeader,@BatchID out,@StepID out,@ConstID out,null,null,null
set @pValue = dbo.[fn_AttributeGet] (@BatchID,@StepID,@ConstID,@pName)

end try
begin catch
   set @Proc = ERROR_PROCEDURE()
   set @pValue = null
   set @Msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror ('ERROR: PROC %s, MSG: %s',11,11,@Proc,@Msg) 
end catch

return @err
end
GO
PRINT N'Creating [dbo].[prc_AttributeSet]...';


GO
/*
declare @pHeader xml
declare @pValue nvarchar(1000)
exec dbo.prc_CreateHeader @pHeader out,20,1,null,4,1
--select @pHeader
exec [dbo].[prc_AttributeSet] @pHeader,'TEST',null
exec dbo.prc_AttributeGet @pValue out,@pHeader,'TEST'
select @pValue
*/
create procedure [dbo].[prc_AttributeSet] (
        @pHeader xml([ETLController])
       ,@pName nvarchar(100)
       ,@pValue nvarchar(4000)
)
 as
begin
/******************************************************************************
** File:	[prc_AttributeSet].sql
** Name:	[dbo].[prc_AttributeSet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Function/prc_AttributeSet.sql:

** Desc:	set  user defined attribute value for batch/step/const combination
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	08/01/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/
set nocount on
declare @retcode int
declare @msg nvarchar(max)
declare @err int
declare @proc sysname

declare @BatchID int
declare @StepID int
declare @RunID int
declare @ConstID int
declare @ProcErr int
declare @ProcName sysname

set @retcode = 0
set @err = 0
set @proc = object_name(@@procid)
begin try
   exec @ProcErr = dbo.[prc_ReadHeader] @pHeader,@BatchID out,@StepID out,@ConstID out,null,null,null;
   exec @ProcErr = dbo.prc_ETLAttributeSet @BatchID,@StepID,@ConstID,@pName,@pValue;
end try
begin catch
   set @retcode = ERROR_NUMBER()
   set @msg = ERROR_MESSAGE()
   raiserror (@msg,11,11)
end catch
   return (@retcode)
end
GO
PRINT N'Creating [dbo].[prc_CounterSet]...';


GO
/*
declare @pHeader xml
declare @pCounters xml
declare @pValue nvarchar(1000)
exec dbo.prc_CreateHeader @pHeader out,-20,1,null,5,1
--select @pHeader
exec dbo.prc_CounterSet @pHeader,'test2','bbb'
exec dbo.prc_CounterGet @pValue out,@pHeader,'test2'
--select @pCounters
select @pValue

*/
create procedure [dbo].[prc_CounterSet] (
    @pHeader xml([ETLController])
   ,@pName varchar(100) = null
   ,@pValue nvarchar(max)

) as
begin
/******************************************************************************
** File:	[ETL_CounterSet].sql
** Name:	[dbo].[ETL_CounterSet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Procedure/[ETL_CounterSet].sql:

** Desc:	set client Counter value
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	10/30/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

set nocount on
declare @err                int
declare @proc               sysname
declare @msg                nvarchar(1000)
declare @debug              tinyint
declare @Options            int
declare @query              nvarchar(max)

declare @BatchID int
declare @StepID int
declare @RunID int
declare @LGRunID int
declare @ProcErr int
declare @ProcName sysname
declare @Counters xml(ETLController)

set @err = 0
begin try

exec @ProcErr = dbo.[prc_ReadHeader] @pHeader,@BatchID out,@StepID out,null,@RunID out,null,null

   if exists(select 1 from dbo.[ETLStepRunCounter]
                      where RunID = @RunID and StepID = @StepID
                        and BatchID = @BatchID and CounterName = @pName)
   begin
      if @pValue is null
      begin
         delete dbo.[ETLStepRunCounter]
          where RunID = @RunID and StepID = @StepID
            and BatchID = @BatchID and CounterName = @pName
         raiserror('record was deleted from dbo.ETLStepRunCounter',0,1)
      end
      else
      begin
         update dbo.[ETLStepRunCounter]
         set CounterValue = @pValue
          where RunID = @RunID and StepID = @StepID
            and BatchID = @BatchID and CounterName = @pName
         raiserror('record was updated in dbo.ETLStepRunCounter',0,1)
      end
   end
   else
   begin
      insert dbo.[ETLStepRunCounter]
      (RunID,StepID,CounterName,BatchID,CounterValue)
      values(@RunID,@StepID,@pName,@BatchID,@pValue)
      raiserror('record was inserted into dbo.ETLStepRunCounter',0,1)
   end


end try
begin catch
   set @Proc = ERROR_PROCEDURE()
   set @pValue = null
   set @Msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror ('ERROR: PROC %s, MSG: %s',11,11,@Proc,@Msg) 
end catch

return @err
end
GO
PRINT N'Creating [dbo].[prc_CreateProcessInfo]...';


GO
/*
declare @pHeader xml
declare @pProcessInfo xml
exec dbo.etl_CreateHeader @pHeader out,1,null,null,4,1
select @pHeader
exec dbo.etl_CreateProcessInfo @pProcessInfo out,@pHeader,'xxx'
select @pProcessInfo
*/
CREATE PROCEDURE [dbo].[prc_CreateProcessInfo]
    @pProcessInfo xml([ETLController]) output
   ,@pHeader xml([ETLController])
   ,@pMsg nvarchar(max)
   ,@pErr int = null
As
/******************************************************************
**D File:         etl_CreateProcessInfo.SQL
**
**D Desc:         return ProcessInfo object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)
DECLARE @Options int
DECLARE @debug tinyint
DECLARE @now nvarchar(30)
DECLARE @Prefix nvarchar(100)
DECLARE @BatchID int
DECLARE @StepID int

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0
SET @pErr = ISNULL(@pErr,0)

begin try

exec dbo.[prc_ReadHeader] @pHeader,@BatchID out,@StepID out,null,null,@Options out
set @debug = NULLIF(@Options & 1,0)

IF (@debug IS NOT NULL)
BEGIN
   --SET @Now = CONVERT(NVARCHAR(30),getdate(),121)
   SET @Prefix = CAST(isnull(@BatchID,0) as nvarchar(10)) + '.' + CAST(isnull(@StepID,0) as nvarchar(10))
               + ':' /*+ @@SERVERNAME + '.' + DB_NAME()*/ + 'SP=' + CAST(@@SPID AS nvarchar(10))
               + ':' + 'Er=' + CAST(@pErr AS nvarchar(10))
   --SET @pMsg =  'DEBUG(' + @@SERVERNAME + '.' + DB_NAME() + ' ID=' + CAST(@@SPID AS nvarchar(100)) + ':' + @Now + ') ' + isnull(@pMsg,'null')
   SET @pMsg =  'DEBUG(' + @Prefix + ') ' + isnull(@pMsg,'null')
   SET @pMsg =  isnull(@pMsg,'null')
END



SELECT @pProcessInfo = @pHeader.query('declare namespace etl="ETLController.XSD";
  <etl:ProcessInfo>
   {etl:Header}
   <etl:Message Error="{sql:variable("@pErr")}">{sql:variable("@pMsg")}</etl:Message>
  </etl:ProcessInfo>
')
 
 
 
end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_Print]...';


GO
/*
declare @m nvarchar(max)
declare @pHeader xml
declare @pProcessInfo xml
exec dbo.prc_CreateHeader @pHeader out,1,null,null,4,1
select @pHeader
exec dbo.prc_CreateProcessInfo @pProcessInfo out,@pHeader,'xxx'
select @pProcessInfo
exec dbo.prc_Print @pProcessInfo
*/

CREATE PROCEDURE [dbo].[prc_Print]
      @pProcessInfo xml([ETLController])
     ,@pConversation uniqueidentifier = NULL
     ,@pConversationGrp uniqueidentifier = NULL
As
/******************************************************************
**D File:         prc_Print.SQL
**
**D Desc:         Print or Send a processing Info message
**
**D Auth:         andreys
**D Date:         10/27/2007
**
** Param:
        @pProcessInfo       - message object
        @pConversation      - conversation handle to send the message
        @pConversationGrp   - conversation group handle
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @Now nvarchar(30)
DECLARE @msg nvarchar(max)
DECLARE @RunID int
DECLARE @BatchID int
DECLARE @StepID int
DECLARE @Options int
DECLARE @debug int
DECLARE @Header xml(ETLController)

SET @Err = 0
-------------------------------------------------------------------
--Return Statuses
--2 - Success
--3 - Failure
--4 - Error
-------------------------------------------------------------------
BEGIN TRY
-- DE should be provided with Master Srv and Dd which will not work with send
-- since conversation handle comes from Slave
-- disable send and rely on standard output for Master Print instead
-- and use send on Slave only. Slave node should not do table insert
set @pConversation = null;
IF (@pConversation IS NOT NULL)
BEGIN

   --RAISERROR ('not implemented',0,1) WITH NOWAIT
  ;SEND ON CONVERSATION @pConversation
   MESSAGE TYPE [ETLController_InfoMessage]
      (CAST(@pProcessInfo AS varbinary(max)));

END
ELSE
BEGIN
   exec dbo.[prc_ReadProcessInfo] @pProcessInfo,@Header out,@msg out,@Err out;
   exec dbo.[prc_ReadHeader] @Header,@BatchID out,@StepID out,null,@RunID out,@Options out;

   SET @debug = ISNULL(@Options & 1,0);
   IF (isnull(@RunID,0) <> 0 OR @debug = 1)
   BEGIN
     --PRINT @msg;

     INSERT dbo.[ETLStepRunHistoryLog]
      (RunID,BatchID,StepID,LogDT,Err,LogMessage)
     VALUES(@RunID,isnull(@BatchID,0),isnull(@StepID,0),getdate(),isnull(@Err,0),@msg);
   END
     
   SET @Err = 0;
END

END TRY
BEGIN CATCH
    SET @Err = ERROR_NUMBER();
    SET @msg = ERROR_MESSAGE();
    RAISERROR('Error %d %s',11,11,@Err,@msg);
END CATCH

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ReadContextAttributes]...';


GO
/*
declare @pHeader xml
declare @pContext xml
declare @pProcessRequest xml
declare @pAttributes xml
exec dbo.prc_CreateHeader @pHeader out,301,2,null,4,15
exec dbo.prc_CreateContext @pContext out,@pHeader
select @pcontext
exec dbo.prc_CreateProcessRequest @pProcessRequest out,@pHeader,@pContext
select @pProcessRequest
exec dbo.prc_ReadContextAttributes @pProcessRequest,@pAttributes out
select @pAttributes
*/
CREATE PROCEDURE [dbo].[prc_ReadContextAttributes]
    @pProcessRequest xml([ETLController])
   ,@pAttributes xml([ETLController]) = null output
As
/******************************************************************
**D File:         prc_ReadContextAttributes.SQL
**
**D Desc:         create Attributes object for a Context
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
**  05/21/2008       andreys            add etl namespace to system attributes
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

DECLARE @BatchID int
DECLARE @StepID int
DECLARE @ConstID int
DECLARE @RunID int
DECLARE @Options int
DECLARE @debug tinyint
DECLARE @Handle uniqueidentifier

declare @Name nvarchar(100)
declare @Value1 nvarchar(max)
declare @Value2 nvarchar(max)
declare @nValue nvarchar(max)
declare @id int

DECLARE @Header xml(ETLController)
DECLARE @Context xml(ETLController)
DECLARE @ProcessInfo xml(ETLController)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

declare @attr table(id int identity(1,1),AttributeName nvarchar(100),AttributeValue nvarchar(max) null,CompleteFlag tinyint null)
declare @ab table (aid int,bid int,isexec tinyint)

begin try
exec @ProcErr = dbo.[prc_ReadProcessRequest] @pProcessRequest,@Header out,@Context out,@Handle out
exec @ProcErr = dbo.[prc_ReadHeader] @Header,@BatchID out,@StepID out,@ConstID out,@RunID out,@Options out

set @debug = nullif(@Options & 1,0)
IF (@debug IS NOT NULL)
BEGIN
   SET @msg = 'BEGIN Procedure ' + @ProcName
                           + ' with @BatchID=' + CAST(@BatchID AS nvarchar(30))
                           + ISNULL( ', @StepID=' +CAST(@StepID AS nvarchar(30)),'')
                           + ISNULL( ', @ConstID=' +CAST(@ConstID AS nvarchar(30)),'')

   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
END

if (@ConstID is not null and @StepID is null)
begin
   ;with xmlnamespaces('ETLController.XSD' as etl)
   insert @attr (AttributeName,AttributeValue)
   select cba.ba.value('@Name[1]','nvarchar(100)'),cba.ba.value('(.)[1]','nvarchar(max)')
     from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]
/etl:Constraints/etl:Constraint[@ConstID=(sql:variable("@ConstID"))]/etl:Attributes') cb(b)
   cross apply cb.b.nodes('./etl:Attribute') cba(ba)

--system batch constraint attributes
   ;with xmlnamespaces('ETLController.XSD' as etl)
   insert @attr (AttributeName,AttributeValue)
   select cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)'),cba.ba.value('string(.)','nvarchar(max)')
     from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]
/etl:Constraints/etl:Constraint[@ConstID=(sql:variable("@ConstID"))]') cb(b)
   cross apply cb.b.nodes('./@*') cba(ba)
   left join @attr a on a.AttributeName = cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)')
   where a.AttributeName is null

end
else if (@ConstID is not null)
begin
   ;with xmlnamespaces('ETLController.XSD' as etl)
   insert @attr (AttributeName,AttributeValue)
   select cba.ba.value('@Name[1]','nvarchar(100)'),cba.ba.value('(.)[1]','nvarchar(max)')
     from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]
/etl:Steps/etl:Step[@StepID=(sql:variable("@StepID"))]
/etl:Constraints/etl:Constraint[@ConstID=(sql:variable("@ConstID"))]/etl:Attributes') cb(b)
   cross apply cb.b.nodes('./etl:Attribute') cba(ba)

--system step constraint attributes
   ;with xmlnamespaces('ETLController.XSD' as etl)
   insert @attr (AttributeName,AttributeValue)
   select cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)'),cba.ba.value('string(.)','nvarchar(max)')
     from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]
/etl:Steps/etl:Step[@StepID=(sql:variable("@StepID"))]
/etl:Constraints/etl:Constraint[@ConstID=(sql:variable("@ConstID"))]') cb(b)
   cross apply cb.b.nodes('./@*') cba(ba)
   left join @attr a on a.AttributeName = cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)')
   where a.AttributeName is null
end

if(@StepID is not null)
begin
   ;with xmlnamespaces('ETLController.XSD' as etl)
   insert @attr (AttributeName,AttributeValue)
   select cba.ba.value('@Name[1]','nvarchar(100)'),cba.ba.value('(.)[1]','nvarchar(max)')
     from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]
/etl:Steps/etl:Step[@StepID=(sql:variable("@StepID"))]/etl:Attributes') cb(b)
   cross apply cb.b.nodes('./etl:Attribute') cba(ba)
   left join @attr a on a.AttributeName = cba.ba.value('@Name[1]','nvarchar(100)')
   where a.AttributeName is null

--system step attributes
   ;with xmlnamespaces('ETLController.XSD' as etl)
   insert @attr (AttributeName,AttributeValue)
   select cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)'),cba.ba.value('string(.)','nvarchar(max)')
     from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]
/etl:Steps/etl:Step[@StepID=(sql:variable("@StepID"))]') cb(b)
   cross apply cb.b.nodes('./@*') cba(ba)
   left join @attr a on a.AttributeName = cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)')
   where a.AttributeName is null

end

;with xmlnamespaces('ETLController.XSD' as etl)
insert @attr (AttributeName,AttributeValue)
select cba.ba.value('@Name[1]','nvarchar(100)'),cba.ba.value('(.)[1]','nvarchar(max)')
  from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]/etl:Attributes') cb(b)
cross apply cb.b.nodes('./etl:Attribute') cba(ba)
left join @attr a on a.AttributeName = cba.ba.value('@Name[1]','nvarchar(100)')
 where a.AttributeName is null

--system batch attributes
;with xmlnamespaces('ETLController.XSD' as etl)
insert @attr (AttributeName,AttributeValue)
select cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)'),cba.ba.value('string(.)','nvarchar(max)')
  from @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
cross apply cb.b.nodes('./@*') cba(ba)
left join @attr a on a.AttributeName = cba.ba.value('concat("etl:",local-name(.))','nvarchar(100)')
where a.AttributeName is null

declare @inputoptions nvarchar(1000)
set @inputoptions = case when @options & 1 = 1 then 'debug' else '' end
+ case when @options & 2 = 2 then ',forcestart' else '' end

--legacy system attributes
insert @attr (AttributeName,AttributeValue)
select '@BatchID',cast(@BatchID as nvarchar(100))
union select '@StepID',cast(@StepID as nvarchar(100))
union select '@ConstID',cast(@ConstID as nvarchar(100))
union select '@RunID',cast(@RunID as nvarchar(100))
union select '@Options',cast(@inputoptions as nvarchar(100))
union select '@Handle',cast(@handle as nvarchar(100))
union select '@etl:RunID',cast(@RunID as nvarchar(100))


-------------------------------------------------------------------
--relationship table
-------------------------------------------------------------------
insert @ab
select a.id,b.id,0
  from @attr a
  join @attr b on charindex('<' + a.AttributeName + '>',b.AttributeValue) > 0
union all select a.id,b.id,1
  from @attr a
  join @attr b on charindex('<' + a.AttributeName + '*>',b.AttributeValue) > 0

-------------------------------------------------------------------
--replace dynamic parameters if any
-------------------------------------------------------------------
WHILE (1=1)
BEGIN
    SET @id = null
    SELECT top(1) @id = t.id
                 ,@Name = t.AttributeName
                 ,@Value1 = t.AttributeValue
      FROM @attr t
      WHERE t.CompleteFlag IS NULL
        AND NOT EXISTS(SELECT 1 FROM @ab t1
                         JOIN @attr t2 ON t1.aid = t2.id WHERE  t.id = t1.bid AND t2.CompleteFlag IS NULL) --no parents
        AND EXISTS(SELECT 1 FROM @ab t2 WHERE  t.id = t2.aid) --have children
      order by t.id

    IF (@id is null)
       BREAK


    update a set a.AttributeValue = REPLACE(a.AttributeValue,'<' + @Name + '>',isnull(@Value1,''))
      from @attr a
      join @ab ab on a.id = ab.bid and ab.aid = @id and ab.isexec = 0


   --execute value to get the value
   IF (@Value1 is not null
       AND EXISTS(SELECT 1 FROM @ab ab WHERE ab.aid = @id and ab.isexec = 1))
   BEGIN
      SET @nValue = 'select top 1 @value = (' + @Value1 + ')'

	  IF (@debug IS NOT NULL)
	  BEGIN
		  SET @msg = 'Evaluate attribute: ' + @Name + ' = ' + @Value1
		  exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
		  exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
	  END

      SET @Value2 = null
      EXEC sp_executesql @nValue,N'@value varchar(max) output',@value = @value2 out

      update a set a.AttributeValue = REPLACE(a.AttributeValue,'<' + @Name + '*>',isnull(@Value2,''))
        from @attr a
        join @ab ab on a.id = ab.bid and ab.aid = @id and ab.isexec = 1
   END


   update @attr set CompleteFlag = 1 where id = @id
END


;with xmlnamespaces('ETLController.XSD' as etl)
select @pAttributes = 
 (select a.AttributeName as '@Name',a.AttributeValue as '*' from @attr a
     for xml path('etl:Attribute'),root('etl:Attributes'),type)

if @pAttributes is null
   set @pAttributes = '<etl:Attributes xmlns:etl="ETLController.XSD" />'

IF (@debug IS NOT NULL)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
END

end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pAttributes = null
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_RemoveContext]...';


GO
/*

declare @Header xml
declare @pBatchName nvarchar(30)
set @pBatchName = 'xxx' 
exec prc_RemoveContext @pBatchName,null,'debug'
*/
CREATE PROCEDURE [dbo].[prc_RemoveContext]
    @pBatchName nvarchar(30)
   ,@pHandle uniqueidentifier = null 
   ,@pOptions nvarchar(100) = null
As
/******************************************************************
**D File:         prc_PersistContext.SQL
**
**D Desc:         create persist context into ETLBatch tables
**
** @Options       debug

**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)
DECLARE @trancount int
DECLARE @debug tinyint

DECLARE @BatchID int

DECLARE @Header xml(ETLController)
DECLARE @ProcessInfo xml(ETLController)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0
SET @trancount = @@trancount


begin try
set @debug = case when charindex('debug',@pOptions) > 0 then 1 else 0 end

select @BatchID = BatchID
  from dbo.[ETLBatch] where BatchName = @pBatchName

if (@BatchID is null)
BEGIN
   --SET @Err = 50101
   --SET @msg = '   ERROR pContext: BatchName=' + @pBatchName + ' not found'
   --RAISERROR(@msg,11,11)
   --batch not found and nothing to remove
   SET @msg = '   WARNING pContext: BatchName=' + @pBatchName + ' not found'
   RAISERROR(@msg,0,1)
   RETURN @Err 
END

exec [prc_CreateHeader] @Header out,@BatchID,null,null,0,@debug,15
if (@debug = 1)
begin
   SET @msg =  'BEGIN Procedure ' + @ProcName + ' for BatchName=' + isnull(@pBatchName,'NULL')
            + ' (' + isnull(cast(@BatchID as nvarchar(10)),'NULL') + ')'

   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--BEGIN TRAN

   delete dbo.[ETLStepConstraintAttribute] where BatchID = @BatchID
   delete dbo.[ETLStepConstraint] where BatchID = @BatchID
   delete dbo.[ETLStepAttribute] where BatchID = @BatchID
   delete dbo.[ETLStep] where BatchID = @BatchID
   delete dbo.[ETLBatchConstraintAttribute] where BatchID = @BatchID
   delete dbo.[ETLBatchConstraint] where BatchID = @BatchID
   delete dbo.[ETLBatchAttribute] where BatchID = @BatchID
   delete dbo.[ETLBatch] where BatchID = @BatchID

--COMMIT TRAN

IF (@debug = 1)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
END

end try
begin catch
   if @Trancount < @@trancount
      ROLLBACK TRAN

   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_StatusCheck]...';


GO
/*
select * from ETLSteprunhistory where batchid = -20

declare @pHeader xml
exec dbo.prc_CreateHeader @pHeader out,-20,null,null,6,1
exec dbo.prc_AttributeSet @pHeader,'CheckRunID',6

declare @pHeader xml
declare @pContext xml
declare @pProcessRequest xml
declare @pProcessReceipt xml
exec dbo.prc_CreateHeader @pHeader out,-20,1,null,5,1
exec dbo.prc_CreateContext @pContext out,@pHeader
exec dbo.prc_CreateProcessRequest @pProcessRequest out,@pHeader,@pContext
--select @pProcessRequest
exec dbo.prc_StatusCheck @pProcessRequest,@pProcessReceipt out
select @pProcessReceipt
*/
CREATE PROCEDURE [dbo].[prc_StatusCheck]
    @pRequest xml([ETLController])
   ,@pReceipt  xml([ETLController]) = NULL OUTPUT
As
/******************************************************************
**D File:         prc_StatusCheck.SQL
**
**D Desc:         Check execution Status of the request
**
**D Auth:         andreys
**D Date:         10/28/2007
**
** Param: @pRequest  - BatchID info
                  @pReceipt results (StatusID - 2 - SUCCESS, 3 - FAILURE, 4 - ERROR, 6 - FAILURE_IMMEDIATE) (OUTPUT only)
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @ProcName sysname
DECLARE @StatusID tinyint
DECLARE @msg nvarchar(max)
DECLARE @ErrMsg nvarchar(max)
DECLARE @BatchID int
DECLARE @StepID int
DECLARE @ConstID int
DECLARE @debug tinyint
DECLARE @handle uniqueidentifier
DECLARE @Value varchar(1000)
DECLARE @nValue nvarchar(max)
DECLARE @RunID int
DECLARE @Options int

DECLARE @CheckRunID int
DECLARE @CheckBatchID int
DECLARE @CheckStepID int
DECLARE @CheckBatchName nvarchar(100)
DECLARE @CheckStepName nvarchar(100)
DECLARE @CheckContext nvarchar(100)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

DECLARE @STAT_SUCCESS TINYINT
DECLARE @STAT_FAILURE TINYINT
DECLARE @STAT_ERROR TINYINT
DECLARE @STAT_FAILURE_IMMEDIATE TINYINT

SET @STAT_SUCCESS = 2
SET @STAT_FAILURE = 3
SET @STAT_ERROR = 4
SET @STAT_FAILURE_IMMEDIATE = 6
-------------------------------------------------------------------
--Return Statuses
--2 - Success
--3 - Failure
--4 - Error
--6 - failure and exit
-------------------------------------------------------------------
DECLARE @Request AS xml (ETLController)
DECLARE @Receipt AS xml (ETLController)
DECLARE @Header AS xml (ETLController)
DECLARE @Context AS xml (ETLController)
DECLARE @ProcessInfo AS xml (ETLController)
DECLARE @Attributes AS xml (ETLController)

begin try
exec @ProcErr = dbo.[prc_ReadProcessRequest] @pRequest,@Header out,@Context out,@handle out
exec @ProcErr = dbo.[prc_ReadHeader] @Header,@BatchID out,@StepID out,null,@RunID out,@Options out

set @debug = nullif(@Options & 1,0)
IF (@debug IS NOT NULL)
BEGIN
   SET @msg = 'BEGIN Procedure ' + @ProcName
                           + ' with @BatchID=' + CAST(@BatchID AS nvarchar(30))
                           + ISNULL( ', @StepID=' +CAST(@StepID AS nvarchar(30)),'')
                           + ISNULL( ', @RunID=' +CAST(@RunID AS nvarchar(30)),'')

   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
END


-------------------------------------------------------------------
--Retrieve Attributes
-------------------------------------------------------------------
exec @ProcErr = dbo.[prc_ReadContextAttributes] @pRequest,@Attributes out

exec @ProcErr = dbo.prc_ReadAttribute @Attributes,'CheckContext',@CheckContext out
if (@CheckContext is null)
   set @CheckContext = 'Current'

exec @ProcErr = dbo.prc_ReadAttribute @Attributes,'CheckBatchID',@CheckBatchID out
if (@CheckBatchID is null)
begin
   exec @ProcErr = dbo.prc_ReadAttribute @Attributes,'CheckBatchName',@CheckBatchName out
   select @CheckBatchID = BatchID from dbo.[ETLBatch] where BatchName = @CheckBatchName
   IF (@CheckBatchID is null and @CheckBatchName is not null)
   BEGIN
     SET @ErrMsg = '   ERROR 50110: unknown CheckBatchName ' + @CheckBatchName
     SET @StatusID = @STAT_ERROR
     SET @Err = 50110
     raiserror (@ErrMsg,11,11)
   END
end

if (@CheckBatchID is null)
   set @CheckBatchID = @BatchID


exec @ProcErr = dbo.prc_ReadAttribute @Attributes,'CheckRunID',@CheckRunID out
if (@CheckRunID is null)
begin
   if (@CheckBatchID = @BatchID)
      set @CheckRunID = @RunID
   else
      select @CheckRunID = max(RunID) from dbo.[ETLBatchRun] where BatchID = @CheckBatchID
end


if (@CheckContext = 'Step' or (@CheckContext = 'Current' and @StepID is not null))
begin
   exec @ProcErr = dbo.prc_ReadAttribute @Attributes,'CheckStepID',@CheckStepID out
   if (@CheckStepID is null)
   begin
      exec @ProcErr = dbo.prc_ReadAttribute @Attributes,'CheckStepName',@CheckStepName out
      select @CheckStepID = StepID from dbo.[ETLStep] where BatchID = @CheckBatchID and StepName = @CheckStepName
      IF (@CheckStepID is null and @CheckStepName is not null)
      BEGIN
        SET @ErrMsg = '   ERROR 50110: unknown CheckStepName ' + @CheckStepName
        SET @StatusID = @STAT_ERROR
        SET @Err = 50110
        raiserror (@ErrMsg,11,11)
      END
   end

   if (@CheckStepID is null)
      set @CheckStepID = @StepID
end

if (@CheckBatchID = @BatchID and @CheckStepID = @StepID and @CheckRunID = @RunID)
begin
   SET @ErrMsg = '   ERROR 50110: check information is required: BATCHID/BATCHNAME;STEPID/STEPNAME;RUNID'
   SET @StatusID = @STAT_ERROR
   SET @Err = 50110
   raiserror (@ErrMsg,11,11)
end
----------------------------------------------------------------------------------
--Checking...
----------------------------------------------------------------------------------
--checking Batch
if (@CheckStepID is null)
begin
   SELECT @StatusID = StatusID
     FROM dbo.[ETLBatchRun] r
    WHERE r.RunID = @CheckRunID
      AND r.BatchID = @CheckBatchID

   IF (@debug IS NOT NULL)
   BEGIN
      SET @msg = '   Check: BatchID=' + cast(@CheckBatchID as nvarchar(30))
               + ',RunpID=' + cast(@CheckRunID as nvarchar(30))
               + ',Status=' + isnull(cast(@StatusID as varchar(10)),'null') 
      exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
      exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
   END

   SET @StatusID =
               CASE
                  WHEN @StatusID = 1 THEN @STAT_FAILURE --running
                  WHEN @StatusID in (0,2) THEN @STAT_SUCCESS      --finished with success or never been run
                  WHEN @StatusID in (3,4) THEN @STAT_FAILURE_IMMEDIATE --failed
                  ELSE @STAT_SUCCESS --not found therefore no reason to wait
                END
end
--checking Step
else
begin
   if (@CheckRunID = @RunID)
      SELECT @StatusID = StatusID
        FROM dbo.[ETLStepRun] r
       WHERE r.RunID = @CheckRunID
         AND r.BatchID = @CheckBatchID
         AND r.StepID = @CheckStepID
   else
      SELECT @StatusID = StatusID
        FROM dbo.[ETLStepRunHistory] r
       WHERE r.RunID = @CheckRunID
         AND r.BatchID = @CheckBatchID
         AND r.StepID = @CheckStepID


   IF (@debug IS NOT NULL)
   BEGIN
      SET @msg = '   Check: BatchID=' + cast(@CheckBatchID as nvarchar(30))
               + ',StepID=' + cast(@CheckStepID as nvarchar(30))
               + ',RunpID=' + cast(@CheckRunID as nvarchar(30))
               + ',Status=' + isnull(cast(@StatusID as varchar(10)),'null') 
      exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
      exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
   END

   SET @StatusID =
               CASE
                  WHEN @StatusID in (0,1) THEN @STAT_FAILURE --running or not started
                  WHEN @StatusID = 2 THEN @STAT_SUCCESS      --finished with success
                  WHEN @StatusID in (3,4) THEN @STAT_FAILURE_IMMEDIATE --failed
                  ELSE @STAT_SUCCESS --not found therefore no reason to wait
                END
end

end try
begin catch
set @err = error_number()
set @ErrMsg = isnull(@ErrMsg,error_message())
IF (@ErrMsg IS NOT NULL)
BEGIN
   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@ErrMsg,@Err
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
END
set @StatusID = @STAT_FAILURE_IMMEDIATE
end catch

if (@pReceipt is null)
   exec @ProcErr = dbo.prc_CreateProcessReceipt @pReceipt out,@Header,@StatusID,@Err,@ErrMsg

IF (@debug IS NOT NULL)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@handle
END
RETURN @Err
GO
PRINT N'Creating [dbo].[prc_SystemParameterLet]...';


GO

CREATE PROCEDURE [dbo].[prc_SystemParameterLet] (
        @ParameterType varchar(32)				 -- The system parameter category.
      , @ParameterName varchar(57)				 -- The system parameter name.
      , @ParameterValue varchar(1024)			 -- The new setting.
      , @ParameterDefault varchar(1024) = NULL   -- The default setting.
      , @ParameterDesc varchar(1024) = NULL    -- Parameter description
      , @LastModifiedDtim datetime = NULL -- Last updated date/time.
      , @AffectiveImmediately bit = 0            -- 0= update later, 1= update now.
	  , @EnvironmentName VARCHAR(100) = 'All'  --The environment Name for which this variable is defined
    ) AS

/*
** Name:  [dbo].[prc_SystemParameterLet]
**
** $Workfile: prc_systemparameterlet.sql $
** $Archive: /Development/SubjectAreas/Dimensions20/Database/Schema/Procedure/prc_systemparameterlet.sql $
**
** Purpose:
**      This script creates a stored procedure to set a system parameter to
**  a new value.
**
** $Author: Karlj $
** $Revision: 3 $
** $BuildVersion: $
**
** Pre-conditions:
**      The SystemParameters table must exist as well as the specified
**  parameter.
**
** Input Arguments:
**
**      Name:         @ParameterType
**      Datatype:     udt_ParameterType
**      Default:      None
**      Description:  The name of the system parameter category.
**
**      Name:         @ParameterName
**      Datatype:     udt_ParameterName
**      Default:      None
**      Description:  The name of the system parameter to set.
**
**      Name:         @ParameterValue
**      Datatype:     udt_ParameterValue
**      Default:      None
**      Description:  The new value for the system parameter.
**
**      Name:         @ParameterDefault
**      Datatype:     udt_ParameterValue
**      Default:      NULL
**      Description:  The default value for the system parameter.
**
**      Name:         @ParameterDesc
**      Datatype:     udt_Description
**      Default:      NULL
**      Description:  The description of the system parameter.
**
**      Name:         @LastModifiedDtim
**      Datatype:     udt_UpdatedTime
**      Default:      NULL
**      Description:  The last time the record was modified.  Optional
**                    Use this to guarantee the record wasn't modified
**                    since it was fetched to the client.
**
**      Name:         @AffectiveImmediately
**      Datatype:     bit
**      Default:      0 (update later)
**      Description:  If 1 then update immediately, otherwise dbo
**                    must issue [dbo].[prc_SystemParameterSet] to commit.
**
**      Name:         @EnvironmentName
**      Datatype:     VARCHAR(100)
**      Default:      All
**      Description:  The name of the Environment where this parameter applies.
**                    
**
** Output Arguments:
**      None.
**
** Return Code:
**      0 = SUCCEED
**      1 = FAILURE
**
** Results Set:
**      None.
**
** Post-conditions:
**      Run [dbo].[prc_SystemParameterSet] to make the changes active within
**  the system.
*/

    SET NOCOUNT ON

    /*
    ** Declarations.
    */

    DECLARE @FAIL smallint                      -- Failure code for RETURN.
    DECLARE @SUCCEED int                        -- Success code for RETURN.

    DECLARE @ProcedureName sysname              -- This procedure.
    DECLARE @RetCode int                        -- Procedure return code.

    /*
    ** Initialize the @ProcedureName for error messages.
    */

    SET @ProcedureName = OBJECT_NAME(@@PROCID)

    /*
    ** Initialize some constants.
    */

    SET @FAIL = 1
    SET @SUCCEED = 0

    /*
    ** Parameter Check:  @ParameterName
    ** Make sure that the @Parameter name exists and is not NULL.
    */

    IF @ParameterName IS NULL
        BEGIN
            RAISERROR (50008, 16, -1, @ProcedureName, '@ParameterName')
            RETURN @FAIL
        END

    /*
    ** Parameter Check:  @ParameterType
    ** Make sure that the parameter category exists and is not NULL.
    */

    IF @ParameterType IS NULL
        BEGIN
            RAISERROR (50008, 16, -1, @ProcedureName, '@ParameterType')
            RETURN @FAIL
        END

    /*
    ** If this is a new parameter, let's create it in the table.
    */

    IF NOT EXISTS (SELECT *
                     FROM [dbo].[SystemParameters]
                    WHERE [ParameterType] = @ParameterType
                      AND [ParameterName] = @ParameterName
					  AND [EnvironmentName] = @EnvironmentName)
        BEGIN

            INSERT INTO [dbo].[SystemParameters] (
                [ParameterType]
              , [ParameterName]
              , [ParameterValue_Current]
              , [ParameterValue_New]
              , [ParameterValue_Default]
              , [ParameterDesc]
			  , [EnvironmentName]
              , [LastModifiedBy]
              , [LastModifiedDtim]
            ) VALUES (
                @ParameterType
              , @ParameterName
              , NULL
              , NULL
              , @ParameterDefault
              , @ParameterDesc
              , @EnvironmentName
			  , SUSER_SNAME()
              , CURRENT_TIMESTAMP
            )

            IF @@ERROR <> 0
                BEGIN
                    RAISERROR (50003, 16, -1, @ProcedureName, '[dbo].[SystemParameters]')
                    RETURN @FAIL
                END
        END

    /*
    ** Before we update, let's make sure someone else hasn't already updated!
    */

    IF @LastModifiedDtim IS NOT NULL
        BEGIN
            IF NOT EXISTS (
                SELECT *
                  FROM [dbo].[SystemParameters]
                 WHERE [ParameterName] = @ParameterName
                   AND [ParameterType] = @ParameterType
                   AND CONVERT(varchar, [LastModifiedDtim], 121) = CONVERT(varchar, @LastModifiedDtim, 121)
                )
                BEGIN
                    RAISERROR (50030, 16, -1, @ProcedureName)
                    RETURN @FAIL
                END
        END

    /*
    ** Set the parameter value.
    */

    UPDATE [dbo].[SystemParameters]
      WITH (HOLDLOCK)
       SET [ParameterValue_New] = @ParameterValue
         , [LastModifiedBy] = SUSER_SNAME()
         , [LastModifiedDtim] = GETDATE()
     WHERE [ParameterName] = @ParameterName
       AND [ParameterType] = @ParameterType
	   AND [EnvironmentName] = @EnvironmentName

    IF @@ERROR <> 0
        BEGIN
            RAISERROR (50001, 16, -1, @ProcedureName, '[dbo].[SystemParameters]')
            RETURN @FAIL
        END

    /*
    ** Commit if necessary.
    */

    IF @AffectiveImmediately = 1
        BEGIN

            EXECUTE @RetCode = [dbo].[prc_SystemParameterSet]
                @ParameterType = @ParameterType
              , @ParameterName = @ParameterName
			  , @EnvironmentName = @EnvironmentName;

            IF @@ERROR <> 0
                BEGIN
                    RAISERROR (50017, 16, -1, @ProcedureName, '[dbo].[prc_SystemParameterSet]')
                    RETURN @FAIL
                END

            IF @RetCode <> 0 RETURN @FAIL

        END

    RETURN @SUCCEED
GO
PRINT N'Creating [dbo].[prc_ApplicationLog]...';


GO
/*
exec dbo.prc_ApplicationLog 'test message',1,1,1,1
*/

CREATE PROCEDURE [dbo].[prc_ApplicationLog]
      @pMessage nvarchar(max)
     ,@pErr int = null
     ,@pBatchId int = null
     ,@pStepId int = null
     ,@pRunId int = 0
     ,@pConversation uniqueidentifier = NULL
     ,@pConversationGrp uniqueidentifier = NULL
     ,@pOptions nvarchar(100) = null
As
/******************************************************************
**D File:         prc_ApplicationLog.SQL
**
**D Desc:         Log external message
**
**D Auth:         andreys
**D Date:         06/27/2009
**
** Param:
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @Now nvarchar(30)
DECLARE @msg nvarchar(max)
DECLARE @RunID int
DECLARE @BatchID int
DECLARE @StepID int
DECLARE @Options int
DECLARE @debug int
DECLARE @Header xml(ETLController)
DECLARE @ProcessInfo xml(ETLController)

SET @Err = 0
-------------------------------------------------------------------
--Return Statuses
--2 - Success
--3 - Failure
--4 - Error
-------------------------------------------------------------------
BEGIN TRY
    

set @BatchID = ISNULL(@pBatchID,0)
set @StepID = ISNULL(@pStepID,0)
set @RunID = ISNULL(@pRunID,0)
set @debug = CASE WHEN CHARINDEX('debug',@pOptions) > 0 THEN 1 ELSE 0 END;


--use conversation only for Slave; use table insert for master
set @pConversation = NULL;
IF (@pConversation IS NOT NULL)
BEGIN
   exec dbo.[prc_CreateHeader] @Header out,@BatchId,@StepId,null,@RunId,@debug
   exec dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@pMessage,@pErr

   --RAISERROR ('not implemented',0,1) WITH NOWAIT
  ;SEND ON CONVERSATION @pConversation
   MESSAGE TYPE [ETLController_InfoMessage]
      (CAST(@ProcessInfo AS varbinary(max)))

END
ELSE
BEGIN

   if (@debug = 1)
      PRINT @pMessage;
      
   IF (isnull(@RunID,0) <> 0)
     INSERT dbo.[ETLStepRunHistoryLog]
      (RunID,BatchID,StepID,LogDT,Err,LogMessage)
     VALUES(@RunID,isnull(@BatchID,0),isnull(@StepID,0),getdate(),isnull(@pErr,0),@pMessage)
END

END TRY
BEGIN CATCH
    SET @Err = ERROR_NUMBER()
    SET @msg = ERROR_MESSAGE()
    RAISERROR('Error %d %s',10,11,@Err,@msg)
END CATCH

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_ConstraintCheck]...';


GO
/*
declare @BatchID int
set @BatchID = 310
declare @pHeader xml
declare @pContext xml
declare @pProcessRequest xml
declare @pProcessReceipt xml
exec dbo.prc_CreateHeader @pHeader out,@BatchID,1,1,138,1
exec dbo.prc_CreateContext @pContext out,@pHeader
exec dbo.prc_CreateProcessRequest @pProcessRequest out,@pHeader,@pContext
--select @pProcessRequest
exec dbo.prc_ConstraintCheck @pProcessRequest,@pProcessReceipt out
--select @pProcessReceipt
*/
CREATE PROCEDURE [dbo].[prc_ConstraintCheck]
    @pRequest xml([ETLController])
   ,@pReceipt  xml([ETLController]) = NULL OUTPUT
As
/******************************************************************
**D File:         prc_ConstraintCheck.SQL
**
**D Desc:         Check Constraints
**
**D Auth:         andreys
**D Date:         10/30/2007
**
** Param: @pRequest  - BatchID info
                  @pReceipt results (StatusID - 2 - SUCCESS, 3 - FAILURE) (OUTPUT only)
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
**  2010/07/12       andrey@biasintelligence.com           stop constraint processing on ExitEvent
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ExitCode INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @StartDT datetime
DECLARE @BatchID INT
DECLARE @StepID INT
DECLARE @ConstID int
DECLARE @StatusID tinyint
DECLARE @BatchStatusID tinyint
DECLARE @debug tinyint
DECLARE @Options int
DECLARE @msg nvarchar(max)
DECLARE @RaiserrMsg nvarchar(max)
DECLARE @handle uniqueidentifier
DECLARE @RunID int
DECLARE @Scope int

DECLARE @Process nvarchar(max)
DECLARE @WaitPeriod int    -- in seconds
DECLARE @Wait varchar(20)
DECLARE @Disabled int

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ExitCode = 0

DECLARE @ATT_PING INT

DECLARE @STAT_SUCCESS TINYINT
DECLARE @STAT_FAILURE TINYINT
DECLARE @STAT_ERROR TINYINT
DECLARE @STAT_FAILURE_IMMEDIATE TINYINT

SET @STAT_SUCCESS = 2
SET @STAT_FAILURE = 3
SET @STAT_ERROR = 4
SET @STAT_FAILURE_IMMEDIATE = 6
-------------------------------------------------------------------
--Return Statuses
--2 - Success
--3 - Failure
--4 - Error
--5 - Failure with abort
-------------------------------------------------------------------
DECLARE @ProcessInfo AS xml (ETLController)
DECLARE @Header AS xml (ETLController)
DECLARE @Context AS xml (ETLController)
DECLARE @cHeader AS xml (ETLController)
DECLARE @cRequest AS xml (ETLController)
DECLARE @cReceipt AS xml (ETLController)

BEGIN TRY

exec @ExitCode = dbo.[prc_ReadProcessRequest] @pRequest,@Header out,@Context out,@handle out
exec @ExitCode = dbo.[prc_ReadHeader] @Header,@BatchID out,@StepID out,null,@RunID out,@Options out,@Scope out

set @debug = isnull(@Options & 1,0)
IF (@debug = 1)
BEGIN
   SET @msg = 'BEGIN Procedure ' + @ProcName
                           + ' with @BatchID=' + CAST(@BatchID AS nvarchar(30))
                           + ISNULL( ', @StepID=' +CAST(@StepID AS nvarchar(30)),'')

   exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
   exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
END

-------------------------------------------------------------------
--Check for the constraints existance
-------------------------------------------------------------------
SET @ExitCode = 0
IF (@StepID is null)
  SET @ExitCode = @Context.exist('declare namespace etl="ETLController.XSD";(/etl:Context[@BatchID=(sql:variable("@BatchID"))]/etl:Constraints)')
ELSE
  SET @ExitCode = @Context.exist('declare namespace etl="ETLController.XSD";
                                 (/etl:Context[@BatchID=(sql:variable("@BatchID"))]/etl:Steps/etl:Step[@StepID=(sql:variable("@StepID"))]/etl:Constraints)')

IF (@ExitCode = 0)
BEGIN
  SET @StatusID = @STAT_SUCCESS
END
ELSE
BEGIN

declare @const table
(ConstID int
,Process nvarchar(max)
,WaitPeriod int null
,Ping int null
,[Disabled] tinyint null
,ConstOrder nvarchar(10)
)

if (@StepID is null)
begin
   ;with xmlnamespaces ('ETLController.XSD' as etl)
   insert @const
   SELECT
    c.const.value('./@ConstID','int') as ConstID
   ,'exec @ExitCode = ' + c.const.value('(./etl:Process/etl:Process)[1]','nvarchar(max)') + ' @pRequest=@Request, @pReceipt=@Receipt out' 
    + isnull(',' + c.const.value('(./etl:Process/etl:Param)[1]','nvarchar(max)'),'') as Process
   ,c.const.value('./@WaitPeriod','int') as WaitPeriod
   ,isnull(c.const.value('./@Ping','int'),10) as Ping
   ,isnull(c.const.value('./@Disabled','int'),0) as [Disabled]
   ,c.const.value('./@ConstOrder','int') as ConstOrder
   FROM @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]/etl:Constraints/etl:Constraint') c(const)
end
else
begin
   ;with xmlnamespaces ('ETLController.XSD' as etl)
   insert @const
   SELECT
    c.const.value('./@ConstID','int') as ConstID
   ,'exec @ExitCode = ' + c.const.value('(./etl:Process/etl:Process)[1]','nvarchar(max)') + ' @pRequest=@Request,@pReceipt=@Receipt out' 
    + isnull(',' + c.const.value('(./etl:Process/etl:Param)[1]','nvarchar(max)'),'') as Process
   ,c.const.value('./@WaitPeriod','int') as WaitPeriod
   ,isnull(c.const.value('./@Ping','int'),10) as Ping
   ,isnull(c.const.value('./@Disabled','int'),0) as [Disabled]
   ,c.const.value('./@ConstOrder','int') as ConstOrder
   FROM @Context.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]/etl:Steps/etl:Step[@StepID=(sql:variable("@StepID"))]/etl:Constraints/etl:Constraint') c(const)
end

-------------------------------------------------------------------
--Loop through the Step Constraints
-------------------------------------------------------------------
DECLARE StepConstCursor CURSOR LOCAL FAST_FORWARD
FOR SELECT c.ConstID,c.Process,c.WaitPeriod,c.Ping,c.Disabled
FROM @const c
ORDER BY c.ConstOrder

OPEN StepConstCursor
WHILE (1=1)
BEGIN
   SET @StartDT = getdate()
   SET @ConstID = NULL
   FETCH NEXT FROM StepConstCursor INTO @ConstID,@Process,@WaitPeriod,@ATT_PING,@Disabled
   IF (@@FETCH_STATUS <> 0 OR @ConstID IS NULL)
      BREAK

   IF isnull(@Disabled,0) = 1 
   BEGIN
      IF (@debug = 1)
      BEGIN
         SET @msg = '   Constraint=' +  CAST(@ConstID AS nvarchar(30)) + ' is disabled:  ' + @Process
         exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
         exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
      END
      CONTINUE
   END

   SET @Wait = right('00' + cast(@ATT_PING/3600 as varchar(10)),3)
             + ':' + right('0' + cast((@ATT_PING/60)%60 as varchar(10)),2)
             + ':' + right('0' + cast(@ATT_PING%60 as varchar(10)),2)

   IF (@debug = 1)
   BEGIN
      SET @msg = '   Constraint=' +  CAST(@ConstID AS nvarchar(30))
               + ' wait=' + CAST(@WaitPeriod AS nvarchar(30)) + '(' + isnull(@Wait,'null') + ')'
               + ':  ' + @Process
      exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
      exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
   END

   IF (@Process IS NOT NULL)
   BEGIN
       exec @ExitCode = dbo.[prc_CreateHeader] @cHeader out,@BatchID,@StepID,@ConstID,@RunID,@Options,@Scope
       exec @ExitCode = dbo.[prc_CreateProcessRequest] @cRequest out,@cHeader,@Context,@handle
      --Wait Until WaitPeriod is expired
      WHILE (1=1)
      BEGIN
         SET @StatusID = NULL
         SET @cReceipt = NULL
         EXEC sp_ExecuteSQL @Process
                  ,N'@ExitCode int output,@Request xml(ETLController),@Receipt xml(ETLController) output'
                  ,@ExitCode = @ExitCode output
                  ,@Request = @cRequest
                  ,@Receipt = @cReceipt output

         exec @ExitCode = dbo.[prc_ReadProcessReceipt] @cReceipt,null,@StatusID out,@Err out--,@msg out

         SET @StatusID = ISNULL(@StatusID,@STAT_ERROR)
         IF (@debug = 1)
         BEGIN
            SET @msg = '   Constraint=' +  CAST(@ConstID AS nvarchar(30)) + ' returns StatusID=' + CAST(@StatusID AS nvarchar(30))
            exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
            exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
         END

-------------------------------------------------------------------
--Exit Batch on Exit Event for batch constraints only
-------------------------------------------------------------------
         if (@StepID is null)
         begin
            set @BatchStatusID = cast(dbo.[fn_ETLCounterGet] (@BatchID,0,@RunID,'ExitEvent') as tinyint)
            IF (@BatchStatusID is not null)
            BEGIN
               SET @StatusID = @BatchStatusID
               IF (@debug = 1)
               BEGIN
                  SET @msg = '   Costraint Check Exit on ExitEvent with StatusID=' + CAST(@StatusID as nvarchar(30))
                  exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
                  exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
               END
            END
         end


         IF (@StatusID = @STAT_ERROR)
         BEGIN
            SET @RaiserrMsg = '   ERROR Constraint=' +  CAST(@ConstID AS nvarchar(30)) + ' failed'
            BREAK
         END
         ELSE IF(@StatusID = @STAT_SUCCESS)
         BEGIN
            BREAK
         END
         ELSE
         BEGIN
            IF (@StatusID = @STAT_FAILURE_IMMEDIATE OR DATEDIFF(minute,@StartDT,getdate()) > @WaitPeriod)
            BEGIN
               SET @RaiserrMsg = '   ERROR Constraint=' +  CAST(@ConstID AS nvarchar(30)) + ' was not met'
               SET @StatusID = @STAT_FAILURE
               SET @Err = 50107 -- constraint was not met
               BREAK
            END

            IF (@debug = 1)
            BEGIN
               SET @msg = '   Constraint=' +  CAST(@ConstID AS nvarchar(30)) + ' wait=' + isnull(@Wait,'null')
               exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg
               exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
            END
            WAITFOR DELAY @Wait

            --check conversation
            IF (@handle IS NOT NULL)
               IF EXISTS (SELECT * FROM sys.conversation_endpoints WHERE [conversation_handle] = @handle AND  state IN ('DI','DO','ER','CD'))
               BEGIN
                  SET @RaiserrMsg = '   ERROR conversation is not active'
                  SET @StatusID = @STAT_ERROR
                  SET @Err = 50110
                  BREAK
               END

         END
      END --WHILE(@Err = 0)
      IF @StatusID IN (@STAT_FAILURE,@STAT_ERROR,@STAT_FAILURE_IMMEDIATE)
         BREAK
    END
END --WHILE (@Err = 0)

DEALLOCATE StepConstCursor
IF (@RaiserrMsg is not null )
BEGIN
   RAISERROR(@RaiserrMsg,11,11)
END

SET @StatusID = @STAT_SUCCESS
END
END TRY
BEGIN CATCH
SET @Err = ISNULL(NULLIF(@Err,0),ERROR_NUMBER())
SET @RaiserrMsg = ISNULL(@RaiserrMsg,ERROR_MESSAGE())
SET @StatusID = isnull(@StatusID,@STAT_ERROR)
IF (@RaiserrMsg IS NOT NULL)
BEGIN
      exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@RaiserrMsg,@Err
      exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
END
END CATCH

if (@pReceipt is null)
   exec @ExitCode = dbo.[prc_CreateProcessReceipt] @pReceipt out,@Header,@StatusID,@Err,@RaiserrMsg

IF (@debug = 1)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ExitCode = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@Header,@msg,@Err
   exec @ExitCode = dbo.[prc_Print] @ProcessInfo,@handle
END
RETURN @Err
GO
PRINT N'Creating [dbo].[prc_CreateContext]...';


GO
/*
select * from ETLBatch
select * from ETLStep where batchid = -320
prc_ETLAttributeSet 60,null,null,'DsvVersion','2'
prc_ETLAttributeSet 60,3,null,'DsvObject','LastHourMR'
prc_ETLAttributeSet 60,2,null,'DsvObject','AdType'
declare @pHeader xml
declare @pContext xml
exec dbo.prc_CreateHeader @pHeader out,340,2,null,4,1,15
--select @pHeader
exec dbo.prc_CreateContext @pContext out,@pHeader
select @pContext
*/
CREATE PROCEDURE [dbo].[prc_CreateContext]
    @pContext xml([ETLController]) output
   ,@pHeader xml([ETLController])
As
/******************************************************************
**D File:         prc_CreateContext.SQL
**
**D Desc:         return Context object
**
**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
**  5/20/2008        andreys            remove context resolution
**  10/15/2011       andreys            add controller and node globals
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)

declare @BatchID int
declare @StepID int
declare @ConstID int
declare @RunID int
declare @Options int
declare @debug int
declare @Scope int
declare @AttributeScope int

declare @id int
declare @type tinyint
declare @b int
declare @s int
declare @c int
declare @Name nvarchar(100)
declare @Value1 nvarchar(max)
declare @Value2 nvarchar(max)
declare @nValue nvarchar(max)
declare @ProcessInfo xml(ETLController)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0

declare @a as table
 (id int identity(1,1)
 ,BatchID int
 ,StepID int null
 ,ConstID int null
 ,AttributeName nvarchar(100)
 ,AttributeValue nvarchar(max)
 ,AttributeScope tinyint
 ,CompleteFlag tinyint null
 ,unique (BatchID,StepID,ConstId,AttributeName,AttributeScope)
)

declare @ab as table
 (aid int
 ,bid int
 ,isexec tinyint
)

begin try
exec @ProcErr = dbo.[prc_ReadHeader] @pHeader,@BatchID out,@StepID out,@ConstID out,@RunID out,@Options out,@Scope out
set @debug = nullif(@Options & 1,0)


if (@debug = 1)
begin
   SET @msg =  'BEGIN Procedure ' + @ProcName + ' with context'
         + ' BatchID=' + isnull(cast(@BatchID as nvarchar(10)),'null')
         + ' StepID=' + isnull(cast(@StepID as nvarchar(10)),'null')
         + ' ConstID=' + isnull(cast(@ConstID as nvarchar(10)),'null')
         + ' RunID=' + isnull(cast(@RunID as nvarchar(10)),'null')
         + ' Scope=' + isnull(cast(@Scope as nvarchar(10)),'null')

   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@pHeader,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo
end
-------------------------------------------------------------------
--Process context attributes
-------------------------------------------------------------------
if (@StepID is null and (@Scope is null or @Scope & 4 = 4))
begin
   insert @a (BatchID,StepID,ConstID,AttributeName,AttributeValue,AttributeScope)
   select BatchID,null,ConstID,AttributeName,AttributeValue,1
     from dbo.[ETLBatchConstraintAttribute]
    where BatchID = @BatchID  and (ConstID = @ConstID or @ConstID is null)
end

if ((@StepID is not null or (@StepID is null and @ConstID is null)) and (@Scope is null or @Scope & 8 = 8))
begin
   insert @a (BatchID,StepID,ConstID,AttributeName,AttributeValue,AttributeScope)
   select  BatchID,StepID,ConstID,AttributeName,AttributeValue,2
     from dbo.[ETLStepConstraintAttribute]
    where BatchID = @BatchID and (StepID = @StepID or @StepID is null) and (ConstID = @ConstID or @ConstID is null)
end

if ((@StepID is not null or @ConstID is null) and (@Scope is null or @Scope & 2 = 2))
begin
   insert @a (BatchID,StepID,ConstID,AttributeName,AttributeValue,AttributeScope)
   select i.BatchID,i.StepID,null,i.AttributeName,i.AttributeValue,3
     from dbo.[ETLStepAttribute] i
    where i.BatchID = @BatchID and (i.StepID = @StepID or @StepID is null)
end

if(@Scope is null or @Scope & 1 = 1)
begin
    insert @a (BatchID,StepID,ConstID,AttributeName,AttributeValue,AttributeScope)
    select i.BatchID,null,null,i.AttributeName,i.AttributeValue,4
      from dbo.[ETLBatchAttribute] i
     where i.BatchID = @BatchID
end

--execution context
insert @a (BatchID,StepID,ConstID,AttributeName,AttributeValue,AttributeScope)
select null,null,null,'@BatchID' as AttributeName,cast(@BatchID as nvarchar(30)) as AttributeValue,0
union all
select null,null,null,'@StepID' as AttributeName,cast(@StepID as nvarchar(30)) as AttributeValue,0
union all
select null,null,null,'@ConstID' as AttributeName,cast(@ConstID as nvarchar(30)) as AttributeValue,0
union all
select null,null,null,'@RunID' as AttributeName,cast(@RunID as nvarchar(30)) as AttributeValue,0
union all
select null,null,null,'@Options' as AttributeName,cast(@Options as nvarchar(30)) as AttributeValue,0

-------------------------------------------------------------------
--add dsvobjectproperty attributes if any
-------------------------------------------------------------------
--declare @DsvID int
--select top (1) @DsvID = AttributeValue from @a where AttributeName = 'DsvVersion'
--if (@DsvID is not null)
--begin
--   insert @a (BatchID,StepID,ConstID,AttributeName,AttributeValue,AttributeScope)
--   select a.BatchID,a.StepID,a.ConstID,b.oName,b.oValue,a.AttributeScope
--     from @a a
--   cross apply dbo.fn_ETLObjectProperty(@DsvID,a.AttributeValue) as b
--    where a.AttributeName = 'DsvObject'
--end

/* dont need to do this here
** move all attribute resolution code to prc_ReadContextAttributes
-------------------------------------------------------------------
--relationship table
-------------------------------------------------------------------
insert @ab
select a.id,b.id,0
from @a a
join @a b on charindex('<' + a.AttributeName + '>',b.AttributeValue) > 0
      and (b.BatchID = a.BatchID or (a.BatchID is null and b.AttributeScope <= a.AttributeScope))
      and ((b.BatchID = a.BatchID and b.StepID = a.StepID) or (a.StepID  is null and b.AttributeScope <= a.AttributeScope))
      and ((b.BatchID = a.BatchID and b.StepID = a.StepID and b.ConstID = a.ConstID)
       or  (b.BatchID = a.BatchID and b.StepID is null and b.ConstID = a.ConstID)
       or (a.ConstID is null and b.AttributeScope <= a.AttributeScope))

union all select a.id,b.id,1
from @a a
join @a b on charindex('<' + a.AttributeName + '*>',b.AttributeValue) > 0
      and (b.BatchID = a.BatchID or (a.BatchID is null and b.AttributeScope <= a.AttributeScope))
      and ((b.BatchID = a.BatchID and b.StepID = a.StepID) or (a.StepID  is null and b.AttributeScope <= a.AttributeScope))
      and ((b.BatchID = a.BatchID and b.StepID = a.StepID and b.ConstID = a.ConstID)
       or  (b.BatchID = a.BatchID and b.StepID is null and b.ConstID = a.ConstID)
       or (a.ConstID is null and b.AttributeScope <= a.AttributeScope))

-------------------------------------------------------------------
--replace dynamic parameters if any
-------------------------------------------------------------------
WHILE (1=1)
BEGIN
    SET @id = null
    SELECT top(1) @id = t.id
                 ,@Name = t.AttributeName
                 ,@b = t.BatchID
                 ,@s = t.StepID
                 ,@c = t.ConstID
                 ,@Value1 = t.AttributeValue
                 ,@AttributeScope = t.AttributeScope
      FROM @a t
      WHERE t.CompleteFlag IS NULL
        AND NOT EXISTS(SELECT 1 FROM @ab t1
                         JOIN @a t2 ON t1.aid = t2.id WHERE  t.id = t1.bid AND t2.CompleteFlag IS NULL) --no parents
        AND EXISTS(SELECT 1 FROM @ab t2 WHERE  t.id = t2.aid) --have children
      order by t.AttributeScope,t.id

    IF (@id is null)
       BREAK

    update a set a.AttributeValue = REPLACE(a.AttributeValue,'<' + @Name + '>',isnull(@Value1,''))
      from @a a
      join @ab ab on a.id = ab.bid and ab.aid = @id and ab.isexec = 0

   --execute value to get the value
   IF (@Value1 is not null
       AND EXISTS(SELECT 1 FROM @ab ab WHERE ab.aid = @id and ab.isexec = 1)
       AND )
   BEGIN
      SET @nValue = 'select top 1 @value = (' + @Value1 + ')'
      SET @Value2 = null
      EXEC sp_executesql @nValue,N'@value varchar(max) output',@value = @value2 out

      update a set a.AttributeValue = REPLACE(a.AttributeValue,'<' + @Name + '*>',isnull(@Value2,''))
        from @a a
        join @ab ab on a.id = ab.bid and ab.aid = @id and ab.isexec = 1
   END


   update @a set CompleteFlag = 1 where id = @id
END
*/
-------------------------------------------------------------------
--build context object
-------------------------------------------------------------------

;WITH XMLNAMESPACES ('ETLController.XSD' as etl)
select @pContext = 
 (select b.BatchID as '@BatchID'
,b.BatchName as '@BatchName'
,b.BatchDesc as '@BatchDesc'
,b.IgnoreErr as '@IgnoreErr'
,b.RestartOnErr as '@Restart'
,ba1.AttributeValue as '@HistRet'
,ba2.AttributeValue as '@MaxThread'
,ba3.AttributeValue as '@Ping'
,ba4.AttributeValue as '@Timeout'
,ba5.AttributeValue as '@Lifetime'
,ba6.AttributeValue as '@Retry'
,ba7.AttributeValue as '@Delay'
--,b.BatchDesc as 'Desc'
,p1.ProcessID as 'etl:OnSuccess/@ProcessID', p1.ScopeID as 'etl:OnSuccess/@ScopeID',p1.Process as 'etl:OnSuccess/etl:Process',p1.Param as 'etl:OnSuccess/etl:Param'
,p2.ProcessID as 'etl:OnFailure/@ProcessID', p2.ScopeID as 'etl:OnFailure/@ScopeID',p2.Process as 'etl:OnFailure/etl:Process',p2.Param as 'etl:OnFailure/etl:Param'
--batch attributes
--,(select ba.AttributeName as '@Name',ba.AttributeValue as '*' from dbo.ETLBatchAttribute ba
--   where b.BatchID = ba.BatchID
--     and ba.AttributeName not in ('HISTRET','MAXTHREAD','PING','TIMEOUT','LIFETIME','RETRY','DELAY')
--     for xml path('etl:Attribute'),type) as 'etl:Attributes'
,(select ba.AttributeName as '@Name',ba.AttributeValue as '*' from @a ba
   where b.BatchID = ba.BatchID and ba.StepID is null and ba.ConstID is null
     and ba.AttributeName not in ('HISTRET','MAXTHREAD','PING','TIMEOUT','LIFETIME','RETRY','DELAY')
     for xml path('etl:Attribute'),type) as 'etl:Attributes'

--
--batch constraints
,(select
 bc.ConstID as '@ConstID'
,bc.ConstOrder as '@ConstOrder'
,bc.WaitPeriod as '@WaitPeriod'
,bca1.AttributeValue as '@Disabled'
,bca2.AttributeValue as '@Ping'
,p0.ProcessID as 'etl:Process/@ProcessID', p0.ScopeID as 'etl:Process/@ScopeID',p0.Process as 'etl:Process/etl:Process',p0.Param as 'etl:Process/etl:Param'
--batch constraint attributes
--,(select bca.AttributeName as '@Name',bca.AttributeValue as '*'
--    from dbo.ETLBatchConstraintAttribute bca
--   where bc.BatchID = bca.BatchID and bc.ConstID = bca.ConstID
--     and bca.AttributeName not in ('DISABLED','PING')
--     for xml path('etl:Attribute'),type) as 'etl:Attributes'
,(select bca.AttributeName as '@Name',bca.AttributeValue as '*'
    from @a bca
   where bc.BatchID = bca.BatchID and bc.ConstID = bca.ConstID and bca.StepID is null
     and bca.AttributeName not in ('DISABLED','PING')
     for xml path('etl:Attribute'),type) as 'etl:Attributes'
--
   from dbo.[ETLBatchConstraint] bc
   left join dbo.[ETLProcess] p0 on bc.ProcessID = p0.ProcessID
   left join dbo.[ETLBatchConstraintAttribute] bca1 on bc.BatchID = bca1.BatchID and bc.ConstID = bca1.ConstID and bca1.AttributeName = 'DISABLED'
   left join dbo.[ETLBatchConstraintAttribute] bca2 on bc.BatchID = bca2.BatchID and bc.ConstID = bca2.ConstID and bca2.AttributeName = 'PING'
  where b.BatchID = bc.BatchID and (@StepID is null and (bc.ConstID = @ConstID or @ConstID is null)) and (@Scope is null or @Scope & 4 = 4) 
  for xml path('etl:Constraint'),type) as 'etl:Constraints'
--
--step
,(select s.StepID as '@StepID'
,s.StepName as '@StepName'
,s.StepDesc as '@StepDesc'
,s.IgnoreErr as '@IgnoreErr'
,s.StepOrder as '@StepOrder'
,sa1.AttributeValue as '@Disabled'
,sa2.AttributeValue as '@SeqGroup'
,sa3.AttributeValue as '@PriGroup'
,sa4.AttributeValue as '@Retry'
,sa6.AttributeValue as '@Delay'
,sa5.AttributeValue as '@Restart'
,sa7.AttributeValue as '@LoopGroup'
--,s.StepDesc as 'Desc'
,p0.ProcessID as 'etl:Process/@ProcessID', p0.ScopeID as 'etl:Process/@ScopeID',p0.Process as 'etl:Process/etl:Process',p0.Param as 'etl:Process/etl:Param'
,p1.ProcessID as 'etl:OnSuccess/@ProcessID', p1.ScopeID as 'etl:OnSuccess/@ScopeID',p1.Process as 'etl:OnSuccess/etl:Process',p1.Param as 'etl:OnSuccess/etl:Param'
,p2.ProcessID as 'etl:OnFailure/@ProcessID', p2.ScopeID as 'etl:OnFailure/@ScopeID',p2.Process as 'etl:OnFailure/etl:Process',p2.Param as 'etl:OnFailure/etl:Param'
--step attributes
--,(select sa.AttributeName as '@Name',sa.AttributeValue as '*' from dbo.ETLStepAttribute sa
--   where s.BatchID = sa.BatchID and s.StepID = sa.StepID
--     and sa.AttributeName not in ('DISABLED','SEQGROUP','PRIGROUP','RETRY','RESTART')
--     for xml path('etl:Attribute'),type) as 'etl:Attributes'
,(select sa.AttributeName as '@Name',sa.AttributeValue as '*' from @a sa
   where s.BatchID = sa.BatchID and s.StepID = sa.StepID and sa.ConstID is null
     and sa.AttributeName not in ('DISABLED','SEQGROUP','PRIGROUP','RETRY','DELAY','RESTART','LOOPGROUP')
     for xml path('etl:Attribute'),type) as 'etl:Attributes'
--
--step constraints
,(select
 sc.ConstID as '@ConstID'
,sc.ConstOrder as '@ConstOrder'
,sc.WaitPeriod as '@WaitPeriod'
,sca1.AttributeValue as '@Disabled'
,sca2.AttributeValue as '@Ping'
,p0.ProcessID as 'etl:Process/@ProcessID', p0.ScopeID as 'etl:Process/@ScopeID',p0.Process as 'etl:Process/etl:Process',p0.Param as 'etl:Process/etl:Param'
--step constraint attributes
--,(select sca.AttributeName as '@Name',sca.AttributeValue as '*'
--    from dbo.ETLStepConstraintAttribute sca where sc.BatchID = sca.BatchID and sc.StepID = sca.StepID and sc.ConstID = sca.ConstID
--     and sca.AttributeName not in ('DISABLED','PING')
--    for xml path('etl:Attribute'),type) as 'etl:Attributes'
,(select sca.AttributeName as '@Name',sca.AttributeValue as '*'
    from @a sca where sc.BatchID = sca.BatchID and sc.StepID = sca.StepID and sc.ConstID = sca.ConstID
     and sca.AttributeName not in ('DISABLED','PING')
    for xml path('etl:Attribute'),type) as 'etl:Attributes'
--
   from dbo.[ETLStepConstraint] sc
   left join dbo.[ETLProcess] p0 on sc.ProcessID = p0.ProcessID
   left join dbo.[ETLStepConstraintAttribute] sca1 on sc.BatchID = sca1.BatchID and sc.StepID = sca1.StepID and sc.ConstID = sca1.ConstID and sca1.AttributeName = 'DISABLED'
   left join dbo.[ETLStepConstraintAttribute] sca2 on sc.BatchID = sca2.BatchID and sc.StepID = sca2.StepID and sc.ConstID = sca2.ConstID and sca2.AttributeName = 'PING'
   where s.BatchID = sc.BatchID and s.StepID = sc.StepID  and (sc.ConstID = @ConstID or @ConstID is null) and (@Scope is null or @Scope & 8 = 8)
   for xml path('etl:Constraint'),type) as 'etl:Constraints'
--
 from dbo.[ETLStep] s
 left join dbo.[ETLProcess] p0 on s.StepProcID = p0.ProcessID
 left join dbo.[ETLProcess] p1 on s.OnSuccessID = p1.ProcessID
 left join dbo.[ETLProcess] p2 on s.OnFailureID = p2.ProcessID
 left join dbo.[ETLStepAttribute] sa1 on s.BatchID = sa1.BatchID and s.StepID = sa1.StepID and sa1.AttributeName = 'DISABLED'
 left join dbo.[ETLStepAttribute] sa2 on s.BatchID = sa2.BatchID and s.StepID = sa2.StepID and sa2.AttributeName = 'SEQGROUP'
 left join dbo.[ETLStepAttribute] sa3 on s.BatchID = sa3.BatchID and s.StepID = sa3.StepID and sa3.AttributeName = 'PRIGROUP'
 left join dbo.[ETLStepAttribute] sa4 on s.BatchID = sa4.BatchID and s.StepID = sa4.StepID and sa4.AttributeName = 'RETRY'
 left join dbo.[ETLStepAttribute] sa5 on s.BatchID = sa5.BatchID and s.StepID = sa5.StepID and sa5.AttributeName = 'RESTART'
 left join dbo.[ETLStepAttribute] sa6 on s.BatchID = sa6.BatchID and s.StepID = sa6.StepID and sa6.AttributeName = 'DELAY'
 left join dbo.[ETLStepAttribute] sa7 on s.BatchID = sa7.BatchID and s.StepID = sa7.StepID and sa7.AttributeName = 'LOOPGROUP'
 where b.BatchID = s.BatchID and (s.StepID = @StepID or @StepID is null) and (@Scope is null or @Scope & 2 = 2)
   for xml path('etl:Step'),type) as 'etl:Steps'
 from dbo.[ETLBatch] b
 left join dbo.[ETLProcess] p1 on b.OnSuccessID = p1.ProcessID
 left join dbo.[ETLProcess] p2 on b.OnFailureID = p2.ProcessID
 left join dbo.[ETLBatchAttribute] ba1 on b.BatchID = ba1.BatchID and ba1.AttributeName = 'HISTRET'
 left join dbo.[ETLBatchAttribute] ba2 on b.BatchID = ba2.BatchID and ba2.AttributeName = 'MAXTHREAD'
 left join dbo.[ETLBatchAttribute] ba3 on b.BatchID = ba3.BatchID and ba3.AttributeName = 'PING'
 left join dbo.[ETLBatchAttribute] ba4 on b.BatchID = ba4.BatchID and ba4.AttributeName = 'TIMEOUT'
 left join dbo.[ETLBatchAttribute] ba5 on b.BatchID = ba5.BatchID and ba5.AttributeName = 'LIFETIME'
 left join dbo.[ETLBatchAttribute] ba6 on b.BatchID = ba6.BatchID and ba6.AttributeName = 'RETRY'
 left join dbo.[ETLBatchAttribute] ba7 on b.BatchID = ba7.BatchID and ba7.AttributeName = 'DELAY'
 where (b.BatchID = @BatchID) and (@Scope is null or @Scope & 1 = 1)
for xml path ('etl:Context'),type)

end try
begin catch
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pHeader = null
   raiserror (@msg,11,11)
end catch

if (@debug = 1)
begin
   SET @msg =  'END Procedure ' + @ProcName
   exec @ProcErr = dbo.[prc_CreateProcessInfo] @ProcessInfo out,@pHeader,@msg,@Err
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo
end

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_CreateCounters]...';


GO

/*
select * from ETLBatchRun where batchid = 130

--select * from ETLStepRunCounter
--insert ETLStepRunCounter
--values(-20,1,4,'test','xxx')
--insert ETLStepRunCounter
--values(-20,1,3,'test1','yyy')
declare @pHeader xml
declare @pCounters xml
exec dbo.prc_CreateHeader @pHeader out,-20,1,null,4,1
--select @pHeader
exec dbo.prc_CreateCounters @pCounters out,@pHeader
select @pCounters

*/
CREATE procedure [dbo].[prc_CreateCounters] (
    @pCounters xml ([ETLController]) output
   ,@pHeader xml([ETLController])
   ,@pName nvarchar(100) = null
) as
begin
/******************************************************************************
** File:	[prc_CreateCounters].sql
** Name:	[dbo].[prc_CreateCounters]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Procedure/[prc_ETLStepCounterGet].sql:

** Desc:	return Counters object for a header context
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	10/30/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

set nocount on

declare @msg                nvarchar(1000)
declare @debug              tinyint
declare @Options            int
declare @query              nvarchar(max)

declare @BatchID int
declare @StepID int
declare @RunID int
declare @ProcName sysname
declare @ProcessInfo xml(ETLController)
declare @Err int

set @ProcName = object_name(@@procid)
begin try

exec dbo.[prc_ReadHeader] @pHeader,@BatchID out,@StepID out,null,@RunID out,@Options out
set @debug = nullif(@Options & 1,0)

if (@debug = 1)
begin
   SET @msg =  'BEGIN Procedure ' + @ProcName + ' with context'
         + ' BatchID=' + isnull(cast(@BatchID as nvarchar(10)),'null')
         + ' StepID=' + isnull(cast(@StepID as nvarchar(10)),'null')
         + ' RunID=' + isnull(cast(@RunID as nvarchar(10)),'null')

   exec dbo.[prc_CreateProcessInfo] @ProcessInfo out,@pHeader=@pHeader,@pMsg=@msg
   exec dbo.[prc_Print] @pProcessInfo=@ProcessInfo
end

set @StepID = isnull(@StepID,0)

--return last known value for all counters
;with xmlnamespaces('ETLController.XSD' as etl)
select @pCounters = 
(select @BatchID as '@BatchID',nullif(@StepID,0) as '@StepID',@RunID as '@RunID'
,(select
        c.CounterName as '@Name'
       ,c.RunID as '@RunID'
       ,c.CounterValue as '*'
    from dbo.[ETLStepRunCounter] c (nolock)
    join (select max(c.RunID) as RunID, c.CounterName
            from dbo.[ETLStepRunCounter] c (nolock)
           where c.RunID <= @RunID and c.StepID = @StepID and c.BatchID = @BatchID
             and (@pName is null or c.CounterName = @pName)
           group by c.CounterName) p
      on c.RunID = p.RunID and c.CounterName = p.CounterName
   where (c.StepID = @StepID and c.BatchID = @BatchID
     and (@pName is null or c.CounterName = @pName))
     for xml path('etl:Counter'),type)
for xml path('etl:Counters'),type
)

if (@debug = 1)
begin
   SET @msg =  'END Procedure ' + @ProcName
   exec dbo.[prc_CreateProcessInfo] @ProcessInfo out,@pHeader=@pHeader,@pMsg=@msg
   exec dbo.[prc_Print] @pProcessInfo=@ProcessInfo
end

end try
begin catch	
	if @@trancount > 0 rollback tran
   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   set @pCounters = null
   raiserror (@msg,11,11)
end catch
   return 0
end
GO
PRINT N'Creating [dbo].[prc_Finalize]...';


GO
CREATE procedure [dbo].[prc_Finalize] (
    @pHeader xml(ETLController)
   ,@pHandle uniqueidentifier = null
   ,@pStatusID smallint
   
) as
begin
/******************************************************************************
** File:	[prc_Finalize].sql
** Name:	[dbo].[prc_Finalize]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Procedure/[prc_Finalize].sql:

** Desc:	clean up the execution tables
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	10/15/2011
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

set nocount on
declare @err                int
declare @proc               sysname
declare @msg                nvarchar(1000)
declare @debug              tinyint
declare @Rows               int

declare @ProcErr int
declare @ProcName sysname
declare @BatchID int
declare @RunID int
declare @Options int
declare @ProcessInfo xml (ETLController)

set @ProcName = object_name(@@PROCID);

set @err = 0;
begin try

exec dbo.prc_ReadHeader @pHeader,@BatchID out,null,null,@RunID out,@Options out;
set @debug = @Options & 1;

--Finalize All stuck RunIDs
--set @RunID = null;

declare @run table (RunID int primary key);
insert @run
select distinct RunID from dbo.ETLStepRun
 where BatchID = @BatchID AND (RunID = @RunID OR isnull(@RunID,0) = 0)
 union select RunID from dbo.ETLBatchRun
 where BatchID = @BatchID AND (RunID = @RunID OR (isnull(@RunID,0) = 0 and StatusID = 1));

select @RunID = MAX(RunID) from @run;

UPDATE s
  SET s.StatusID = CASE WHEN t.StatusID = 1 THEN @pStatusID ELSE t.StatusID END,s.StatusDT = t.StatusDT,s.Err = t.Err
 FROM dbo.ETLStep s
 JOIN  dbo.ETLStepRun t ON s.StepID = t.StepID AND s.BatchID = t.BatchID
 JOIN @run r on t.RunID = r.RunID
WHERE s.BatchID = @BatchID;

UPDATE b
 SET b.EndTime = getdate()
    ,b.StatusID = @pStatusID
    ,b.StatusDT = getdate()
    ,b.Err = case when @pStatusID = 2 then 0 else 50103 end
FROM dbo.ETLBatchRun b
JOIN @run r ON b.RunID = r.RunID
WHERE b.BatchID = @BatchID;

DELETE dbo.ETLStepRun
OUTPUT deleted.RunID,deleted.BatchID,deleted.StepID,deleted.StatusDT
 ,CASE WHEN deleted.StatusID = 1 THEN @pStatusID ELSE deleted.StatusID END
 ,deleted.SPID,deleted.StepOrder,deleted.IgnoreErr
 ,deleted.Err,deleted.StartTime,deleted.EndTime,deleted.SeqGroup,deleted.PriGroup,deleted.SvcName
 INTO dbo.ETLStepRunHistory
(RunID,BatchID,StepID,StatusDT,StatusID,SPID,StepOrder,IgnoreErr
,Err,StartTime,EndTime,SeqGroup,PriGroup,SvcName)
FROM dbo.ETLStepRun s
JOIN @run r ON s.RunID = r.RunID
WHERE s.BatchID = @BatchID;

set @Rows = @@ROWCOUNT;
IF (@Debug = 1)
BEGIN
  SET @msg = '   Moved ' + CAST(@Rows as nvarchar(30)) + ' rows in ETLStepRunHistory for BatchID=' + CAST(@BatchID as nvarchar(30));
  exec dbo.prc_CreateProcessInfo @ProcessInfo out,@pHeader,@msg;
  exec dbo.prc_Print @ProcessInfo,@pHandle;
END

UPDATE b
 SET b.EndTime = r.EndTime
    ,b.StatusDT = r.StatusDT
    ,b.StatusID = r.StatusID
   ,b.Err = r.Err
FROM dbo.ETLBatch b
JOIN dbo.ETLBatchRun r ON b.BatchID = r.BatchID AND r.RunID = @RunID 
WHERE b.BatchID = @BatchID;


end try
begin catch
   set @Proc = ERROR_PROCEDURE()
   set @Msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror ('ERROR: PROC %s, MSG: %s',11,11,@Proc,@Msg) 
end catch

return @err
end;
GO
PRINT N'Creating [dbo].[prc_PersistContext]...';


GO
/*

declare @Header xml
declare @pContext xml
declare @pProcessRequest xml
declare @pAttributes xml
exec dbo.prc_CreateHeader @Header out,-20,null,null,4,15
exec dbo.prc_CreateContext @pContext out,@Header
--exec dbo.prc_CreateProcessRequest @pProcessRequest out,@Header,@pContext
--select @pProcessRequest
--exec dbo.prc_ReadContextAttributes @pProcessRequest,@pAttributes out
--select @pAttributes
select @pContext
exec prc_PersistContext @pContext,'debug,replace'
exec dbo.prc_CreateContext @pContext out,@Header
select @pContext
rollback tran
*/
CREATE PROCEDURE dbo.prc_PersistContext
    @pContext xml([ETLController])
   ,@pHandle uniqueidentifier = null 
   ,@pOptions nvarchar(100) = null
As
/******************************************************************
**D File:         prc_PersistContext.SQL
**
**D Desc:         create persist context into ETLBatch tables
**
** @Options       debug,replace
** @pHandle       conversation handle to communicate messages back to main thread

**D Auth:         andreys
**D Date:         10/27/2007
**
*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
01/12/2008           Praveen			Added Retry and Delay 83349
******************************************************************/
SET NOCOUNT ON
DECLARE @Err INT
DECLARE @ProcErr INT
DECLARE @Cnt INT
DECLARE @ProcName sysname
DECLARE @msg nvarchar(max)
DECLARE @trancount int

DECLARE @BatchID int
DECLARE @StepID int
DECLARE @ConstID int
DECLARE @RunID int
DECLARE @Options int
DECLARE @debug tinyint
DECLARE @replace tinyint
DECLARE @Handle uniqueidentifier
DECLARE @BatchName nvarchar(30)

declare @Name nvarchar(100)
declare @Value1 nvarchar(max)
declare @Value2 nvarchar(max)
declare @nValue nvarchar(max)

DECLARE @Header xml(ETLController)
DECLARE @Context xml(ETLController)
DECLARE @ProcessInfo xml(ETLController)

SET @ProcName = OBJECT_NAME(@@PROCID)
SET @Err = 0
SET @ProcErr = 0
SET @trancount = @@trancount


begin try
set @debug = case when charindex('debug',@pOptions) > 0 then 1 else 0 end
set @replace = case when charindex('replace',@pOptions) > 0 then 1 else 0 end

;with xmlnamespaces('ETLController.XSD' as etl)
select @BatchID = @pContext.value('(/etl:Context/@BatchID)[1]','int')
      ,@BatchName = @pContext.value('(/etl:Context/@BatchName)[1]','nvarchar(30)')

exec [prc_CreateHeader] @Header out,@BatchID,null,null,0,@debug,15
if (@debug = 1)
begin
   SET @msg =  'BEGIN Procedure ' + @ProcName + ' for BatchName=' + isnull(@BatchName,'NULL')
            + ' (' + isnull(cast(@BatchID as nvarchar(10)),'NULL') + ')'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end


if exists (select 1 from dbo.[ETLBatch] where BatchName = @BatchName and BatchID <> @BatchID)
BEGIN
   SET @Err = 50101
   SET @msg = '   ERROR pContext: BatchName=' + @BatchName + ' already exists with different BatchID'
   RAISERROR(@msg,11,11) 
END

--b shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cb.b.value('(./@BatchName)[1]','nvarchar(30)') as BatchName
      ,cb.b.value('(./@BatchDesc)[1]','nvarchar(500)') as BatchDesc
      ,cb.b.value('(./etl:OnSuccess/@ProcessID)[1]','int') as OnSuccessID
      ,cb.b.value('(./etl:OnFailure/@ProcessID)[1]','int') as OnFailureID
      ,cb.b.value('(./@IgnoreErr)[1]','tinyint') as IgnoreErr
      ,cb.b.value('(./@Restart)[1]','tinyint') as RestartOnErr
      ,cb.b.value('(./@MaxThread)[1]','tinyint') as MaxThread
      ,cb.b.value('(./@Timeout)[1]','int') as [Timeout]
      ,cb.b.value('(./@Lifetime)[1]','int') as Lifetime
      ,cb.b.value('(./@Ping)[1]','tinyint') as Ping
      ,cb.b.value('(./@HistRet)[1]','int') as HistRet
      ,cb.b.value('(./@Retry)[1]','int') as Retry
      ,cb.b.value('(./@Delay)[1]','int') as [Delay]
  into #b
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--ba shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cba.ba.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,cba.ba.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #ba
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Attributes/etl:Attribute') cba(ba)
  union select BatchID,'MAXTHREAD',cast(MaxThread as nvarchar(1000)) from #b where MaxThread is not null
  union select BatchID,'TIMEOUT',cast([Timeout] as nvarchar(1000)) from #b where [Timeout] is not null
  union select BatchID,'LIFETIME',cast(Lifetime as nvarchar(1000)) from #b where Lifetime is not null
  union select BatchID,'PING',cast(Ping as nvarchar(1000)) from #b where Ping is not null
  union select BatchID,'HISTRET',cast(HistRet as nvarchar(1000)) from #b where HistRet is not null
  union select BatchID,'RETRY',cast(Retry as nvarchar(1000)) from #b where Retry is not null
  union select BatchID,'DELAY',cast([Delay] as nvarchar(1000)) from #b where [Delay] is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding BA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end


;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cbc.bc.value('(./@ConstID)[1]','int') as ConstID
      ,cbc.bc.value('(./etl:Process/@ProcessID)[1]','int') as ProcessID
      ,cbc.bc.value('(./@ConstOrder)[1]','nvarchar(10)') as ConstOrder
      ,cbc.bc.value('(./@WaitPeriod)[1]','int') as WaitPeriod
      ,cbc.bc.value('(./@Disabled)[1]','tinyint') as [Disabled]
      ,cbc.bc.value('(./@Ping)[1]','int') as Ping
  into #bc
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Constraints/etl:Constraint') cbc(bc)
set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding BC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cbc.bc.value('(./@ConstID)[1]','int') as ConstID
      ,cbca.bca.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,cbca.bca.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #bca
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Constraints/etl:Constraint') cbc(bc)
  cross apply cbc.bc.nodes('./etl:Attributes/etl:Attribute') cbca(bca)
  union select BatchID,ConstID,'DISABLED',cast([Disabled] as nvarchar(1000)) from #bc where [Disabled] is not null
  union select BatchID,ConstID,'PING',cast(Ping as nvarchar(1000)) from #bc where Ping is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding BCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--s shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,cs.s.value('(./@StepName)[1]','nvarchar(100)') as StepName
      ,cs.s.value('(./@StepDesc)[1]','nvarchar(500)') as StepDesc
      ,cs.s.value('(./etl:Process/@ProcessID)[1]','int') as StepProcID
      ,cs.s.value('(./etl:OnSuccess/@ProcessID)[1]','int') as OnSuccessID
      ,cs.s.value('(./etl:OnFailure/@ProcessID)[1]','int') as OnFailureID
      ,cs.s.value('(./@IgnoreErr)[1]','tinyint') as IgnoreErr
      ,cs.s.value('(./@Restart)[1]','tinyint') as RestartOnErr
      ,cs.s.value('(./@StepOrder)[1]','nvarchar(10)') as StepOrder
      ,cs.s.value('(./@Disabled)[1]','tinyint') as [Disabled]
      ,cs.s.value('(./@SeqGroup)[1]','int') as SeqGroup
      ,cs.s.value('(./@PriGroup)[1]','int') as PriGroup
      ,cs.s.value('(./@Retry)[1]','int') as Retry
      ,cs.s.value('(./@Delay)[1]','int') as [Delay]
  into #s
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding S:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sa shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,csa.sa.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,csa.sa.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #sa
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)
  cross apply cs.s.nodes('./etl:Attributes/etl:Attribute') csa(sa)
  union select BatchID,StepID,'DISABLED',cast([Disabled] as nvarchar(1000)) from #s where [Disabled] is not null
  union select BatchID,StepID,'SEQGROUP',cast(SeqGroup as nvarchar(1000)) from #s where SeqGroup is not null
  union select BatchID,StepID,'PRIGROUP',cast(PriGroup as nvarchar(1000)) from #s where PriGroup is not null
  union select BatchID,StepID,'RETRY',cast(Retry as nvarchar(1000)) from #s where Retry is not null
  union select BatchID,StepID,'DELAY',cast([Delay] as nvarchar(1000)) from #s where [Delay] is not null
  union select BatchID,StepID,'RESTART',cast(RestartOnErr as nvarchar(1000)) from #s where RestartOnErr is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding SA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sc shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,csc.sc.value('(./@ConstID)[1]','int') as ConstID
      ,csc.sc.value('(./etl:Process/@ProcessID)[1]','int') as ProcessID
      ,csc.sc.value('(./@ConstOrder)[1]','nvarchar(10)') as ConstOrder
      ,csc.sc.value('(./@WaitPeriod)[1]','int') as WaitPeriod
      ,csc.sc.value('(./@Disabled)[1]','tinyint') as [Disabled]
      ,csc.sc.value('(./@Ping)[1]','int') as Ping
  into #sc
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)
  cross apply cs.s.nodes('./etl:Constraints/etl:Constraint') csc(sc)

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding SC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sca shred
;with xmlnamespaces('ETLController.XSD' as etl)
select
       cb.b.value('(./@BatchID)[1]','int') as BatchID
      ,cs.s.value('(./@StepID)[1]','int') as StepID
      ,csc.sc.value('(./@ConstID)[1]','int') as ConstID
      ,csca.sca.value('(./@Name)[1]','nvarchar(100)') as AttributeName
      ,csca.sca.value('(.)[1]','nvarchar(4000)') as AttributeValue
  into #sca
  from @pContext.nodes('/etl:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)
  cross apply cb.b.nodes('./etl:Steps/etl:Step') cs(s)
  cross apply cs.s.nodes('./etl:Constraints/etl:Constraint') csc(sc)
  cross apply csc.sc.nodes('./etl:Attributes/etl:Attribute') csca(sca)
  union select BatchID,ConstID,ConstID,'DISABLED',cast([Disabled] as nvarchar(1000)) from #sc where [Disabled] is not null
  union select BatchID,ConstID,ConstID,'PING',cast(Ping as nvarchar(1000)) from #sc where Ping is not null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Shredding SCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

BEGIN TRAN

if (@Replace = 1)
begin

   exec @ProcErr = dbo.[prc_RemoveContext] @BatchName,@pHandle,@pOptions

   if (@debug = 1)
   begin
      SET @msg =  'Deleted all old records (Replace=1)...'
      exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
      exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
   end

end

--b persist
update d
   set
       d.BatchName = t.BatchName
      ,d.BatchDesc = t.BatchDesc
      ,d.OnSuccessID = t.OnSuccessID
      ,d.OnFailureID = t.OnFailureID
      ,d.IgnoreErr = t.IgnoreErr
      ,d.RestartOnErr = t.RestartOnErr
  from dbo.[ETLBatch] d
  join #b t on d.BatchID = t.BatchID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

set identity_insert dbo.[ETLBatch] on
insert dbo.[ETLBatch]
    (BatchID,BatchName,BatchDesc,OnSuccessID,OnFailureID,IgnoreErr,RestartOnErr)
select
       t.BatchID
      ,t.BatchName
      ,t.BatchDesc
      ,t.OnSuccessID
      ,t.OnFailureID
      ,t.IgnoreErr
      ,t.RestartOnErr
  from #b t
  left join dbo.[ETLBatch] d on t.BatchID = d.BatchID
 where d.BatchID is null
set @cnt = @@ROWCOUNT
set identity_insert dbo.[ETLBatch] off

if (@debug = 1)
begin
   SET @msg =  'Inserted B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--ba persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLBatchAttribute] d
  join #ba t on d.BatchID = t.BatchID and d.AttributeName = t.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated BA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLBatchAttribute]
    (BatchID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.AttributeName
      ,t.AttributeValue
  from #ba t
  left join dbo.[ETLBatchAttribute] d on t.BatchID = d.BatchID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted B:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--bc persist
update d
   set
       d.ProcessID = t.ProcessID
      ,d.ConstOrder = t.ConstOrder
      ,d.WaitPeriod = t.WaitPeriod
  from dbo.[ETLBatchConstraint] d
  join #bc t on d.BatchID = t.BatchID and d.ConstID = t.ConstID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated BC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

set identity_insert dbo.[ETLBatchConstraint] on
insert dbo.[ETLBatchConstraint]
    (BatchID,ConstID,ProcessID,ConstOrder,WaitPeriod)
select
       t.BatchID
      ,t.ConstID
      ,t.ProcessID
      ,t.ConstOrder
      ,t.WaitPeriod
  from #bc t
  left join dbo.[ETLBatchConstraint] d on t.BatchID = d.BatchID and d.ConstID = t.ConstID
 where d.BatchID is null
set @cnt = @@ROWCOUNT
set identity_insert dbo.[ETLBatchConstraint] off

if (@debug = 1)
begin
   SET @msg =  'Inserted BC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--bca persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLBatchConstraintAttribute] d
  join #bca t on t.BatchID = d.BatchID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated BCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLBatchConstraintAttribute]
    (BatchID,ConstID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.ConstID
      ,t.AttributeName
      ,t.AttributeValue
  from #bca t
  left join dbo.[ETLBatchConstraintAttribute] d on t.BatchID = d.BatchID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted BCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--s persist
update d
   set
       d.StepName = t.StepName
      ,d.StepDesc = t.StepDesc
      ,d.StepProcID = t.StepProcID
      ,d.OnSuccessID = t.OnSuccessID
      ,d.OnFailureID = t.OnFailureID
      ,d.IgnoreErr = t.IgnoreErr
      ,d.StepOrder = t.StepOrder
  from dbo.[ETLStep] d
  join #s t on d.BatchID = t.BatchID and t.StepID = d.StepID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated S:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

set identity_insert dbo.[ETLStep] on
insert dbo.[ETLStep]
    (BatchID,StepID,StepName,StepDesc,StepProcID,OnSuccessID,OnFailureID,IgnoreErr,StepOrder)
select
       t.BatchID
      ,t.StepID
      ,t.StepName
      ,t.StepDesc
      ,t.StepProcID
      ,t.OnSuccessID
      ,t.OnFailureID
      ,t.IgnoreErr
      ,t.StepOrder
  from #s t
  left join dbo.[ETLStep] d on t.BatchID = d.BatchID
 where d.BatchID is null

set @cnt = @@ROWCOUNT
set identity_insert dbo.[ETLStep] off

if (@debug = 1)
begin
   SET @msg =  'Inserted S:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sa persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLStepAttribute] d
  join #sa t on d.BatchID = t.BatchID and d.StepID = t.StepID and d.AttributeName = t.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated SA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLStepAttribute]
    (BatchID,StepID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.StepID
      ,t.AttributeName
      ,t.AttributeValue
  from #sa t
  left join dbo.[ETLStepAttribute] d on t.BatchID = d.BatchID and d.StepID = t.StepID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted SA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sc persist
update d
   set
       d.ProcessID = t.ProcessID
      ,d.ConstOrder = t.ConstOrder
      ,d.WaitPeriod = t.WaitPeriod
  from dbo.[ETLStepConstraint] d
  join #sc t on d.BatchID = t.BatchID and d.StepID = t.StepID and d.ConstID = t.ConstID

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated SC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

set identity_insert dbo.[ETLStepConstraint] on
insert dbo.[ETLStepConstraint]
    (BatchID,StepID,ConstID,ProcessID,ConstOrder,WaitPeriod)
select
       t.BatchID
      ,t.StepID
      ,t.ConstID
      ,t.ProcessID
      ,t.ConstOrder
      ,t.WaitPeriod
  from #sc t
  left join dbo.[ETLStepConstraint] d on t.BatchID = d.BatchID and d.StepID = t.StepID and d.ConstID = t.ConstID
 where d.BatchID is null

set @cnt = @@ROWCOUNT
set identity_insert dbo.[ETLStepConstraint] off

if (@debug = 1)
begin
   SET @msg =  'Inserted SC:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

--sca persist
update d
   set
       d.AttributeValue = t.AttributeValue
  from dbo.[ETLStepConstraintAttribute] d
  join #sca t on t.BatchID = d.BatchID and d.StepID = t.StepID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Updated SCA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

insert dbo.[ETLStepConstraintAttribute]
    (BatchID,StepID,ConstID,AttributeName,AttributeValue)
select
       t.BatchID
      ,t.StepID
      ,t.ConstID
      ,t.AttributeName
      ,t.AttributeValue
  from #sca t
  left join dbo.[ETLStepConstraintAttribute] d on t.BatchID = d.BatchID and d.StepID = t.StepID and t.ConstID = d.ConstID and t.AttributeName = d.AttributeName
 where d.BatchID is null

set @cnt = @@ROWCOUNT
if (@debug = 1)
begin
   SET @msg =  'Inserted CSA:' + cast(@cnt as nvarchar(10)) + ' rows'
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
end

COMMIT TRAN

IF (@debug = 1)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ProcErr = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ProcErr = dbo.[prc_Print] @ProcessInfo,@pHandle
END

end try
begin catch
   if @Trancount < @@trancount
      ROLLBACK TRAN

   set @msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror (@msg,11,11)
end catch

RETURN @Err
GO
PRINT N'Creating [dbo].[prc_CounterGet]...';


GO
/*
select * from ETLBatchRun where batchid = 130

--select * from ETLStepRunCounter
--insert ETLStepRunCounter
--values(-20,1,4,'test','xxx')
--insert ETLStepRunCounter
--values(-20,1,3,'test1','yyy')
declare @pHeader xml
declare @pCounters xml
declare @pValue nvarchar(1000)
exec dbo.prc_CreateHeader @pHeader out,-20,1,null,4,1
--select @pHeader
exec dbo.prc_CreateCounters @pCounters out,@pHeader,'test'
exec dbo.prc_CounterGet @pValue out,@pHeader,'test'
select @pCounters
select @pValue

*/
create procedure [dbo].[prc_CounterGet] (
    @pValue nvarchar(max) output
   ,@pHeader xml([ETLController])
   ,@pName varchar(100) = null
) as
begin
/******************************************************************************
** File:	[ETL_CounterGet].sql
** Name:	[dbo].[ETL_CounterGet]

** SD Location: VSS/Development/SubjectAreas/BI/Database/Schema/Procedure/[ETL_CounterGet].sql:

** Desc:	return Counter value to the client
**          
**
** Params:
** Returns:
**
** Author:	andreys
** Date:	10/30/2007
** ****************************************************************************
** CHANGE HISTORY
** ****************************************************************************
** Date				Author	version	4	#bug			Description
** ----------------------------------------------------------------------------------------------------------

*/

set nocount on
declare @err                int
declare @proc               sysname
declare @msg                nvarchar(1000)
declare @debug              tinyint
declare @Options            int
declare @query              nvarchar(max)

declare @BatchID int
declare @StepID int
declare @RunID int
declare @LGRunID int
declare @ProcErr int
declare @ProcName sysname
declare @Counters xml(ETLController)

set @err = 0
begin try

exec @ProcErr = dbo.[prc_ReadHeader] @pHeader,null,null,null,@RunID out,null,null
exec @ProcErr = dbo.[prc_CreateCounters] @Counters out, @pHeader, @pName
exec @ProcErr = dbo.[prc_ReadCounter] @Counters,@pName,@pValue out,@RunID

end try
begin catch
   set @Proc = ERROR_PROCEDURE()
   set @pValue = null
   set @Msg = ERROR_MESSAGE()
   set @Err = ERROR_NUMBER()
   raiserror ('ERROR: PROC %s, MSG: %s',11,11,@Proc,@Msg) 
end catch

return @err
end
GO
PRINT N'Creating [dbo].[prc_Execute]...';


GO
--select * from ETLbatch
--select * from ETLstep where batchid = -20
--prc_execute 'NTBC01','debug,forcestart,slaveoff'
CREATE PROCEDURE [dbo].[prc_Execute]
    @pBatchName nvarchar(30)= NULL
   ,@Options nvarchar(100) = NULL
   ,@pHandle uniqueidentifier = NULL
   ,@pContext xml(ETLController) = NULL
As
/******************************************************************
**D File:             prc_Execute.SQL
**
**D Desc:         execute ETL process
**
**D Auth:         andreys
**D Date:         10/30/2007
**
** Param: 
          @pBatchName - BatchName from the ETLBatch Table. NULL if pContext is specified
         ,@Options    - debug(produce debug output)
                       ,forcestart(force the batch to start even when the other instance is running)
                       ,wait(wait <TIMEOUT> for the other instance to finish)
                       ,slaveoff(execute all steps on local service only. Communications to remote services will not start)
         ,@pHandle    - conversation handle to communicate back to parent process
         ,@pContext   - ad-hoc batch in xml format. see context element definition in ETLController schema

** Batch level system Attributes:
**  MAXTHREAD -- max number parallel threads
**  TIMEOUT   -- receive timeout in sec
**  LIFETIME  -- dialog timeout in sec
**  PING      -- receive wait break for external error checks in sec
**  HISTRET   -- time to retain processing history in days
** Step level system Attributes
**  DISABLED  -- YES/NO
**  SEQGROUP  -- sequence group. All steps in a group executed sequentially in StepOrder order
**  PRIGROUP  -- priority group. Groupes executed sequentially in PRIGROP order.
**               But steps in a group in parallel in StepOrder order
**  LOOPGROUP -- loop support. Steps in loop group are executed recursivly until BreakEvent is posted to any of LoogGroup steps
**  RESTART   -- 1/0 restart step on batch error
**  SVCNAME   -- SSB Service name to send a step for execution to (ANY = least busy, LOCAL = ETLController_Process (master node)
**               DEFAULT = LOCAL or configurable through systemparameters)
** Constraint level
**  PING      -- interval to call constraint process in sec (default to 10)
**  DISABLED  -- YES/NO

*******************************************************************
**      Change History
*******************************************************************
**  Date:            Author:            Description:
**  7/29/2008        andreys            wait option
**  2009/12/04       andrey@biasintelligence.com           handle Exit Event
**  2009/12/27       andrey@biasintelligence.com           loop support
**  2010/03/30       andrey@biasintelligence.com           add Send Cancel request
**  2010/04/01       andrey@biasintelligence.com           loop bug. if BreakEvent is posted from the last step the workflow will hang 
**  2010/05/16       andrey@biasintelligence.com           the workflow is left in running state after contraints were not met.
**  2010/07/17       andrey@biasintelligence.com           Master/Slave services. See SVCNAME attribute. By default run all steps on LOCAL Service (Master)
**                                      can be disabled by passing <slaveoff> keyword in options
**  2010/08/13       andrey@biasintelligence.com           fix force start recovery code. ETLBatch and ETLStep tables were not updated properly
**  2012/01/06       andrey@biasintelligence.com           fix step execution order
**  2014/01/20       andrey             fix IgnoreErr logic
******************************************************************/
SET NOCOUNT ON;

DECLARE @Err INT;
DECLARE @ExitCode INT;
DECLARE @Cnt INT;
--DECLARE @StepTable sysname
--DECLARE @nStepTable nvarchar(100)
DECLARE @ProcName sysname;
DECLARE @Trancount int;
DECLARE @Timeout int;
DECLARE @Loop int;
DECLARE @StepID int;
DECLARE @BatchID int;
DECLARE @nSQL1 nvarchar(max);
DECLARE @StatusID tinyint;
DECLARE @StatusOrder tinyint;
DECLARE @BatchStatusID tinyint;
DECLARE @BatchErr INT;
DECLARE @Now varchar(30);
DECLARE @msg nvarchar(max);

DECLARE @OnBatchSuccess sysname;
DECLARE @OnBatchFailure sysname;
DECLARE @BatchIgnore tinyint;
DECLARE @Restart tinyint;
DECLARE @RunID int;
DECLARE @LastStatusID tinyint;
DECLARE @LastRunID int;
DECLARE @CleanupRunID int;
DECLARE @checktimeout int;
DECLARE @SeqGroup nvarchar(10);
DECLARE @pDebug tinyint;
DECLARE @pForceStart tinyint;
DECLARE @pWait tinyint;
declare @pSlaveOff tinyint;
DECLARE @bOptions int;
DECLARE @RaiserrMsg nvarchar(max);
DECLARE @Wait varchar(20);
declare @StartDate datetime;
declare @StatusDate datetime;
declare @LocalService sysname;
declare @SvcName sysname;

--@pDebug is bitmap placeholder for options
-- 1 - debug
-- 2 - forcestart

SET @Trancount = @@TRANCOUNT;
--SET @StepTable = 'tempdb.dbo.' + @pBatchName
--SET @nStepTable = CAST(@StepTable AS nvarchar(100))
SET @ProcName = OBJECT_NAME(@@PROCID);
SET @Err = 0;
SET @ExitCode = 0;
SET @BatchErr = 0;
SET @LocalService = 'ETLController_Process'

SET @pDebug = CASE WHEN CHARINDEX('debug',@Options) > 0 THEN 1 ELSE 0 END;
SET @pForceStart = CASE WHEN CHARINDEX('forcestart',@Options) > 0 THEN 1 ELSE 0 END;
SET @pWait = CASE WHEN CHARINDEX('wait',@Options) > 0 THEN 1 ELSE 0 END;
SET @pSlaveOff = CASE WHEN CHARINDEX('slaveoff',@Options) > 0 THEN 1 ELSE 0 END;
SET @bOptions = isnull(@pDebug,0) + isnull(@pForceStart,0) * 2;

SET @checktimeout = 0;
SET @StartDate = GETDATE();

DECLARE @STAT_AVAILABLE TINYINT;
DECLARE @STAT_STARTED TINYINT;
DECLARE @STAT_SUCCESS TINYINT;
DECLARE @STAT_FAILURE TINYINT;
DECLARE @STAT_ERROR TINYINT;
DECLARE @STAT_WARNING TINYINT;
DECLARE @STAT_FAILURE_IMMEDIATE TINYINT;

SET @STAT_AVAILABLE = 0;
SET @STAT_STARTED = 1;
SET @STAT_SUCCESS = 2;
SET @STAT_FAILURE = 3;
SET @STAT_ERROR = 4;
SET @STAT_WARNING = 5;
SET @STAT_FAILURE_IMMEDIATE = 6;
-------------------------------------------------------------------
--Step Statuses
--0 - Available
--1 - Started
--2 - Success
--3 - Failure
--4 - Error
--5 - Warning
--6 - Failure with abort.Used only in constraint procs to abort constraint check
-------------------------------------------------------------------
DECLARE @ATT_MAXTHREAD TINYINT   -- max number parallel threads
DECLARE @ATT_TIMEOUT INT         -- receive timeout in sec
DECLARE @ATT_LIFETIME INT        -- dialog timeout in sec
DECLARE @ATT_PING_MAX INT        -- max PING value
DECLARE @ATT_PING INT            -- receive wait break for external error checks in sec
                                 -- defaults to @ATT_PING_MAX
DECLARE @ATT_HISTRET INT         -- time to retain processing history in days

--to test without broker
--create table #tmp(StepID int not null,StatusID tinyint not null)


DECLARE @handle AS UNIQUEIDENTIFIER
DECLARE @message_type NVARCHAR(256)
DECLARE @message NVARCHAR(MAX)
DECLARE @ProcessRequest AS XML (ETLController)
DECLARE @ProcessReceipt AS XML (ETLController)
DECLARE @ProcessInfo AS XML (ETLController)
DECLARE @Context AS XML (ETLController)
DECLARE @Header AS XML (ETLController)
DECLARE @BatchHeader AS XML (ETLController)
DECLARE @StepHeader AS XML (ETLController)
DECLARE @ReceiptHeader AS XML (ETLController)
DECLARE @ThreadCount TINYINT
declare @ServiceStatusID tinyint

raiserror ('
 Use ETLMonitor.exe to monitor workflow progress. All informational messages are directed to Log only.
 Error output is still multi-casted to both log and console.
 ',0,1) with nowait;  


BEGIN TRY --Main block
BEGIN TRY --validations

--dummy header
EXEC @ExitCode = dbo.prc_CreateHeader @Header out,0,0,0,0,@bOptions

SET @StatusID = NULL
IF (@pDebug = 1)
BEGIN
   SET @msg =  'BEGIN Procedure ' + @ProcName + ' with @pBatchName=' + isnull(@pBatchName,'@pContext')
   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
END


-----------------------------------------------------------------------------------
-- validate input parameters
-----------------------------------------------------------------------------------
if (@pBatchName is null)
begin
   if (@pContext is null)
   BEGIN
      SET @Err = 50101
      SET @StatusID = @STAT_ERROR
      SET @RaiserrMsg = '   ERROR @pContext is expected'
      RAISERROR(@RaiserrMsg,11,11) 
   END

  ;with xmlnamespaces('ETLController.XSD' as ETL)
  select @BatchID = @pContext.value('(/ETL:Context/@BatchID)[1]','int')
        ,@pBatchName = @pContext.value('(/ETL:Context/@BatchName)[1]','nvarchar(30)')

   if (@BatchID is null or @pBatchName is null)
   BEGIN
      SET @Err = 50101
      SET @StatusID = @STAT_ERROR
      SET @RaiserrMsg = '   ERROR @pContext: attribute BatchID and BatchName are required'
      RAISERROR(@RaiserrMsg,11,11) 
   END

   IF (@pDebug = 1)
   BEGIN
      SET @msg =  ' Context @pBatchName=' + @pBatchName
      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@Header,@msg
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
   END


   if exists (select 1 from dbo.ETLBatch where BatchName = @pBatchName and BatchID <> @BatchID)
   BEGIN
      SET @Err = 50101
      SET @StatusID = @STAT_ERROR
      SET @RaiserrMsg = '   ERROR pContext: BatchName=' + @pBatchName + ' already exists with different BatchID'
      RAISERROR(@RaiserrMsg,11,11) 
   END

   set @Options = @Options + ',replace'
   EXEC @ExitCode = dbo.prc_PersistContext @pContext,@pHandle,@Options
end
else
begin 

   SELECT @BatchID = BatchID
     FROM dbo.ETLBatch  WHERE BatchName = @pBatchName

   IF (@BatchID IS NULL)
   BEGIN
      SET @Err = 50101
      SET @StatusID = @STAT_ERROR
      SET @RaiserrMsg = '   ERROR invalid input parameter @pBatchName=' + @pBatchName
      RAISERROR(@RaiserrMsg,11,11)
   END
end

--dont have runid yet
EXEC @ExitCode = dbo.prc_CreateHeader @BatchHeader out,@BatchID,null,null,0,@bOptions,1--batch

IF (@pDebug = 1)
BEGIN
   SET @msg = '   Batch found @BatchID=' + CAST(@BatchID as nvarchar(30))
   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
END

EXEC @ExitCode = dbo.prc_CreateContext @Context out,@BatchHeader

IF (@pDebug = 1)
BEGIN
   SET @msg = '   Batch Context=' + CAST(@Context as nvarchar(max))
   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
END

;with xmlnamespaces('ETLController.XSD' as ETL)
select
       @OnBatchSuccess = 'exec @ExitCode = ' + cb.b.value('(./ETL:OnSuccess/ETL:Process)[1]','nvarchar(max)') + ' @pRequest=@Request,@pReceipt=@Receipt out' 
                       + isnull(',' + cb.b.value('(./ETL:OnSuccess/ETL:Param)[1]','nvarchar(max)'),'')
      ,@OnBatchFailure = 'exec @ExitCode = ' + cb.b.value('(./ETL:OnFailure/ETL:Process)[1]','nvarchar(max)') + ' @pRequest=@Request,@pReceipt=@Receipt out' 
                       + isnull(',' + cb.b.value('(./ETL:OnFailure/ETL:Param)[1]','nvarchar(max)'),'')
      ,@BatchIgnore = NULLIF(cb.b.value('(./@IgnoreErr)[1]','tinyint'),0)
      ,@Restart = NULLIF(cb.b.value('(./@Restart)[1]','tinyint'),0)
      ,@ATT_MAXTHREAD = NULLIF(cb.b.value('(./@MaxThread)[1]','tinyint'),0)
      ,@ATT_TIMEOUT = NULLIF(cb.b.value('(./@Timeout)[1]','int'),0)
      ,@ATT_LIFETIME = NULLIF(cb.b.value('(./@Lifetime)[1]','int'),0)
      ,@ATT_PING = NULLIF(cb.b.value('(./@Ping)[1]','int'),0)
      ,@ATT_HISTRET = NULLIF(cb.b.value('(./@HistRet)[1]','int'),0)
  from @Context.nodes('/ETL:Context[@BatchID=(sql:variable("@BatchID"))]') cb(b)

-------------------------------------------------------------------
--Set defaults
-------------------------------------------------------------------
SET @ATT_PING_MAX = 120 --sec
SET @ATT_MAXTHREAD = CASE WHEN ISNULL(@ATT_MAXTHREAD,0) <= 0 THEN 1 ELSE @ATT_MAXTHREAD END; --num
SET @ATT_LIFETIME = CASE WHEN ISNULL(@ATT_LIFETIME,0) <= 0 THEN 7200 ELSE @ATT_LIFETIME END; --sec
SET @ATT_TIMEOUT = CASE WHEN ISNULL(@ATT_TIMEOUT,0) <= 0 THEN @ATT_LIFETIME ELSE @ATT_TIMEOUT END; --sec
--Ping must be less then 1 min
--it is used to reset the broker thread Cancel job timer
--which is hardcoded to 60 sec. if ping is not received within 1 min
--all worker threads will be terminated for that conversation
-- this is done to allow to kill the prc_execute process
SET @ATT_PING = case when ISNULL(@ATT_PING,0) < 1 then @ATT_PING_MAX
                     when @ATT_PING > @ATT_PING_MAX then @ATT_PING_MAX
                     else @ATT_PING
                 end
SET @ATT_HISTRET = CASE WHEN ISNULL(@ATT_HISTRET,0) <= 0 THEN 100 ELSE @ATT_HISTRET END; --days

-------------------------------------------------------------------
--Check if this batch is running
-------------------------------------------------------------------
SELECT @LastStatusID = StatusID
      ,@LastRunID    = RunID
  FROM dbo.ETLBatchRun
 WHERE RunID = (SELECT MAX(RunID) FROM dbo.ETLStepRun
                 WHERE BatchID = @BatchID)

IF (@LastRunID IS NOT NULL)
BEGIN
    IF (@pForceStart = 0)
    BEGIN
       -- wait <TIMEOUT> <PING>
       SET @Wait = right('00' + cast((@ATT_PING)/3600 as varchar(10)),3)
                + ':' + right('0' + cast(((@ATT_PING)/60)%60 as varchar(10)),2)
                + ':' + right('0' + cast((@ATT_PING)%60 as varchar(10)),2)

       SET @checktimeout = 0
       WHILE (@pWait = 1 AND @checktimeout < @ATT_TIMEOUT)
       BEGIN
          IF (@pDebug = 1)
          BEGIN
             SET @msg = '   Waiting (' + @Wait + ')on previous run to finish RunID=' + cast(@LastRunID as varchar(10)) 
             exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
             exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
          END
          WAITFOR DELAY @wait
          SET @LastStatusID = NULL
          SELECT @LastStatusID = StatusID
                ,@LastRunID    = RunID
            FROM dbo.ETLBatchRun
           WHERE RunID = (SELECT MAX(RunID) FROM dbo.ETLStepRun
                          WHERE BatchID = @BatchID)

           IF (ISNULL(@LastStatusID,@STAT_AVAILABLE) <> @STAT_STARTED)
              BREAK

          SET @checktimeout = @checktimeout + @ATT_PING
       END
       IF (ISNULL(@LastStatusID,@STAT_AVAILABLE) = @STAT_STARTED)
       BEGIN
          SET @Err = 50103
          SET @StatusID = @STAT_FAILURE_IMMEDIATE
          SET @RaiserrMsg = '   ERROR Batch=' + @pBatchName
                + ' is already running with RunID=' + cast(@LastRunID as varchar(10))
                + ', process can not continue '
          exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@RaiserrMsg,@Err
          exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
          RAISERROR(@RaiserrMsg,11,11)
       END
     END
     ELSE
     BEGIN
       SET @msg = '   WARNING Batch=' + @pBatchName
             + ' is force started from RunID=' + cast(@LastRunID as varchar(10))
       exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
       exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
       exec @ExitCode = dbo.prc_Finalize @BatchHeader,@pHandle,@STAT_FAILURE;
    END
END

SELECT @LastStatusID = StatusID
      ,@LastRunID    = RunID
 FROM dbo.ETLBatchRun
WHERE RunID = (SELECT MAX(RunID) FROM dbo.ETLBatchRun
                WHERE BatchID = @BatchID)

end try --validations
begin catch
  set @msg = error_message();
  raiserror('Validation Block error=%d,status=%d: %s',11,11,@Err,@StatusID,@msg)
end catch

begin try -- workflow body block
begin try -- workflow constraints check block

SET @checktimeout = 0
-------------------------------------------------------------------
--Generate new runid
--Prepare Processing Step records
-------------------------------------------------------------------
INSERT dbo.ETLBatchRun
(BatchID,StatusDT,StatusID,Err,StartTime,EndTime)
SELECT @BatchID,getdate(),1,0,getdate(),cast(null as datetime)
SELECT @RunID = SCOPE_IDENTITY()


-------------------------------------------------------------------
--Process the Batch Constraints
-------------------------------------------------------------------
EXEC @ExitCode = dbo.prc_CreateHeader @Header out,@BatchID,null,null,@RunID,@bOptions,5 --b and bc
exec @ExitCode = dbo.prc_CreateContext @Context out,@Header
exec @ExitCode = dbo.prc_CreateProcessRequest @ProcessRequest out,@Header,@Context,@pHandle

--IF (@pDebug = 1)
--BEGIN
--   SET @msg = '   Batch Constraint Context=' + CAST(@Context as nvarchar(max))
--   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
--   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
--END

SET @ProcessReceipt = NULL
EXEC @ExitCode = dbo.prc_ConstraintCheck
                  @pRequest = @ProcessRequest
                 ,@pReceipt = @ProcessReceipt output

EXEC @ExitCode = dbo.prc_ReadProcessReceipt @ProcessReceipt,null,@StatusID out,@Err out,@msg out
SET @StatusID = ISNULL(@StatusID,@STAT_ERROR)

IF (@StatusID = @STAT_FAILURE)
BEGIN
   SET @RaiserrMsg = '   ERROR Batch Constraints were not met'
END
ELSE IF (@StatusID = @STAT_ERROR or @Err <> 0)
BEGIN
   SET @RaiserrMsg = '   ERROR Batch Constraints check failed'
END

IF (@pDebug = 1)
BEGIN
   SET @msg = '   Batch Constraint Check returns StatusID=' + CAST(@StatusID as nvarchar(30))
   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
END

IF (@RaiserrMsg is not null)
BEGIN
   RAISERROR(@RaiserrMsg,11,11)
END

end try --workflow constraints check block
begin catch
  set @msg = ERROR_MESSAGE()
  raiserror('Workflow Constraints Check Block error=%d,status=%d: %s',11,11,@Err,@StatusID,@msg)
end catch

begin try --workflow steps block

set @BatchStatusID = @STAT_SUCCESS;
-------------------------------------------------------------------
--Retrieve destination service list
--and start conversation to all available services
-------------------------------------------------------------------
declare @service table (SvcID int identity(1,1),[SvcName] sysname,StatusID smallint null
                       ,Handle uniqueidentifier null,grpHandle uniqueidentifier null,StatusDate datetime null)
declare @svcid int
declare @svcStatusID smallint
declare @grpHandle uniqueidentifier

insert @service (SvcName,StatusID)
select [name],@STAT_STARTED
  from sys.services where [name] = @LocalService;

if (@pSlaveOff = 0)
   insert @service (SvcName,StatusID)
   select [remote_service_name],@STAT_STARTED
     from sys.routes where [remote_service_name] like @LocalService + '%'
     and [remote_service_name] <> @LocalService;

set @svcid = 0
SET @grpHandle = newid()
while (1=1)
begin
   set @svcName = null
   select @svcname = SvcName
         ,@svcid = SvcID
     from @service where SvcId = (select min(SvcID) from  @service where SvcID > @SvcID)
   if @svcName is null
      break


--Start conversation
   SET @Handle = null
   BEGIN DIALOG CONVERSATION @handle
   FROM SERVICE  [ETLController_Request]
   TO SERVICE @svcName
--select family_id from master.sys.databases where database_id = db_id()
--                           ,'E995CF15-A383-4FBB-8FE3-1D6C129F190C'
   ON CONTRACT  [ETLController]
   WITH LIFETIME = @ATT_LIFETIME
   ,RELATED_CONVERSATION_GROUP = @grpHandle
   ,ENCRYPTION = OFF

   if (@handle is null)
      continue

   IF (@pDebug = 1)
   BEGIN
      SET @msg = '   Start Conversation to service:' + @svcName
      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
   END

   update @service
      set Handle = @handle
         ,grpHandle = @GrpHandle
         ,StatusID = @STAT_STARTED
         ,StatusDate = GETDATE()
    where SvcID = @SvcID

   --overload StepID with SvcID in test msg
   exec @ExitCode = dbo.prc_CreateHeader @Header out,@BatchID,@SvcID,null,@RunID,@bOptions,0
   exec @ExitCode = dbo.prc_CreateProcessRequest @ProcessRequest out,@Header,null,null;
   
   SEND ON CONVERSATION @handle 
   MESSAGE TYPE [ETLController_Test]
   (CAST(@ProcessRequest AS VARBINARY(MAX)));

   BEGIN CONVERSATION TIMER (@handle) TIMEOUT = @ATT_PING ;

end

if not exists(select 1 from @service where handle is not null)
begin
  SET @RaiserrMsg = '   ERROR no available services found'
  RAISERROR(@RaiserrMsg,11,11)
end

-------------------------------------------------------------------
--Prepare the step Queue table
-------------------------------------------------------------------

EXEC @ExitCode = dbo.prc_CreateHeader @BatchHeader out,@BatchID,null,null,@RunID,@bOptions,1--batch

INSERT dbo.ETLStepRun
(RunID,BatchID,StepID
,StatusDT,StatusID
,SPID,StepOrder,IgnoreErr
,Err,StartTime,EndTime,SeqGroup,PriGroup,SvcName)

SELECT @RunID,s.BatchID,s.StepID
      ,getdate(),@STAT_AVAILABLE
      ,null,s.StepOrder,ISNULL(NULLIF(@BatchIgnore,0),NULLIF(s.IgnoreErr,0))
      ,null,null,null,sg.AttributeValue,isnull(pg.AttributeValue,'zzz')
      ,case when coalesce(sn.AttributeValue,bsn.AttributeValue,'LOCAL') IN ('LOCAL','DEFAULT') then @LocalService
            else isnull(sn.AttributeValue,bsn.AttributeValue)
       end
  FROM dbo.ETLStep s
  LEFT JOIN dbo.ETLStepAttribute a ON s.BatchID = a.BatchID AND s.StepID = a.StepID
   AND a.AttributeName = 'DISABLED' AND a.AttributeValue = '1'
  LEFT JOIN dbo.ETLStepAttribute sg ON s.BatchID = sg.BatchID AND s.StepID = sg.StepID
   AND sg.AttributeName = 'SEQGROUP'
  LEFT JOIN dbo.ETLStepAttribute pg ON s.BatchID = pg.BatchID AND s.StepID = pg.StepID
   AND pg.AttributeName = 'PRIGROUP'
  LEFT JOIN dbo.ETLStepAttribute rs ON s.BatchID = rs.BatchID AND s.StepID = rs.StepID
   AND rs.AttributeName = 'RESTART'
  LEFT JOIN dbo.ETLStepAttribute sn ON s.BatchID = sn.BatchID AND s.StepID = sn.StepID
   AND sn.AttributeName = 'SVCNAME'
  LEFT JOIN dbo.ETLBatchAttribute bsn ON s.BatchID = bsn.BatchID
   AND bsn.AttributeName = 'SVCNAME'  
 WHERE (s.BatchID = @BatchID and a.StepID IS NULL  --enebled steps only
   AND (ISNULL(@LastStatusID,@STAT_AVAILABLE) = @STAT_SUCCESS --succeeded batches 
    OR ((ISNULL(@Restart,0) <> 0) or (isnull(cast(rs.AttributeValue as tinyint),0) <> 0)) --always restartable steps
    OR (ISNULL(s.StatusID,@STAT_AVAILABLE) <> @STAT_SUCCESS) --never executed or failed steps
       ));

    SELECT @Cnt = @@ROWCOUNT
    IF (@Cnt = 0)
    BEGIN
       --this code also will work when last run failed on batch success process 
       --SET @StatusID = @STAT_SUCCESS
       SET @StatusID = @STAT_WARNING
       SET @msg = '   WARNING no steps found for the batch'
       exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
       exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
       --SET @RaiserrMsg = '   WARNING no steps found for the batch'
       --RAISERROR(@RaiserrMsg,11,11)
    END

    IF (@pDebug = 1)
    BEGIN
       SET @msg = '   Selected ' + CAST(@Cnt as nvarchar(30)) + ' steps into dbo.ETLStepRun with RunID=' + cast(@RunID as varchar(10)) 
       exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
       exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
    END
  

-------------------------------------------------------------------
--LOOP support
-------------------------------------------------------------------
declare @LoopGroup table (StepID int,GroupCode nvarchar(100),StatusID int, primary key (StepID,GroupCode))

insert @LoopGroup (StepID,GroupCode,StatusID)
select s.StepID, sa.AttributeValue,@STAT_STARTED
  from dbo.ETLStepRun s
  join dbo.ETLStepAttribute sa on sa.BatchID = s.BatchID and sa.StepID = s.StepID
   and sa.AttributeName = 'LOOPGROUP'
 where s.BatchID = @BatchID and s.RunId = @RunID


-------------------------------------------------------------------
--Loop through the Batch Steps
-------------------------------------------------------------------
SET @ThreadCount = 0
SET @Handle = null
Send_Message:
   IF(@ThreadCount >= @ATT_MAXTHREAD
   --wait for all services to responde
   --or exists (select 1 from @service where StatusID <> @STAT_SUCCESS)
   --wait for at least 1 service to respond
   or not exists (select 1 from @service where StatusID = @STAT_SUCCESS)
     )
      GOTO Receive_Message


-------------------------------------------------------------------
--Lock next available step for execution
-------------------------------------------------------------------
   SET @StepID = NULL
   SET @StatusID = NULL

    UPDATE  sr
    SET @StepID = sr1.StepID,sr.SPID = @@SPID,sr.StatusID = @STAT_STARTED,sr.StartTime = getdate()
	FROM dbo.ETLStepRun sr
	JOIN (SELECT TOP (1) sr.BatchID,sr.StepID
    FROM  dbo.ETLStepRun sr WHERE sr.RunID = @RunID AND sr.BatchID = @BatchID AND sr.StatusID = @STAT_AVAILABLE
	--requested step service should be running
    AND NOT EXISTS (SELECT 1 FROM @service svc WHERE (svc.SvcName = sr.SvcName AND svc.StatusID = @STAT_STARTED))
	--Seqgroup and PriGroup requirements should be met
    AND NOT EXISTS (SELECT 1 FROM dbo.ETLStepRun sr1 WHERE sr.BatchID = sr1.BatchID AND sr.RunID = sr1.RunID
    AND ((sr.SeqGroup = sr1.SeqGroup AND sr.StepOrder > sr1.StepOrder)
        OR sr.PriGroup > sr1.priGroup) AND sr1.StatusID IN (@STAT_STARTED,@STAT_AVAILABLE))
	--no errors unless IgnoreErr is specified
	AND NOT EXISTS (SELECT 1 FROM dbo.ETLStepRun sr2 WHERE sr.BatchID = sr2.BatchID AND sr.RunID = sr2.RunID
	AND (sr2.StatusID IN (@STAT_ERROR,@STAT_FAILURE) AND (@BatchIgnore IS NULL AND sr2.IgnoreErr IS NULL)))
		ORDER BY sr.PriGroup,sr.StepOrder,sr.SeqGroup
		) sr1
	ON sr.BatchID = sr1.BatchID AND sr.StepID = sr1.StepID;
 
-------------------------------------------------------------------
-------------------------------------------------------------------
   -- exit with no error indicates that all steps are taken 
   IF (@StepID IS NULL)
   BEGIN
      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   No more available steps found'
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END
      SET @StatusID = @BatchStatusID
      IF (@ThreadCount > 0)
         GOTO Receive_Message
      ELSE
      BEGIN
         GOTO Exit_Loop
      END
   END

   exec @ExitCode = dbo.prc_CreateHeader @StepHeader out,@BatchID,@StepID,null,@RunID,@bOptions,11 --b,s and sc
 
   IF (@pDebug = 1)
   BEGIN
      SET @msg = '   Processing Step ' + CAST(@StepID as nvarchar(30))
      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@StepHeader,@msg
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
   END
  
-------------------------------------------------------------------
--Skip step on Exit Event
-------------------------------------------------------------------
   set @StatusID = cast(dbo.fn_ETLCounterGet (@BatchID,@StepID,@RunID,'ExitEvent') as tinyint)
   IF (@StatusID is not null)
   BEGIN
      -- Update Step Status
      UPDATE s
         SET s.StatusID = @StatusID,s.EndTime = getdate(),s.Err = @Err
        FROM dbo.ETLStepRun s
       WHERE s.RunID = @RunID AND s.StepID = @StepID AND s.BatchID = @BatchID


      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   Step ' + CAST(@StepID as nvarchar(30)) + ' skipped on ExitEvent with StatusID=' + CAST(@StatusID as nvarchar(30))
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@StepHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END
     
      GOTO Send_Message
   END
 
   exec @ExitCode = dbo.prc_CreateContext @Context out,@StepHeader
   exec @ExitCode = dbo.prc_CreateProcessRequest @ProcessRequest out,@StepHeader,@Context

--   IF (@pDebug = 1)
--   BEGIN
--      SET @msg = '   Step Context=' + CAST(@Context as nvarchar(max))
--      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@StepHeader,@msg
--      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
--   END

  set @Handle = null;
  select @SvcName = SvcName from dbo.ETLStepRun
   where BatchID = @BatchID and StepID = @StepID and RunID = @RunID;
   
  if (@SvcName = 'ANY')
  begin
-- less used
  select top(1) @Handle = h.Handle
               ,@SvcName = h.SvcName
    from @service h
    left join (
      select s.SvcName,count(*) as cnt
        from dbo.ETLStepRun s
       where s.BatchID = @BatchID and s.RunID = @RunID
         and s.SvcName is not null and s.StatusID = @STAT_STARTED
       group by s.SvcName) s on h.SvcName = s.SvcName
      where h.StatusID = @STAT_SUCCESS
      order by isnull(s.cnt,0);     
  end
  else if not exists (select 1 from @service where SvcName = @SvcName)
  begin
  --use local service for unknown Services
     set @SvcName = @LocalService;
     select top(1) @Handle = h.Handle
                  ,@SvcName = h.SvcName
       from @service h
      where h.SvcName = @SvcName
        and h.StatusID = @STAT_SUCCESS;
  end
  else
  begin
  --use service from metadata
     select top(1) @Handle = h.Handle
                  ,@SvcName = h.SvcName
       from @service h
      where h.SvcName = @SvcName
        and h.StatusID = @STAT_SUCCESS;
  end
   
   IF (@Handle IS NULL)
   BEGIN
      SET @Err = 50110;
      SET @StatusID = @STAT_ERROR;
      SET @RaiserrMsg = '   ERROR Service ' + @SvcName + ' is not available';
      RAISERROR(@RaiserrMsg,11,11);
   END

  update dbo.ETLSteprun
     set SvcName = @SvcName
   where BatchID = @BatchID and StepID = @StepID and RunID = @RunID
     and SvcName <> @SvcName;

   IF (@pDebug = 1)
   BEGIN
      SET @msg = '   Step ' + CAST(@StepID as nvarchar(30)) + ' was sent to service ' + @SvcName
      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@StepHeader,@msg
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
   END
   
                      
   ;SEND ON CONVERSATION @handle 
   MESSAGE TYPE [ETLController_Request]
   (CAST(@ProcessRequest AS VARBINARY(MAX)))
   
--to test without broker
--insert #tmp(StepID,StatusID)
--values (@StepID,2)

   SET @ThreadCount = @ThreadCount + 1
   GOTO Send_Message

Receive_Message:
   WAITFOR(
   RECEIVE top(1)
       @handle = conversation_handle,
       @message_type=message_type_name, 
       @message = message_body 
    FROM [ETLController_Receipt_Queue]
    WHERE conversation_group_id = @grpHandle
       )--, TIMEOUT @ATT_PING * 1000

   SELECT @Cnt = @@ROWCOUNT
   IF (@Cnt = 0)
   BEGIN
      SET @StatusID = @STAT_ERROR
      SET @Err = 50111
      SET @RaiserrMsg = '   ERROR conversation ' + CAST(@handle as nvarchar(36)) + ' received no message'
      raiserror (@RaiserrMsg,11,11)
   END
   
-------------------------------------------------------------------
--Exit Batch on Exit Event
-------------------------------------------------------------------
   set @StatusID = cast(dbo.fn_ETLCounterGet (@BatchID,0,@RunID,'ExitEvent') as tinyint)
   IF (@StatusID is not null)
   BEGIN
      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   Batch Exit on ExitEvent with StatusID=' + CAST(@StatusID as nvarchar(30))
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END
     
      GOTO Exit_Loop
   END

   
/*
--to test without broker
waitfor delay '000:00:05'
set @message_type = 'BATCHPROCESS_Receipt'
select top 1 @xml_Receipt = --NCHAR(0xFEFF) +
         N'<cait:ProcessReceipt xmlns:cait="BATCHPROCESS_Receipt.XSD">'
      + N'<cait:BatchID>' + CAST(@BatchID as nvarchar(30)) + N'</cait:BatchID>'
      + N'<cait:StepID>' + CAST(StepID as nvarchar(30)) + N'</cait:StepID>'
      + N'<cait:StatusID>' + CAST(StatusID as nvarchar(30)) + N'</cait:StatusID>'
      + N'<cait:Error>0</cait:Error>'
      + N'<cait:RunID>' + CAST(@RunID as nvarchar(30)) + N'</cait:RunID>'
      + N'</cait:ProcessReceipt>'
,@StepID = StepID
 from #tmp
set @cnt = 1
set @message = cast(@xml_Receipt as varbinary(max))
delete #tmp where StepId = @stepID
*/

   IF (@message_type = 'http://schemas.microsoft.com/SQL/ServiceBroker/DialogTimer')
   BEGIN

	  IF (@pDebug = 1)
	  BEGIN
	     SET @msg = '   DialogTimer message is received'
	     exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
	     exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
	  END
	  --StartDate = workflow instance start date
	  SET @checktimeout = DATEDIFF(SECOND,@StartDate,GETDATE())
	  IF (@checktimeout + @ATT_PING >= @ATT_LIFETIME) -- check dialog lifetime
      BEGIN
         SET @StatusID = @STAT_ERROR
         SET @Err = 50111
         SET @RaiserrMsg = '   ERROR Dialog Lifetime is exceeded'
         raiserror(@RaiserrMsg,11,11)
      END
	  ELSE IF (@checktimeout >= @ATT_TIMEOUT) -- check timeout
      BEGIN
         SET @StatusID = @STAT_ERROR
         SET @Err = 50112
         SET @RaiserrMsg = '   ERROR Workflow timeout is exceeded'
         raiserror(@RaiserrMsg,11,11)
      END
      ELSE
	  BEGIN
         
         select top(1) @svcid = h.SvcID
                      ,@SvcName = h.SvcName
                      ,@StatusDate = h.StatusDate
                      ,@ServiceStatusID = h.StatusID
           from @service h
          where h.Handle = @Handle
          
          --StatusDate = Last TEST message delivery
          --if test message didnt make thru until next Timer Ping print the warning
	      SET @checktimeout = DATEDIFF(SECOND,@StatusDate,GETDATE())	      
          if (@checktimeout > @ATT_PING)
          begin
            SET @msg = '   WARNING Workflow did not receive the Ping responce from service ' + @SvcName + ' in time'
	        exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
	        exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
	      end
            
          --overload StepID with SvcID in test msg
          exec @ExitCode = dbo.prc_CreateHeader @Header out,@BatchID,@SvcID,null,@RunID,@bOptions,0
          exec @ExitCode = dbo.prc_CreateProcessRequest @ProcessRequest out,@Header,null,null;
   
          --send another test message to check conversation status
          if (@ServiceStatusID = @STAT_SUCCESS)
          begin

             ;SEND ON CONVERSATION @handle 
             MESSAGE TYPE [ETLController_Test]
            (CAST(@ProcessRequest AS VARBINARY(MAX)));

             BEGIN CONVERSATION TIMER (@handle) TIMEOUT = @ATT_PING ;
          end
          else
          --never received the original response from Remote service: disable it
          begin
	         IF (@pDebug = 1)
	         BEGIN
	            SET @msg = '   WARNING: Service ' + @SvcName + ' will be disabled';
	            exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg;
	            exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle;
	         END
             ;END CONVERSATION @handle;
             
             delete @service where SvcID = @svcid;            
             if not exists(select 1 from @service)
             begin
                SET @StatusID = @STAT_ERROR
                SET @Err = 50113
                SET @RaiserrMsg = '   ERROR All Services failed to start'
                raiserror(@RaiserrMsg,11,11)
             end
             goto Send_Message                                  
          end
          GOTO Receive_Message
      END

   END
   --step processing message 
   ELSE IF (@message_type = 'ETLController_Receipt')
   BEGIN
      SET @ProcessReceipt = @message
      EXEC @ExitCode = dbo.prc_ReadProcessReceipt @ProcessReceipt,@ReceiptHeader out,@StatusID out,@Err out,@msg out
      EXEC @ExitCode = dbo.prc_ReadHeader @ReceiptHeader,null,@StepID out

-------------------------------------------------------------------
--Finish the step
-------------------------------------------------------------------
      -- Update Step Status
      UPDATE s
         SET s.StatusID = @StatusID,s.EndTime = getdate(),s.Err = @Err
        FROM dbo.ETLStepRun s
       WHERE s.RunID = @RunID AND s.StepID = @StepID AND s.BatchID = @BatchID


      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   Step ' + CAST(@StepID as nvarchar(30)) + ' completed with StatusID=' + CAST(@StatusID as nvarchar(30))
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@ReceiptHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END

-------------------------------------------------------------------
--LOOP support. Loop steps reset.
--Exit loop on receiving BreakEvent with the LoopGroup value
-------------------------------------------------------------------

      update lg
         set lg.StatusID = @STAT_SUCCESS
        from @LoopGroup lg
        join (select distinct rc.CounterValue as GroupCode
            from dbo.ETLStepRunCounter rc
           where rc.BatchID = @BatchID and rc.RunID = @RunID
             and rc.CounterName = 'BreakEvent') c
          on lg.GroupCode = c.GroupCode
        where lg.StatusID = @STAT_STARTED;
    
--update all the steps in a LoopGroup to available if loop is completed without BreakEvent
      update sr
         set StatusID = @STAT_AVAILABLE
            ,StatusDT = getdate()
            ,Err = 0
            ,EndTime = null
        from dbo.ETLStepRun sr
        join @LoopGroup r on sr.StepID = r.StepID and r.StatusID = @STAT_STARTED
         and r.GroupCode in (select r1.GroupCode
                           from @LoopGroup r1
                           join dbo.ETLStepRun sr1
                             on sr1.StepID = r1.StepID and sr1.BatchID = @BatchID and r1.StatusID = @STAT_STARTED
                        group by r1.GroupCode having COUNT(*) = SUM(case sr1.StatusID when 2 then 1 else 0 end))
       where sr.BatchID = @BatchID and sr.RunID = @RunID;

--update all not started steps in a LoopGroup to finished if loop receives a BreakEvent
      update sr
         set StatusID = @STAT_SUCCESS
            ,StatusDT = getdate()
            ,Err = 0
            ,EndTime = getdate()
        from dbo.ETLStepRun sr
        join @LoopGroup r on sr.StepID = r.StepID and r.StatusID = @STAT_SUCCESS
       where sr.BatchID = @BatchID and sr.StatusID = @STAT_AVAILABLE and sr.RunID = @RunID;

-------------------------------------------------------------------
--Check Batch Status
--keep batch running if IgnorErr in on but batch should still fail at the end
-------------------------------------------------------------------
      IF @BatchStatusID NOT IN (@STAT_ERROR,@STAT_FAILURE,@STAT_FAILURE_IMMEDIATE)
	  BEGIN
	     SET @BatchStatusID = @StatusID
      END
      SET @StatusID = NULL
      SET @StatusOrder = NULL

      -- Check Batch Status
      SELECT @StatusOrder = MIN(CASE
                WHEN StatusID IN (@STAT_FAILURE,@STAT_ERROR) AND IgnoreErr is not null THEN 10
                WHEN StatusID IN (@STAT_FAILURE,@STAT_ERROR) THEN 2
                ELSE 10 END)
        FROM dbo.ETLStepRun WHERE RunID = @RunID AND BatchID = @BatchID

      SELECT @StatusOrder = MIN(CASE
                WHEN sr.StatusID = @STAT_AVAILABLE THEN ISNULL(NULLIF(@StatusOrder,10),1)
                WHEN sr.StatusID = @STAT_SUCCESS and lg.StatusID = @STAT_STARTED THEN ISNULL(NULLIF(@StatusOrder,10),1)
                WHEN sr.StatusID = @STAT_STARTED THEN 1
                WHEN sr.StatusID = @STAT_SUCCESS THEN 4
                WHEN sr.StatusID IN (@STAT_FAILURE,@STAT_ERROR) AND IgnoreErr is not null THEN 4
                WHEN sr.StatusID = @STAT_FAILURE THEN 3
                WHEN sr.StatusID = @STAT_ERROR THEN 2
                WHEN sr.StatusID = @STAT_WARNING THEN 10
                WHEN sr.StatusID = @STAT_FAILURE_IMMEDIATE THEN 10
                ELSE 11 END)
        FROM dbo.ETLStepRun sr
        left join @LoopGroup lg on sr.StepID = lg.StepID 
       WHERE sr.RunID =  @RunID AND sr.BatchID = @BatchID

      SET @StatusID = CASE @StatusOrder
                WHEN 10 THEN @STAT_AVAILABLE
                WHEN 1 THEN @STAT_STARTED
                WHEN 4 THEN @STAT_SUCCESS
                WHEN 3 THEN @STAT_FAILURE
                WHEN 2 THEN @STAT_ERROR
                ELSE NULL END
-------------------------------------------------------------------
-------------------------------------------------------------------

      IF (@StatusID IS NULL)
      BEGIN
         SET @RaiserrMsg = '   ERROR failed to check the Status'
         SET @StatusID = @STAT_ERROR
         SET @Err = 50105
         raiserror(@RaiserrMsg,11,11)
      END

      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   Batch Run StatusID=' + CAST(@StatusID as nvarchar(30))
         SET @msg = @msg + '; Overall Batch StatusID=' + CAST(@BatchStatusID as nvarchar(30))
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END


      IF (@StatusID <> @STAT_STARTED)
      BEGIN
         SET @StatusID = @BatchStatusID
         GOTO Exit_Loop
      END

      SET @ThreadCount = @ThreadCount - 1
       GOTO Send_Message
    END--Receipt
    ELSE IF (@message_type = 'ETLController_InfoMessage')
    BEGIN
      set @ProcessInfo = @message
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      GOTO Receive_Message
    END--InfoMessage
    ELSE IF (@message_type = 'ETLController_Test')
    BEGIN
      set @ProcessReceipt = @message
      EXEC @ExitCode = dbo.prc_ReadProcessReceipt @ProcessReceipt,@ReceiptHeader out,@ServiceStatusID out,@Err out,@msg out
      EXEC @ExitCode = dbo.prc_ReadHeader @ReceiptHeader,null,@SvcID out
      set @ServiceStatusID = isnull(@ServiceStatusID,@STAT_ERROR)
      

      if (@pDebug = 1 or @ServiceStatusID <> @STAT_SUCCESS)
      begin
         select @SvcName = SvcName from @service where SvcID = @SvcID
         SET @msg = '   Service test ' + @SvcName + ' returns StatusID=' + CAST(@ServiceStatusID as nvarchar(30))
                  + ' with message: ' + @msg;
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      end

      update @service
         set StatusID = @ServiceStatusID
            ,StatusDate = GETDATE()
       where SvcID = @SvcID
       
      GOTO Send_Message
    END--TESTMESSAGE
    ELSE 
    BEGIN 
      --GOTO Receive_Message
      SET @StatusID = @STAT_ERROR
      SET @Err = 50110
      RAISERROR ('   ERROR Message received:[%s] %s',11,11,@message_type,@message)
    END--UNKNOWN

-- Conversation Completed
Exit_Loop:

IF(@StatusID <> @STAT_SUCCESS)
BEGIN
   SET @RaiserrMsg = '   ERROR Step processing block return StatusID=' + cast(@StatusID as nvarchar(10))
   RAISERROR(@RaiserrMsg,11,11)
END
END TRY --workflow steps block
BEGIN CATCH

IF (@Trancount < @@TRANCOUNT)
  ROLLBACK TRAN

SET @Err = case @Err when 0 then ERROR_NUMBER() else @Err end;
IF (@RaiserrMsg IS NULL)
BEGIN
   set @StatusID = @STAT_ERROR
   set @RaiserrMsg = ERROR_MESSAGE()
END

exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@RaiserrMsg,@Err
exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
SET @RaiserrMsg = null

--if previous batch failed on success or failure with all steps succeeded
--we need to try finishing it again
IF (@StatusID = @STAT_WARNING and @LastStatusID <> @STAT_SUCCESS)
BEGIN
   SET @msg = '   WARNING Trying to finish last successfull run again'
   set @StatusID = @STAT_SUCCESS
END
ELSE IF @StatusID = @STAT_ERROR
BEGIN
   SET @msg = '   ERROR Process failed with Status 4(ERROR)'
   SET @RaiserrMsg = @msg
END
ELSE IF @StatusID = @STAT_FAILURE
BEGIN
   SET @msg = '   ERROR Process failed with Status 3(FAILURE)'
   SET @RaiserrMsg = @msg
END
ELSE IF @StatusID = @STAT_WARNING
BEGIN
   SET @msg = '   WARNING Process exited with Status 5(WARNING)'
END
ELSE IF @StatusID = @STAT_FAILURE_IMMEDIATE
BEGIN
   SET @msg = '   ERROR Process exited with Status 6(FAILURE WITH EXIT_IMMEDIATE)'
   SET @RaiserrMsg = @msg
END

IF (@msg IS NOT NULL)
BEGIN
   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg,@Err
   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
END

END CATCH

-- End All conversations
WHILE (1 = 1)
BEGIN
   set @handle = null;
   SELECT top(1) @handle = Handle
                ,@grpHandle = grpHandle
                ,@SvcID = SvcID
                ,@svcname = SvcName
                ,@ServiceStatusID = StatusID
     from @Service where Handle is not null

   if (@Handle is null)
      break

   --send Cancel request message to the other threads to Cancel any outstanding executions
   --overload StepID with SvcID in test msg
   exec @ExitCode = dbo.prc_CreateHeader @Header out,@BatchID,@SvcID,null,@RunID,@bOptions,0
   exec @ExitCode = dbo.prc_CreateProcessRequest @ProcessRequest out,@Header,null,null;
 
   if (@ServiceStatusID = @STAT_SUCCESS)
   begin  
       begin try
  --for some reason EndDialog or Error message is not getting picked up from the Queue
   --right away. Using Cancel request instead
      ;SEND ON CONVERSATION @handle 
       MESSAGE TYPE [ETLController_Cancel]
       (CAST(@ProcessRequest AS VARBINARY(MAX)));

         IF (@pDebug = 1)
         BEGIN
            SET @msg = '   Cancel request was sent to service = ' + @SvcName
            exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
            exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
         END
         
         --wait for EndDialog message
         while (1 = 1)
         begin 
           set @checktimeout = @ATT_PING * 1000;
           WAITFOR(
           RECEIVE top(1)
             @handle = conversation_handle,
             @message_type=message_type_name, 
             @message = message_body 
           FROM [ETLController_Receipt_Queue]
           WHERE conversation_handle = @Handle
           ), TIMEOUT @checktimeout;
          
           --do not wait longer that ping interval
           set @Cnt = @@ROWCOUNT
           if (@Cnt = 0)
             break;
          
           if (@message_type in ('http://schemas.microsoft.com/SQL/ServiceBroker/EndDialog'
                               ,'http://schemas.microsoft.com/SQL/ServiceBroker/Error'))
              break;     
         end
         end try
         begin catch
             SET @msg = '   ERROR failed to SEND Cancel request to service = ' + @SvcName
             exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
             exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
         end catch
    end
    --try to end conversation     
    begin try
       END CONVERSATION @handle;
    end try
    begin catch
       IF (@pDebug = 1)
       BEGIN
          SET @msg = ERROR_MESSAGE();
          exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
          exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
       END    
    end catch
    delete @Service where SvcID = @SvcID
    SET @handle = null
END

end try --workflow body block
begin catch
   set @StatusId = case isnull(@StatusID,@STAT_ERROR) when @STAT_SUCCESS then @STAT_ERROR else isnull(@StatusID,@STAT_ERROR) end;
   set @Err = case @Err when 0 then ERROR_NUMBER() else @Err end;
end catch

-------------------------------------------------------------------
--Finish the batch
-------------------------------------------------------------------
SET @StepID = 0
IF (@RunID IS NOT NULL AND @StatusID <> @STAT_FAILURE_IMMEDIATE)
BEGIN
   --OnBatchSuccess\OnBatchFailure
   SET @BatchStatusID = @StatusID
   SET @BatchErr = @Err
   SET @nSQL1 = NULL
   IF (@StatusID = @STAT_SUCCESS)
   BEGIN
      SET @nSQL1 = @OnBatchSuccess
      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   OnBatchSuccess: ' + ISNULL(@OnBatchSuccess,'NULL')
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END
   END
   ELSE IF (@StatusID IN (@STAT_FAILURE,@STAT_ERROR))
   BEGIN
      SET @nSQL1 = @OnBatchFailure
      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   OnBatchFailure: ' + ISNULL(@OnBatchFailure,'NULL')
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END
   END

   IF (@nSQL1 IS NOT NULL)
   BEGIN
      BEGIN TRY
      exec @ExitCode = dbo.prc_CreateHeader @Header out,@BatchID,null,null,@RunID,@bOptions,1 --b
      exec @ExitCode = dbo.prc_CreateContext @Context out,@Header
      exec @ExitCode = dbo.prc_CreateProcessRequest @ProcessRequest out,@Header,@Context,@phandle
      SET @ProcessReceipt = NULL
      EXEC sp_ExecuteSQL @nSql1
                  ,N'@ExitCode int output,@Request xml,@Receipt xml output'
                  ,@ExitCode = @ExitCode output
                  ,@Request = @ProcessRequest
                  ,@Receipt = @ProcessReceipt output
      
      EXEC @ExitCode = dbo.prc_ReadProcessReceipt @ProcessReceipt,null,@StatusID out,@Err out,@msg out

      SET @StatusID = isnull(@StatusID,@STAT_ERROR)
      IF (@Err <> 0 OR @StatusID <> @STAT_SUCCESS)
      BEGIN
         SET @RaiserrMsg = '   ERROR failed to execute OnSuccess/OnFailure code: return StatusID=' + cast(@StatusID as nvarchar(10))
                         + ' with msg: ' +  isnull(@msg,'null')
         RAISERROR(@RaiserrMsg,11,11)
      END
      
      END TRY
      BEGIN CATCH
         SET @Err = isnull(nullif(@Err,0),ERROR_NUMBER())
         SET @RaiserrMsg = '   ERROR OnSuccess/OnFailure:' + ERROR_MESSAGE()
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@RaiserrMsg,@Err
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END CATCH

      IF (@pDebug = 1)
      BEGIN
         SET @msg = '   Completed with StatusID=' + CAST(@StatusID as nvarchar(30))
         exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg,@Err
         exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
      END

   END
   IF(@StatusID = @STAT_SUCCESS)
   BEGIN
      SET @StatusID = @BatchStatusID
      SET @Err = @BatchErr
   END
END

IF (@RunID IS NOT NULL)
BEGIN
   exec @ExitCode = dbo.prc_Finalize @BatchHeader,@pHandle,@StatusID;

   --processing history clean up
   SELECT @CleanupRunID = max(RunID)
     FROM dbo.ETLBatchRun
    WHERE BatchID = @BatchID and StatusDT <= dateadd(dd,-@ATT_HISTRET,getdate())

   IF (@pDebug = 1)
   BEGIN
      SET @msg = '   Retention for BatchID=' + CAST(@BatchID as nvarchar(30)) + ' is set to ' + CAST(@ATT_HISTRET as nvarchar(30)) + ' days.'
               + ' All history prior to RunID=' + ISNULL(CAST(@CleanupRunID as nvarchar(30)),'null') + ' will be deleted'
      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
   END

   IF (@CleanupRunID IS NOT NULL)
   BEGIN
      DELETE dbo.ETLStepRunHistoryLog
        FROM dbo.ETLStepRunHistoryLog h
        JOIN dbo.ETLBatchRun b on h.RunID = b.RunID AND b.BatchID = @BatchID
       WHERE  h.RunID <= @CleanupRunID

      DELETE dbo.ETLStepRunHistory WHERE RunID <= @CleanupRunID and BatchID = @BatchID
      DELETE dbo.ETLStepRunCounter WHERE RunID <= @CleanupRunID and BatchID = @BatchID
      --DELETE dbo.ETLStepRun WHERE RunID <= @CleanupRunID and BatchID = @BatchID
      DELETE dbo.ETLBatchRun WHERE RunID <= @CleanupRunID and BatchID = @BatchID
   END

   IF (@pDebug = 1)
   BEGIN
      SET @msg = '   Completed BatchID=' + CAST(@BatchID as nvarchar(30)) + ' with StatusID=' + CAST(@StatusID as nvarchar(30))
      exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg,@Err
      exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
   END

   if (@RaiserrMsg is not null)
      RAISERROR(@RaiserrMsg,11,11)

END

END TRY --Main block
BEGIN CATCH
   SET @Err = case @Err when 0 then ERROR_NUMBER() else @Err end
   SET @RaiserrMsg = ERROR_MESSAGE()
END CATCH

IF (@StatusID IN (@STAT_SUCCESS,@STAT_WARNING)) SET @Err = 0
IF (@pDebug = 1)
BEGIN
   SET @msg = 'END Procedure ' + @ProcName
   exec @ExitCode = dbo.prc_CreateProcessInfo @ProcessInfo out,@BatchHeader,@msg
   exec @ExitCode = dbo.prc_Print @ProcessInfo,@pHandle
END

IF (@RaiserrMsg is not null)
   RAISERROR(@RaiserrMsg,11,11)

RETURN @Err;
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
DECLARE @VarDecimalSupported AS BIT;

SELECT @VarDecimalSupported = 0;

IF ((ServerProperty(N'EngineEdition') = 3)
    AND (((@@microsoftversion / power(2, 24) = 9)
          AND (@@microsoftversion & 0xffff >= 3024))
         OR ((@@microsoftversion / power(2, 24) = 10)
             AND (@@microsoftversion & 0xffff >= 1600))))
    SELECT @VarDecimalSupported = 1;

IF (@VarDecimalSupported > 0)
    BEGIN
        EXECUTE sp_db_vardecimal_storage_format N'$(DatabaseName)', 'ON';
    END


GO
PRINT N'Update complete.';


GO
